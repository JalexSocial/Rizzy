{"version":3,"file":"rizzy.js","mappings":";;;;;;;;AAAA;AACA,IAAI,IAAyD;AAC7D;AACA,MAAM,EAKiC;AACvC,CAAC;AACD,yBAAyB;AACzB;AACA;AACA,cAAc,8BAAmB;AACjC;AACA;AACA;AACA;AACA;AACA,WAAW,8BAAmB;AAC9B;AACA,gBAAgB,8BAAmB,wBAAwB,8BAAmB;AAC9E,oDAAoD,wCAAwC;AAC5F;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW,8BAAmB;AAC9B,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW,8BAAmB;AAC9B;AACA,kEAAkE,iBAAiB;AACnF;AACA,2DAA2D,aAAa;AACxE;AACA,WAAW;AACX;AACA;AACA,IAAI,0BAAmB;AACvB;AACA;AACA;AACA,8BAAmB,GAAG,0BAAmB;AACzC,qBAAqB,8BAAmB,GAAG,0BAAmB;AAC9D;AACA;AACA;AACA,sBAAsB;AACtB,iBAAiB,MAAgC;AACjD,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,mBAAmB,MAAkC;AACrD,cAAc,6BAA6B,0BAA0B,cAAc,qBAAqB;AACxG,iBAAiB,oDAAoD,qEAAqE,cAAc;AACxJ,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,mCAAmC,SAAS;AAC5C,mCAAmC,WAAW,UAAU;AACxD,0CAA0C,cAAc;AACxD;AACA,8GAA8G,OAAO;AACrH,iFAAiF,iBAAiB;AAClG,yDAAyD,gBAAgB,QAAQ;AACjF,+CAA+C,gBAAgB,gBAAgB;AAC/E;AACA,kCAAkC;AAClC;AACA;AACA,UAAU,YAAY,aAAa,SAAS,UAAU;AACtD,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,6CAA6C;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,qCAAqC;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,whBAAwhB,GAAG;AAC3hB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,8BAA8B;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wIAAwI,4BAA4B;AACpK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sHAAsH;AACtH;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mIAAmI,4BAA4B;AAC/J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uHAAuH;AACvH;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,kBAAkB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,yCAAyC;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,qBAAqB;AAC/D;AACA;AACA,wFAAwF,yCAAyC;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,6BAA6B;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,mBAAmB;AAC/E,2DAA2D,mCAAmC,WAAW,IAAI;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,6BAA6B;AAC7B;AACA;AACA,kFAAkF,gCAAgC;AAClH;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa,IAAI;AACjB;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,8DAA8D,6BAA6B;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,cAAc;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,4BAA4B,gCAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kCAAkC;AAC9D;AAC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","sources":["webpack://@jalexsocial/rizzy/./node_modules/aspnet-client-validation/dist/aspnet-validation.js","webpack://@jalexsocial/rizzy/./src/js/antiforgerySnippet.js","webpack://@jalexsocial/rizzy/./src/js/rizzy-nonce.js","webpack://@jalexsocial/rizzy/./src/js/rizzy-streaming.js","webpack://@jalexsocial/rizzy/webpack/bootstrap","webpack://@jalexsocial/rizzy/webpack/runtime/compat get default export","webpack://@jalexsocial/rizzy/webpack/runtime/define property getters","webpack://@jalexsocial/rizzy/webpack/runtime/hasOwnProperty shorthand","webpack://@jalexsocial/rizzy/webpack/runtime/make namespace object","webpack://@jalexsocial/rizzy/./src/js/rizzy.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"aspnetValidation\"] = factory();\n\telse\n\t\troot[\"aspnetValidation\"] = factory();\n})(self, () => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \t// The require scope\n/******/ \tvar __webpack_require__ = {};\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__webpack_require__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__webpack_require__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = {};\n/*!**********************!*\\\n  !*** ./src/index.ts ***!\n  \\**********************/\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MvcValidationProviders: () => (/* binding */ MvcValidationProviders),\n/* harmony export */   ValidationService: () => (/* binding */ ValidationService),\n/* harmony export */   isValidatable: () => (/* binding */ isValidatable)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar nullLogger = new (/** @class */ (function () {\n    function class_1() {\n        this.warn = globalThis.console.warn;\n    }\n    class_1.prototype.log = function (_) {\n        var _args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            _args[_i - 1] = arguments[_i];\n        }\n    };\n    return class_1;\n}()))();\n/**\n * Checks if `element` is validatable (`input`, `select`, `textarea`).\n * @param element The element to check.\n * @returns `true` if validatable, otherwise `false`.\n */\nvar isValidatable = function (element) {\n    return element instanceof HTMLInputElement\n        || element instanceof HTMLSelectElement\n        || element instanceof HTMLTextAreaElement;\n};\nvar validatableElementTypes = ['input', 'select', 'textarea'];\n/**\n * Generates a selector to match validatable elements (`input`, `select`, `textarea`).\n * @param selector An optional selector to apply to the valid input types, e.g. `[data-val=\"true\"]`.\n * @returns The validatable elements.\n */\nvar validatableSelector = function (selector) {\n    return validatableElementTypes.map(function (t) { return \"\".concat(t).concat(selector || ''); }).join(',');\n};\n/**\n * Resolves and returns the element referred by original element using ASP.NET selector logic.\n * @param element - The input to validate\n * @param selector - Used to find the field. Ex. *.Password where * replaces whatever prefixes asp.net might add.\n */\nfunction getRelativeFormElement(element, selector) {\n    // example elementName: Form.PasswordConfirm, Form.Email\n    // example selector (dafuq): *.Password, *.__RequestVerificationToken\n    // example result element name: Form.Password, __RequestVerificationToken\n    var elementName = element.name;\n    var selectedName = selector.substring(2); // Password, __RequestVerificationToken\n    var objectName = '';\n    var dotLocation = elementName.lastIndexOf('.');\n    if (dotLocation > -1) {\n        // Form\n        objectName = elementName.substring(0, dotLocation);\n        // Form.Password\n        var relativeElementName = objectName + '.' + selectedName;\n        var relativeElement = document.getElementsByName(relativeElementName)[0];\n        if (isValidatable(relativeElement)) {\n            return relativeElement;\n        }\n    }\n    // __RequestVerificationToken\n    return element.form.querySelector(validatableSelector(\"[name=\".concat(selectedName, \"]\")));\n}\n/**\n * Contains default implementations for ASP.NET Core MVC validation attributes.\n */\nvar MvcValidationProviders = /** @class */ (function () {\n    function MvcValidationProviders() {\n        /**\n         * Validates whether the input has a value.\n         */\n        this.required = function (value, element, params) {\n            // Handle single and multiple checkboxes/radio buttons.\n            var elementType = element.type.toLowerCase();\n            if (elementType === \"checkbox\" || elementType === \"radio\") {\n                var allElementsOfThisName = Array.from(element.form.querySelectorAll(validatableSelector(\"[name='\".concat(element.name, \"'][type='\").concat(elementType, \"']\"))));\n                for (var _i = 0, allElementsOfThisName_1 = allElementsOfThisName; _i < allElementsOfThisName_1.length; _i++) {\n                    var element_1 = allElementsOfThisName_1[_i];\n                    if (element_1 instanceof HTMLInputElement && element_1.checked === true) {\n                        return true;\n                    }\n                }\n                // Checkboxes do not submit a value when unchecked. To work around this, platforms such as ASP.NET render a\n                // hidden input with the same name as the checkbox so that a value (\"false\") is still submitted even when\n                // the checkbox is not checked. We check this special case here.\n                if (elementType === \"checkbox\") {\n                    var checkboxHiddenInput = element.form.querySelector(\"input[name='\".concat(element.name, \"'][type='hidden']\"));\n                    if (checkboxHiddenInput instanceof HTMLInputElement && checkboxHiddenInput.value === \"false\") {\n                        return true;\n                    }\n                }\n                return false;\n            }\n            // Default behavior otherwise (trim ensures whitespace only is not seen as valid).\n            return Boolean(value === null || value === void 0 ? void 0 : value.trim());\n        };\n        /**\n         * Validates whether the input value satisfies the length contstraint.\n         */\n        this.stringLength = function (value, element, params) {\n            if (!value) {\n                return true;\n            }\n            if (params.min) {\n                var min = parseInt(params.min);\n                if (value.length < min) {\n                    return false;\n                }\n            }\n            if (params.max) {\n                var max = parseInt(params.max);\n                if (value.length > max) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        /**\n         * Validates whether the input value is equal to another input value.\n         */\n        this.compare = function (value, element, params) {\n            if (!params.other) {\n                return true;\n            }\n            var otherElement = getRelativeFormElement(element, params.other);\n            if (!otherElement) {\n                return true;\n            }\n            return (otherElement.value === value);\n        };\n        /**\n         * Validates whether the input value is a number within a given range.\n         */\n        this.range = function (value, element, params) {\n            if (!value) {\n                return true;\n            }\n            var val = parseFloat(value);\n            if (isNaN(val)) {\n                return false;\n            }\n            if (params.min) {\n                var min = parseFloat(params.min);\n                if (val < min) {\n                    return false;\n                }\n            }\n            if (params.max) {\n                var max = parseFloat(params.max);\n                if (val > max) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        /**\n         * Validates whether the input value satisfies a regular expression pattern.\n         */\n        this.regex = function (value, element, params) {\n            if (!value || !params.pattern) {\n                return true;\n            }\n            var r = new RegExp(params.pattern);\n            return r.test(value);\n        };\n        /**\n         * Validates whether the input value is an email in accordance to RFC822 specification, with a top level domain.\n         */\n        this.email = function (value, element, params) {\n            if (!value) {\n                return true;\n            }\n            // RFC822 email address with .TLD validation\n            // (c) Richard Willis, Chris Ferdinandi, MIT Licensed\n            // https://gist.github.com/badsyntax/719800\n            // https://gist.github.com/cferdinandi/d04aad4ce064b8da3edf21e26f8944c4\n            var r = /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*(\\.\\w{2,})+$/;\n            return r.test(value);\n        };\n        /**\n         * Validates whether the input value is a credit card number, with Luhn's Algorithm.\n         */\n        this.creditcard = function (value, element, params) {\n            if (!value) {\n                return true;\n            }\n            // (c) jquery-validation, MIT Licensed\n            // https://github.com/jquery-validation/jquery-validation/blob/master/src/additional/creditcard.js\n            // based on https://en.wikipedia.org/wiki/Luhn_algorithm\n            // Accept only spaces, digits and dashes\n            if (/[^0-9 \\-]+/.test(value)) {\n                return false;\n            }\n            var nCheck = 0, nDigit = 0, bEven = false, n, cDigit;\n            value = value.replace(/\\D/g, \"\");\n            // Basing min and max length on https://developer.ean.com/general_info/Valid_Credit_Card_Types\n            if (value.length < 13 || value.length > 19) {\n                return false;\n            }\n            for (n = value.length - 1; n >= 0; n--) {\n                cDigit = value.charAt(n);\n                nDigit = parseInt(cDigit, 10);\n                if (bEven) {\n                    if ((nDigit *= 2) > 9) {\n                        nDigit -= 9;\n                    }\n                }\n                nCheck += nDigit;\n                bEven = !bEven;\n            }\n            return (nCheck % 10) === 0;\n        };\n        /**\n         * Validates whether the input value is a URL.\n         */\n        this.url = function (value, element, params) {\n            if (!value) {\n                return true;\n            }\n            var lowerCaseValue = value.toLowerCase();\n            // Match the logic in `UrlAttribute`\n            return lowerCaseValue.indexOf('http://') > -1\n                || lowerCaseValue.indexOf('https://') > -1\n                || lowerCaseValue.indexOf('ftp://') > -1;\n        };\n        /**\n         * Validates whether the input value is a phone number.\n         */\n        this.phone = function (value, element, params) {\n            if (!value) {\n                return true;\n            }\n            // Allows whitespace or dash as number separator because some people like to do that...\n            var consecutiveSeparator = /[\\+\\-\\s][\\-\\s]/g;\n            if (consecutiveSeparator.test(value)) {\n                return false;\n            }\n            var r = /^\\+?[0-9\\-\\s]+$/;\n            return r.test(value);\n        };\n        /**\n         * Asynchronously validates the input value to a JSON GET API endpoint.\n         */\n        this.remote = function (value, element, params) {\n            if (!value) {\n                return true;\n            }\n            // params.additionalfields: *.Email,*.Username\n            var fieldSelectors = params.additionalfields.split(',');\n            var fields = {};\n            for (var _i = 0, fieldSelectors_1 = fieldSelectors; _i < fieldSelectors_1.length; _i++) {\n                var fieldSelector = fieldSelectors_1[_i];\n                var fieldName = fieldSelector.substr(2);\n                var fieldElement = getRelativeFormElement(element, fieldSelector);\n                var hasValue = Boolean(fieldElement && fieldElement.value);\n                if (!hasValue) {\n                    continue;\n                }\n                if (fieldElement instanceof HTMLInputElement &&\n                    (fieldElement.type === 'checkbox' || fieldElement.type === 'radio')) {\n                    fields[fieldName] = fieldElement.checked ? fieldElement.value : '';\n                }\n                else {\n                    fields[fieldName] = fieldElement.value;\n                }\n            }\n            var url = params['url'];\n            var encodedParams = [];\n            for (var fieldName in fields) {\n                var encodedParam = encodeURIComponent(fieldName) + '=' + encodeURIComponent(fields[fieldName]);\n                encodedParams.push(encodedParam);\n            }\n            var payload = encodedParams.join('&');\n            return new Promise(function (ok, reject) {\n                var request = new XMLHttpRequest();\n                if (params.type && params.type.toLowerCase() === 'post') {\n                    var postData = new FormData();\n                    for (var fieldName in fields) {\n                        postData.append(fieldName, fields[fieldName]);\n                    }\n                    request.open('post', url);\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n                    request.send(payload);\n                }\n                else {\n                    request.open('get', url + '?' + payload);\n                    request.send();\n                }\n                request.onload = function (e) {\n                    if (request.status >= 200 && request.status < 300) {\n                        var data = JSON.parse(request.responseText);\n                        ok(data);\n                    }\n                    else {\n                        reject({\n                            status: request.status,\n                            statusText: request.statusText,\n                            data: request.responseText\n                        });\n                    }\n                };\n                request.onerror = function (e) {\n                    reject({\n                        status: request.status,\n                        statusText: request.statusText,\n                        data: request.responseText\n                    });\n                };\n            });\n        };\n    }\n    return MvcValidationProviders;\n}());\n\n/**\n * Responsible for managing the DOM elements and running the validation providers.\n */\nvar ValidationService = /** @class */ (function () {\n    function ValidationService(logger) {\n        var _this = this;\n        /**\n         * A key-value collection of loaded validation plugins.\n         */\n        this.providers = {};\n        /**\n         * A key-value collection of form UIDs and their <span> elements for displaying validation messages for an input (by DOM name).\n         */\n        this.messageFor = {};\n        /**\n         * A list of managed elements, each having a randomly assigned unique identifier (UID).\n         */\n        this.elementUIDs = [];\n        /**\n         * A key-value collection of UID to Element for quick lookup.\n         */\n        this.elementByUID = {};\n        /**\n         * A key-value collection of input UIDs for a <form> UID.\n         */\n        this.formInputs = {};\n        /**\n         * A key-value map for input UID to its validator factory.\n         */\n        this.validators = {};\n        /**\n         * A key-value map for form UID to its trigger element (submit event for <form>).\n         */\n        this.formEvents = {};\n        /**\n         * A key-value map for element UID to its trigger element (input event for <textarea> and <input>, change event for <select>).\n         */\n        this.inputEvents = {};\n        /**\n         * A key-value map of input UID to its validation error message.\n         */\n        this.summary = {};\n        /**\n         * In milliseconds, the rate of fire of the input validation.\n         */\n        this.debounce = 300;\n        /**\n         * Allow hidden fields validation\n         */\n        this.allowHiddenFields = false;\n        /**\n         * Fires off validation for elements within the provided form and then calls the callback\n         * @param form The form to validate.\n         * @param callback Receives true or false indicating validity after all validation is complete.\n         * @returns Promise that resolves to true or false indicating validity after all validation is complete.\n         */\n        this.validateForm = function (form, callback) { return __awaiter(_this, void 0, void 0, function () {\n            var formUID, formValidationEvent, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(form instanceof HTMLFormElement)) {\n                            throw new Error('validateForm() can only be called on <form> elements');\n                        }\n                        formUID = this.getElementUID(form);\n                        formValidationEvent = this.formEvents[formUID];\n                        _a = !formValidationEvent;\n                        if (_a) return [3 /*break*/, 2];\n                        return [4 /*yield*/, formValidationEvent(undefined, callback)];\n                    case 1:\n                        _a = (_b.sent());\n                        _b.label = 2;\n                    case 2: return [2 /*return*/, _a];\n                }\n            });\n        }); };\n        /**\n         * Fires off validation for the provided element and then calls the callback\n         * @param field The element to validate.\n         * @param callback Receives true or false indicating validity after all validation is complete.\n         * @returns Promise that resolves to true or false indicating validity after all validation is complete\n         */\n        this.validateField = function (field, callback) { return __awaiter(_this, void 0, void 0, function () {\n            var fieldUID, fieldValidationEvent, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        fieldUID = this.getElementUID(field);\n                        fieldValidationEvent = this.inputEvents[fieldUID];\n                        _a = !fieldValidationEvent;\n                        if (_a) return [3 /*break*/, 2];\n                        return [4 /*yield*/, fieldValidationEvent(undefined, callback)];\n                    case 1:\n                        _a = (_b.sent());\n                        _b.label = 2;\n                    case 2: return [2 /*return*/, _a];\n                }\n            });\n        }); };\n        /**\n         * Called before validating form submit events.\n         * Default calls `preventDefault()` and `stopImmediatePropagation()`.\n         * @param submitEvent The `SubmitEvent`.\n         */\n        this.preValidate = function (submitEvent) {\n            submitEvent.preventDefault();\n            submitEvent.stopImmediatePropagation();\n        };\n        /**\n         * Handler for validated form submit events.\n         * Default calls `submitValidForm(form, submitEvent)` on success\n         * and `focusFirstInvalid(form)` on failure.\n         * @param form The form that has been validated.\n         * @param success The validation result.\n         * @param submitEvent The `SubmitEvent`.\n         */\n        this.handleValidated = function (form, success, submitEvent) {\n            if (!(form instanceof HTMLFormElement)) {\n                throw new Error('handleValidated() can only be called on <form> elements');\n            }\n            if (success) {\n                if (submitEvent) {\n                    _this.submitValidForm(form, submitEvent);\n                }\n            }\n            else {\n                _this.focusFirstInvalid(form);\n            }\n        };\n        /**\n         * Dispatches a new `SubmitEvent` on the provided form,\n         * then calls `form.submit()` unless `submitEvent` is cancelable\n         * and `preventDefault()` was called by a handler that received the new event.\n         *\n         * This is equivalent to `form.requestSubmit()`, but more flexible.\n         * @param form The validated form to submit\n         * @param submitEvent The `SubmitEvent`.\n         */\n        this.submitValidForm = function (form, submitEvent) {\n            if (!(form instanceof HTMLFormElement)) {\n                throw new Error('submitValidForm() can only be called on <form> elements');\n            }\n            var newEvent = new SubmitEvent('submit', submitEvent);\n            if (form.dispatchEvent(newEvent)) {\n                // Because the submitter is not propagated when calling\n                // form.submit(), we recreate it here.\n                var submitter = submitEvent.submitter;\n                var submitterInput = null;\n                var initialFormAction = form.action;\n                if (submitter) {\n                    var name_1 = submitter.getAttribute('name');\n                    // If name is null, a submit button is not submitted.\n                    if (name_1) {\n                        submitterInput = document.createElement('input');\n                        submitterInput.type = 'hidden';\n                        submitterInput.name = name_1;\n                        submitterInput.value = submitter.getAttribute('value');\n                        form.appendChild(submitterInput);\n                    }\n                    var formAction = submitter.getAttribute('formaction');\n                    if (formAction) {\n                        form.action = formAction;\n                    }\n                }\n                try {\n                    form.submit();\n                }\n                finally {\n                    if (submitterInput) {\n                        // Important to clean up the submit input we created.\n                        form.removeChild(submitterInput);\n                    }\n                    form.action = initialFormAction;\n                }\n            }\n        };\n        /**\n         * Focuses the first invalid element within the provided form\n         * @param form\n         */\n        this.focusFirstInvalid = function (form) {\n            if (!(form instanceof HTMLFormElement)) {\n                throw new Error('focusFirstInvalid() can only be called on <form> elements');\n            }\n            var formUID = _this.getElementUID(form);\n            var formInputUIDs = _this.formInputs[formUID];\n            var invalidFormInputUID = formInputUIDs === null || formInputUIDs === void 0 ? void 0 : formInputUIDs.find(function (uid) { return _this.summary[uid]; });\n            if (invalidFormInputUID) {\n                var firstInvalid = _this.elementByUID[invalidFormInputUID];\n                if (firstInvalid instanceof HTMLElement) {\n                    firstInvalid.focus();\n                }\n            }\n        };\n        /**\n         * Returns true if the provided form is currently valid.\n         * The form will be validated unless prevalidate is set to false.\n         * @param form The form to validate.\n         * @param prevalidate Whether the form should be validated before returning.\n         * @param callback A callback that receives true or false indicating validity after all validation is complete. Ignored if prevalidate is false.\n         * @returns The current state of the form. May be inaccurate if any validation is asynchronous (e.g. remote); consider using `callback` instead.\n         */\n        this.isValid = function (form, prevalidate, callback) {\n            if (prevalidate === void 0) { prevalidate = true; }\n            if (!(form instanceof HTMLFormElement)) {\n                throw new Error('isValid() can only be called on <form> elements');\n            }\n            if (prevalidate) {\n                _this.validateForm(form, callback);\n            }\n            var formUID = _this.getElementUID(form);\n            var formInputUIDs = _this.formInputs[formUID];\n            var formIsInvalid = (formInputUIDs === null || formInputUIDs === void 0 ? void 0 : formInputUIDs.some(function (uid) { return _this.summary[uid]; })) === true;\n            return !formIsInvalid;\n        };\n        /**\n         * Returns true if the provided field is currently valid.\n         * The field will be validated unless prevalidate is set to false.\n         * @param field The field to validate.\n         * @param prevalidate Whether the field should be validated before returning.\n         * @param callback A callback that receives true or false indicating validity after all validation is complete. Ignored if prevalidate is false.\n         * @returns The current state of the field. May be inaccurate if any validation is asynchronous (e.g. remote); consider using `callback` instead.\n         */\n        this.isFieldValid = function (field, prevalidate, callback) {\n            if (prevalidate === void 0) { prevalidate = true; }\n            if (prevalidate) {\n                _this.validateField(field, callback);\n            }\n            var fieldUID = _this.getElementUID(field);\n            return _this.summary[fieldUID] === undefined;\n        };\n        /**\n         * Options for this instance of @type {ValidationService}.\n         */\n        this.options = {\n            root: document.body,\n            watch: false,\n            addNoValidate: true,\n        };\n        /**\n         * Override CSS class name for input validation error. Default: 'input-validation-error'\n         */\n        this.ValidationInputCssClassName = \"input-validation-error\";\n        /**\n         * Override CSS class name for valid input validation. Default: 'input-validation-valid'\n         */\n        this.ValidationInputValidCssClassName = \"input-validation-valid\";\n        /**\n         * Override CSS class name for field validation error. Default: 'field-validation-error'\n         */\n        this.ValidationMessageCssClassName = \"field-validation-error\";\n        /**\n         * Override CSS class name for valid field validation. Default: 'field-validation-valid'\n         */\n        this.ValidationMessageValidCssClassName = \"field-validation-valid\";\n        /**\n         * Override CSS class name for validation summary error. Default: 'validation-summary-errors'\n         */\n        this.ValidationSummaryCssClassName = \"validation-summary-errors\";\n        /**\n         * Override CSS class name for valid validation summary. Default: 'validation-summary-valid'\n         */\n        this.ValidationSummaryValidCssClassName = \"validation-summary-valid\";\n        this.logger = logger || nullLogger;\n    }\n    /**\n     * Registers a new validation plugin of the given name, if not registered yet.\n     * Registered plugin validates inputs with data-val-[name] attribute, used as error message.\n     * @param name\n     * @param callback\n     */\n    ValidationService.prototype.addProvider = function (name, callback) {\n        if (this.providers[name]) {\n            // First-Come-First-Serve validation plugin design.\n            // Allows developers to override the default MVC Providers by adding custom providers BEFORE bootstrap() is called!\n            return;\n        }\n        this.logger.log(\"Registered provider: %s\", name);\n        this.providers[name] = callback;\n    };\n    /**\n     * Registers the default providers for enabling ASP.NET Core MVC client-side validation.\n     */\n    ValidationService.prototype.addMvcProviders = function () {\n        var mvc = new MvcValidationProviders();\n        // [Required]\n        this.addProvider('required', mvc.required);\n        // [StringLength], [MinLength], [MaxLength]\n        this.addProvider('length', mvc.stringLength);\n        this.addProvider('maxlength', mvc.stringLength);\n        this.addProvider('minlength', mvc.stringLength);\n        // [Compare]\n        this.addProvider('equalto', mvc.compare);\n        // [Range]\n        this.addProvider('range', mvc.range);\n        // [RegularExpression]\n        this.addProvider('regex', mvc.regex);\n        // [CreditCard]\n        this.addProvider('creditcard', mvc.creditcard);\n        // [EmailAddress]\n        this.addProvider('email', mvc.email);\n        // [Url]\n        this.addProvider('url', mvc.url);\n        // [Phone]\n        this.addProvider('phone', mvc.phone);\n        // [Remote]\n        this.addProvider('remote', mvc.remote);\n    };\n    /**\n     * Scans `root` for all validation message <span> generated by ASP.NET Core MVC, then calls `cb` for each.\n     * @param root The root node to scan\n     * @param cb The callback to invoke with each form and span\n     */\n    ValidationService.prototype.scanMessages = function (root, cb) {\n        /* If a validation span explicitly declares a form, we group the span with that form. */\n        var validationMessageElements = Array.from(root.querySelectorAll('span[form]'));\n        for (var _i = 0, validationMessageElements_1 = validationMessageElements; _i < validationMessageElements_1.length; _i++) {\n            var span = validationMessageElements_1[_i];\n            var form = document.getElementById(span.getAttribute('form'));\n            if (form instanceof HTMLFormElement) {\n                cb.call(this, form, span);\n            }\n        }\n        // Otherwise if a validation message span is inside a form, we group the span with the form it's inside.\n        var forms = Array.from(root.querySelectorAll('form'));\n        if (root instanceof HTMLFormElement) {\n            // querySelectorAll does not include the root element itself.\n            // we could use 'matches', but that's newer than querySelectorAll so we'll keep it simple and compatible.\n            forms.push(root);\n        }\n        // If root is the descendant of a form, we want to include that form too.\n        var containingForm = (root instanceof Element) ? root.closest('form') : null;\n        if (containingForm) {\n            forms.push(containingForm);\n        }\n        for (var _a = 0, forms_1 = forms; _a < forms_1.length; _a++) {\n            var form = forms_1[_a];\n            var validationMessageElements_3 = Array.from(form.querySelectorAll('[data-valmsg-for]'));\n            for (var _b = 0, validationMessageElements_2 = validationMessageElements_3; _b < validationMessageElements_2.length; _b++) {\n                var span = validationMessageElements_2[_b];\n                cb.call(this, form, span);\n            }\n        }\n    };\n    ValidationService.prototype.pushValidationMessageSpan = function (form, span) {\n        var _a, _b;\n        var _c;\n        var formId = this.getElementUID(form);\n        var formSpans = (_a = (_c = this.messageFor)[formId]) !== null && _a !== void 0 ? _a : (_c[formId] = {});\n        var messageForId = span.getAttribute('data-valmsg-for');\n        if (!messageForId)\n            return;\n        var spans = (_b = formSpans[messageForId]) !== null && _b !== void 0 ? _b : (formSpans[messageForId] = []);\n        if (spans.indexOf(span) < 0) {\n            spans.push(span);\n        }\n        else {\n            this.logger.log(\"Validation element for '%s' is already tracked\", name, span);\n        }\n    };\n    ValidationService.prototype.removeValidationMessageSpan = function (form, span) {\n        var formId = this.getElementUID(form);\n        var formSpans = this.messageFor[formId];\n        if (!formSpans)\n            return;\n        var messageForId = span.getAttribute('data-valmsg-for');\n        if (!messageForId)\n            return;\n        var spans = formSpans[messageForId];\n        if (!spans) {\n            return;\n        }\n        var index = spans.indexOf(span);\n        if (index >= 0) {\n            spans.splice(index, 1);\n        }\n        else {\n            this.logger.log(\"Validation element for '%s' was already removed\", name, span);\n        }\n    };\n    /**\n     * Given attribute map for an HTML input, returns the validation directives to be executed.\n     * @param attributes\n     */\n    ValidationService.prototype.parseDirectives = function (attributes) {\n        var directives = {};\n        var validationAtributes = {};\n        var cut = 'data-val-'.length;\n        for (var i = 0; i < attributes.length; i++) {\n            var a = attributes[i];\n            if (a.name.indexOf('data-val-') === 0) {\n                var key = a.name.substr(cut);\n                validationAtributes[key] = a.value;\n            }\n        }\n        var _loop_1 = function (key) {\n            if (key.indexOf('-') === -1) {\n                var parameters = Object.keys(validationAtributes).filter(function (Q) {\n                    return (Q !== key) && (Q.indexOf(key) === 0);\n                });\n                var directive = {\n                    error: validationAtributes[key],\n                    params: {}\n                };\n                var pcut = (key + '-').length;\n                for (var i = 0; i < parameters.length; i++) {\n                    var pvalue = validationAtributes[parameters[i]];\n                    var pkey = parameters[i].substr(pcut);\n                    directive.params[pkey] = pvalue;\n                }\n                directives[key] = directive;\n            }\n        };\n        for (var key in validationAtributes) {\n            _loop_1(key);\n        }\n        return directives;\n    };\n    /**\n     *  Returns an RFC4122 version 4 compliant GUID.\n     */\n    ValidationService.prototype.guid4 = function () {\n        // (c) broofa, MIT Licensed\n        // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript/2117523#2117523\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n    /**\n     * Gets a UID for an DOM element.\n     * @param node\n     */\n    ValidationService.prototype.getElementUID = function (node) {\n        var x = this.elementUIDs.filter(function (e) {\n            return e.node === node;\n        })[0];\n        if (x) {\n            return x.uid;\n        }\n        var uid = this.guid4();\n        this.elementUIDs.push({\n            node: node,\n            uid: uid\n        });\n        this.elementByUID[uid] = node;\n        return uid;\n    };\n    /**\n     * Returns a Promise that returns validation result for each and every inputs within the form.\n     * @param formUID\n     */\n    ValidationService.prototype.getFormValidationTask = function (formUID) {\n        var formInputUIDs = this.formInputs[formUID];\n        if (!formInputUIDs || formInputUIDs.length === 0) {\n            return Promise.resolve(true);\n        }\n        var formValidators = [];\n        for (var _i = 0, formInputUIDs_1 = formInputUIDs; _i < formInputUIDs_1.length; _i++) {\n            var inputUID = formInputUIDs_1[_i];\n            var validator = this.validators[inputUID];\n            if (validator) {\n                formValidators.push(validator);\n            }\n        }\n        var tasks = formValidators.map(function (factory) { return factory(); });\n        return Promise.all(tasks).then(function (result) { return result.every(function (e) { return e; }); });\n    };\n    // Retrieves the validation span for the input.\n    ValidationService.prototype.getMessageFor = function (input) {\n        var _a;\n        if (!input.form) {\n            return undefined;\n        }\n        var formId = this.getElementUID(input.form);\n        return (_a = this.messageFor[formId]) === null || _a === void 0 ? void 0 : _a[input.name];\n    };\n    /**\n     * Returns true if the event triggering the form submission indicates we should validate the form.\n     * @param e\n     */\n    ValidationService.prototype.shouldValidate = function (e) {\n        // Skip client-side validation if the form has been submitted via a button that has the \"formnovalidate\" attribute.\n        return !(e && e['submitter'] && e['submitter']['formNoValidate']);\n    };\n    /**\n     * Tracks a <form> element as parent of an input UID. When the form is submitted, attempts to validate the said input asynchronously.\n     * @param form\n     * @param inputUID\n     */\n    ValidationService.prototype.trackFormInput = function (form, inputUID) {\n        var _this = this;\n        var _a;\n        var _b;\n        var formUID = this.getElementUID(form);\n        var formInputUIDs = (_a = (_b = this.formInputs)[formUID]) !== null && _a !== void 0 ? _a : (_b[formUID] = []);\n        var add = formInputUIDs.indexOf(inputUID) === -1;\n        if (add) {\n            formInputUIDs.push(inputUID);\n            if (this.options.addNoValidate) {\n                this.logger.log('Setting novalidate on form', form);\n                form.setAttribute('novalidate', 'novalidate');\n            }\n            else {\n                this.logger.log('Not setting novalidate on form', form);\n            }\n        }\n        else {\n            this.logger.log(\"Form input for UID '%s' is already tracked\", inputUID);\n        }\n        if (this.formEvents[formUID]) {\n            return;\n        }\n        var validationTask = null;\n        var cb = function (e, callback) {\n            // Prevent recursion\n            if (validationTask) {\n                return validationTask;\n            }\n            if (!_this.shouldValidate(e)) {\n                return Promise.resolve(true);\n            }\n            validationTask = _this.getFormValidationTask(formUID);\n            //`preValidate` typically prevents submit before validation\n            if (e) {\n                _this.preValidate(e);\n            }\n            _this.logger.log('Validating', form);\n            return validationTask.then(function (success) { return __awaiter(_this, void 0, void 0, function () {\n                var validationEvent;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            this.logger.log('Validated (success = %s)', success, form);\n                            if (callback) {\n                                callback(success);\n                                return [2 /*return*/, success];\n                            }\n                            validationEvent = new CustomEvent('validation', {\n                                detail: { valid: success }\n                            });\n                            form.dispatchEvent(validationEvent);\n                            // Firefox fix: redispatch 'submit' after finished handling this event\n                            return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 0); })];\n                        case 1:\n                            // Firefox fix: redispatch 'submit' after finished handling this event\n                            _a.sent();\n                            this.handleValidated(form, success, e);\n                            return [2 /*return*/, success];\n                    }\n                });\n            }); }).catch(function (error) {\n                _this.logger.log('Validation error', error);\n                return false;\n            }).finally(function () {\n                validationTask = null;\n            });\n        };\n        form.addEventListener('submit', cb);\n        var cbReset = function (e) {\n            var formInputUIDs = _this.formInputs[formUID];\n            for (var _i = 0, formInputUIDs_2 = formInputUIDs; _i < formInputUIDs_2.length; _i++) {\n                var inputUID_1 = formInputUIDs_2[_i];\n                _this.resetField(inputUID_1);\n            }\n            _this.renderSummary();\n        };\n        form.addEventListener('reset', cbReset);\n        cb.remove = function () {\n            form.removeEventListener('submit', cb);\n            form.removeEventListener('reset', cbReset);\n        };\n        this.formEvents[formUID] = cb;\n    };\n    /*\n        Reset the state of a validatable input. This is used when it's enabled or disabled.\n    */\n    ValidationService.prototype.reset = function (input) {\n        if (this.isDisabled(input)) {\n            this.resetField(this.getElementUID(input));\n        }\n        else {\n            this.scan(input);\n        }\n    };\n    ValidationService.prototype.resetField = function (inputUID) {\n        var input = this.elementByUID[inputUID];\n        this.swapClasses(input, '', this.ValidationInputCssClassName);\n        this.swapClasses(input, '', this.ValidationInputValidCssClassName);\n        var spans = isValidatable(input) && this.getMessageFor(input);\n        if (spans) {\n            for (var i = 0; i < spans.length; i++) {\n                spans[i].innerHTML = '';\n                this.swapClasses(spans[i], '', this.ValidationMessageCssClassName);\n                this.swapClasses(spans[i], '', this.ValidationMessageValidCssClassName);\n            }\n        }\n        delete this.summary[inputUID];\n    };\n    ValidationService.prototype.untrackFormInput = function (form, inputUID) {\n        var _a;\n        var formUID = this.getElementUID(form);\n        var formInputUIDs = this.formInputs[formUID];\n        if (!formInputUIDs) {\n            return;\n        }\n        var indexToRemove = formInputUIDs.indexOf(inputUID);\n        if (indexToRemove >= 0) {\n            formInputUIDs.splice(indexToRemove, 1);\n            if (!formInputUIDs.length) {\n                (_a = this.formEvents[formUID]) === null || _a === void 0 ? void 0 : _a.remove();\n                delete this.formEvents[formUID];\n                delete this.formInputs[formUID];\n                delete this.messageFor[formUID];\n            }\n        }\n        else {\n            this.logger.log(\"Form input for UID '%s' was already removed\", inputUID);\n        }\n    };\n    /**\n     * Adds an input element to be managed and validated by the service.\n     * Triggers a debounced live validation when input value changes.\n     * @param input\n     */\n    ValidationService.prototype.addInput = function (input) {\n        var _this = this;\n        var _a;\n        var uid = this.getElementUID(input);\n        var directives = this.parseDirectives(input.attributes);\n        this.validators[uid] = this.createValidator(input, directives);\n        if (input.form) {\n            this.trackFormInput(input.form, uid);\n        }\n        if (this.inputEvents[uid]) {\n            return;\n        }\n        var cb = function (event, callback) { return __awaiter(_this, void 0, void 0, function () {\n            var validate, success, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        validate = this.validators[uid];\n                        if (!validate)\n                            return [2 /*return*/, true];\n                        if (!input.dataset.valEvent &&\n                            event && event.type === 'input' &&\n                            !input.classList.contains(this.ValidationInputCssClassName)) {\n                            // When no data-val-event specified on a field, \"input\" event only takes it back to valid. \"Change\" event can make it invalid.\n                            return [2 /*return*/, true];\n                        }\n                        this.logger.log('Validating', { event: event });\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, validate()];\n                    case 2:\n                        success = _a.sent();\n                        callback(success);\n                        return [2 /*return*/, success];\n                    case 3:\n                        error_1 = _a.sent();\n                        this.logger.log('Validation error', error_1);\n                        return [2 /*return*/, false];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        }); };\n        var debounceTimeoutID = null;\n        cb.debounced = function (event, callback) {\n            if (debounceTimeoutID !== null) {\n                clearTimeout(debounceTimeoutID);\n            }\n            debounceTimeoutID = setTimeout(function () {\n                cb(event, callback);\n            }, _this.debounce);\n        };\n        var defaultEvent = input instanceof HTMLSelectElement ? 'change' : 'input change';\n        var validateEvent = (_a = input.dataset.valEvent) !== null && _a !== void 0 ? _a : defaultEvent;\n        var events = validateEvent.split(' ');\n        events.forEach(function (eventName) {\n            input.addEventListener(eventName, cb.debounced);\n        });\n        cb.remove = function () {\n            events.forEach(function (eventName) {\n                input.removeEventListener(eventName, cb.debounced);\n            });\n        };\n        this.inputEvents[uid] = cb;\n    };\n    ValidationService.prototype.removeInput = function (input) {\n        var uid = this.getElementUID(input);\n        // Clean up event listener\n        var cb = this.inputEvents[uid];\n        if (cb === null || cb === void 0 ? void 0 : cb.remove) {\n            cb.remove();\n            delete cb.remove;\n        }\n        delete this.summary[uid];\n        delete this.inputEvents[uid];\n        delete this.validators[uid];\n        if (input.form) {\n            this.untrackFormInput(input.form, uid);\n        }\n    };\n    /**\n     * Scans `root` for input elements to be validated, then calls `cb` for each.\n     * @param root The root node to scan\n     * @param cb The callback to invoke with each input\n     */\n    ValidationService.prototype.scanInputs = function (root, cb) {\n        var inputs = Array.from(root.querySelectorAll(validatableSelector('[data-val=\"true\"]')));\n        // querySelectorAll does not include the root element itself.\n        // we could use 'matches', but that's newer than querySelectorAll so we'll keep it simple and compatible.\n        if (isValidatable(root) && root.getAttribute(\"data-val\") === \"true\") {\n            inputs.push(root);\n        }\n        for (var i = 0; i < inputs.length; i++) {\n            var input = inputs[i];\n            cb.call(this, input);\n        }\n    };\n    /**\n     * Returns a <ul> element as a validation errors summary.\n     */\n    ValidationService.prototype.createSummaryDOM = function () {\n        if (!Object.keys(this.summary).length) {\n            return null;\n        }\n        var renderedMessages = [];\n        var ul = document.createElement('ul');\n        for (var key in this.summary) {\n            // It could be that the message we are rendering belongs to one of a fieldset of multiple inputs that's not selected,\n            // even if another one in the fieldset is. In that case the fieldset is valid, and we shouldn't render the message.\n            var matchingElement = this.elementByUID[key];\n            if (matchingElement instanceof HTMLInputElement) {\n                if (matchingElement.type === \"checkbox\" || matchingElement.type === \"radio\") {\n                    if (matchingElement.className === this.ValidationInputValidCssClassName) {\n                        continue;\n                    }\n                }\n            }\n            // With required multiple inputs, such as a checkbox list, we'll have one message per input.\n            // It's one from the inputs that's required, not all, so we should only have one message displayed.\n            if (renderedMessages.indexOf(this.summary[key]) > -1) {\n                continue;\n            }\n            var li = document.createElement('li');\n            li.innerHTML = this.summary[key];\n            ul.appendChild(li);\n            renderedMessages.push(this.summary[key]);\n        }\n        return ul;\n    };\n    /**\n     * Displays validation summary to ASP.NET Core MVC designated elements, when it actually gets updated.\n     */\n    ValidationService.prototype.renderSummary = function () {\n        var summaryElements = document.querySelectorAll('[data-valmsg-summary=\"true\"]');\n        if (!summaryElements.length) {\n            return;\n        }\n        // Prevents wasteful re-rendering of summary list element with identical items!\n        // Using JSON.stringify for quick and painless deep compare of simple KVP. You need to sort the keys first, tho...\n        var shadow = JSON.stringify(this.summary, Object.keys(this.summary).sort());\n        if (shadow === this.renderedSummaryJSON) {\n            return;\n        }\n        // Prevents wasteful re-rendering of summary list element with identical items!\n        this.renderedSummaryJSON = shadow;\n        var ul = this.createSummaryDOM();\n        for (var i = 0; i < summaryElements.length; i++) {\n            var e = summaryElements[i];\n            // Remove existing list elements, but keep the summary's message.\n            var listElements = e.querySelectorAll(\"ul\");\n            for (var j = 0; j < listElements.length; j++) {\n                listElements[j].remove();\n            }\n            // Style the summary element as valid/invalid depending on whether there are any messages to display.\n            if (ul && ul.hasChildNodes()) {\n                this.swapClasses(e, this.ValidationSummaryCssClassName, this.ValidationSummaryValidCssClassName);\n                e.appendChild(ul.cloneNode(true));\n            }\n            else {\n                this.swapClasses(e, this.ValidationSummaryValidCssClassName, this.ValidationSummaryCssClassName);\n            }\n        }\n    };\n    /**\n     * Adds an error message to an input element, which also updates the validation message elements and validation summary elements.\n     * @param input\n     * @param message\n     */\n    ValidationService.prototype.addError = function (input, message) {\n        var spans = this.getMessageFor(input);\n        if (spans) {\n            for (var i = 0; i < spans.length; i++) {\n                var span = spans[i];\n                spans[i].innerHTML = message;\n                this.swapClasses(spans[i], this.ValidationMessageCssClassName, this.ValidationMessageValidCssClassName);\n            }\n        }\n        this.highlight(input, this.ValidationInputCssClassName, this.ValidationInputValidCssClassName);\n        if (input.form) {\n            // Adding an error to one input should also add it to others with the same name (i.e. for radio button and checkbox lists).\n            var inputs = input.form.querySelectorAll(validatableSelector(\"[name=\\\"\".concat(input.name, \"\\\"]\")));\n            for (var i = 0; i < inputs.length; i++) {\n                this.swapClasses(inputs[i], this.ValidationInputCssClassName, this.ValidationInputValidCssClassName);\n                var uid = this.getElementUID(inputs[i]);\n                this.summary[uid] = message;\n            }\n        }\n        this.renderSummary();\n    };\n    /**\n     * Removes an error message from an input element, which also updates the validation message elements and validation summary elements.\n     * @param input\n     */\n    ValidationService.prototype.removeError = function (input) {\n        var spans = this.getMessageFor(input);\n        if (spans) {\n            for (var i = 0; i < spans.length; i++) {\n                spans[i].innerHTML = '';\n                this.swapClasses(spans[i], this.ValidationMessageValidCssClassName, this.ValidationMessageCssClassName);\n            }\n        }\n        this.unhighlight(input, this.ValidationInputCssClassName, this.ValidationInputValidCssClassName);\n        // Removing an error from one input should also remove it from others with the same name (i.e. for radio button and checkbox lists).\n        if (input.form) {\n            var inputs = input.form.querySelectorAll(validatableSelector(\"[name=\\\"\".concat(input.name, \"\\\"]\")));\n            for (var i = 0; i < inputs.length; i++) {\n                this.swapClasses(inputs[i], this.ValidationInputValidCssClassName, this.ValidationInputCssClassName);\n                var uid = this.getElementUID(inputs[i]);\n                delete this.summary[uid];\n            }\n        }\n        this.renderSummary();\n    };\n    /**\n     * Returns a validation Promise factory for an input element, using given validation directives.\n     * @param input\n     * @param directives\n     */\n    ValidationService.prototype.createValidator = function (input, directives) {\n        var _this = this;\n        return function () { return __awaiter(_this, void 0, void 0, function () {\n            var _a, _b, _c, _i, key, directive, provider, result, valid, error, resolution;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        if (!(!this.isHidden(input) && !this.isDisabled(input))) return [3 /*break*/, 7];\n                        _a = directives;\n                        _b = [];\n                        for (_c in _a)\n                            _b.push(_c);\n                        _i = 0;\n                        _d.label = 1;\n                    case 1:\n                        if (!(_i < _b.length)) return [3 /*break*/, 7];\n                        _c = _b[_i];\n                        if (!(_c in _a)) return [3 /*break*/, 6];\n                        key = _c;\n                        directive = directives[key];\n                        provider = this.providers[key];\n                        if (!provider) {\n                            this.logger.log('aspnet-validation provider not implemented: %s', key);\n                            return [3 /*break*/, 6];\n                        }\n                        this.logger.log(\"Running %s validator on element\", key, input);\n                        result = provider(input.value, input, directive.params);\n                        valid = false;\n                        error = directive.error;\n                        if (!(typeof result === 'boolean')) return [3 /*break*/, 2];\n                        valid = result;\n                        return [3 /*break*/, 5];\n                    case 2:\n                        if (!(typeof result === 'string')) return [3 /*break*/, 3];\n                        valid = false;\n                        error = result;\n                        return [3 /*break*/, 5];\n                    case 3: return [4 /*yield*/, result];\n                    case 4:\n                        resolution = _d.sent();\n                        if (typeof resolution === 'boolean') {\n                            valid = resolution;\n                        }\n                        else {\n                            valid = false;\n                            error = resolution;\n                        }\n                        _d.label = 5;\n                    case 5:\n                        if (!valid) {\n                            this.addError(input, error);\n                            return [2 /*return*/, false];\n                        }\n                        _d.label = 6;\n                    case 6:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 7:\n                        this.removeError(input);\n                        return [2 /*return*/, true];\n                }\n            });\n        }); };\n    };\n    /**\n     * Checks if the provided input is hidden from the browser\n     * @param input\n     * @returns\n     */\n    ValidationService.prototype.isHidden = function (input) {\n        return !(this.allowHiddenFields || input.offsetWidth || input.offsetHeight || input.getClientRects().length);\n    };\n    /**\n     * Checks if the provided input is disabled\n     * @param input\n     * @returns\n     */\n    ValidationService.prototype.isDisabled = function (input) {\n        // If the input is validatable, we check the `disabled` property.\n        // Otherwise the `disabled` property is undefined and this returns false.\n        return input.disabled;\n    };\n    /**\n     * Adds addClass and removes removeClass\n     * @param element Element to modify\n     * @param addClass Class to add\n     * @param removeClass Class to remove\n     */\n    ValidationService.prototype.swapClasses = function (element, addClass, removeClass) {\n        if (addClass && !this.isDisabled(element) && !element.classList.contains(addClass)) {\n            element.classList.add(addClass);\n        }\n        if (element.classList.contains(removeClass)) {\n            element.classList.remove(removeClass);\n        }\n    };\n    /**\n     * Load default validation providers and scans the entire document when ready.\n     * @param options.watch If set to true, a MutationObserver will be used to continuously watch for new elements that provide validation directives.\n     * @param options.addNoValidate If set to true (the default), a novalidate attribute will be added to the containing form in validate elements.\n     */\n    ValidationService.prototype.bootstrap = function (options) {\n        var _this = this;\n        Object.assign(this.options, options);\n        this.addMvcProviders();\n        var document = window.document;\n        var root = this.options.root;\n        var init = function () {\n            _this.scan(root);\n            // Watch for further mutations after initial scan\n            if (_this.options.watch) {\n                _this.watch(root);\n            }\n        };\n        // If the document is done loading, scan it now.\n        if (document.readyState === 'complete' || document.readyState === 'interactive') {\n            init();\n        }\n        else {\n            // Otherwise wait until the document is done loading.\n            document.addEventListener('DOMContentLoaded', init);\n        }\n    };\n    /**\n     * Scans the root element for any validation directives and attaches behavior to them.\n     * @param root The root node to scan; if not provided, `options.root` (default: `document.body`) will be scanned\n     */\n    ValidationService.prototype.scan = function (root) {\n        root !== null && root !== void 0 ? root : (root = this.options.root);\n        this.logger.log('Scanning', root);\n        this.scanMessages(root, this.pushValidationMessageSpan);\n        this.scanInputs(root, this.addInput);\n    };\n    /**\n     * Scans the root element for any validation directives and removes behavior from them.\n     * @param root The root node to scan; if not provided, `options.root` (default: `document.body`) will be scanned\n     */\n    ValidationService.prototype.remove = function (root) {\n        root !== null && root !== void 0 ? root : (root = this.options.root);\n        this.logger.log('Removing', root);\n        this.scanMessages(root, this.removeValidationMessageSpan);\n        this.scanInputs(root, this.removeInput);\n    };\n    /**\n     * Watches the provided root element for mutations, and scans for new validation directives to attach behavior.\n     * @param root The root node to watch; if not provided, `options.root` (default: `document.body`) will be watched\n     */\n    ValidationService.prototype.watch = function (root) {\n        var _this = this;\n        root !== null && root !== void 0 ? root : (root = this.options.root);\n        this.observer = new MutationObserver(function (mutations) {\n            mutations.forEach(function (mutation) {\n                _this.observed(mutation);\n            });\n        });\n        this.observer.observe(root, {\n            attributes: true,\n            childList: true,\n            subtree: true\n        });\n        this.logger.log(\"Watching for mutations\");\n    };\n    ValidationService.prototype.observed = function (mutation) {\n        var _a, _b, _c;\n        if (mutation.type === 'childList') {\n            for (var i = 0; i < mutation.addedNodes.length; i++) {\n                var node = mutation.addedNodes[i];\n                this.logger.log('Added node', node);\n                if (node instanceof HTMLElement) {\n                    this.scan(node);\n                }\n            }\n            for (var i = 0; i < mutation.removedNodes.length; i++) {\n                var node = mutation.removedNodes[i];\n                this.logger.log('Removed node', node);\n                if (node instanceof HTMLElement) {\n                    this.remove(node);\n                }\n            }\n        }\n        else if (mutation.type === 'attributes') {\n            if (mutation.target instanceof HTMLElement) {\n                var attributeName = mutation.attributeName;\n                // Special case for disabled.\n                if (attributeName === 'disabled') {\n                    var target = mutation.target;\n                    this.reset(target);\n                }\n                else {\n                    var oldValue = (_a = mutation.oldValue) !== null && _a !== void 0 ? _a : '';\n                    var newValue = (_c = (_b = mutation.target.attributes[mutation.attributeName]) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : '';\n                    this.logger.log(\"Attribute '%s' changed from '%s' to '%s'\", mutation.attributeName, oldValue, newValue, mutation.target);\n                    if (oldValue !== newValue) {\n                        this.scan(mutation.target);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Highlights invalid element by adding errorClass CSS class and removing validClass CSS class\n     * @param input Element to modify\n     * @param errorClass Class to add\n     * @param validClass Class to remove\n     */\n    ValidationService.prototype.highlight = function (input, errorClass, validClass) {\n        this.swapClasses(input, errorClass, validClass);\n    };\n    /**\n     * Unhighlight valid element by removing errorClass CSS class and adding validClass CSS class\n     * @param input Element to modify\n     * @param errorClass Class to remove\n     * @param validClass Class to add\n     */\n    ValidationService.prototype.unhighlight = function (input, errorClass, validClass) {\n        this.swapClasses(input, validClass, errorClass);\n    };\n    return ValidationService;\n}());\n\n\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});","if (!document.body.attributes.__htmx_antiforgery) {\r\n    document.addEventListener(\"htmx:configRequest\", evt => {\r\n        // Safely destructure detail properties with optional chaining\r\n        const { verb, parameters, headers } = evt.detail;\r\n        if (verb?.toUpperCase() === 'GET') return;\r\n\r\n        const antiforgery = htmx.config?.antiforgery;\r\n        if (!antiforgery) return;\r\n\r\n        const { headerName, requestToken, formFieldName } = antiforgery;\r\n\r\n        // Ensure at least one configuration field is provided\r\n        if (!headerName && !formFieldName) {\r\n            console.warn(\"Antiforgery configuration is missing both headerName and formFieldName. Token not added.\");\r\n            return;\r\n        }\r\n\r\n        // If formFieldName exists and token is already set, avoid overriding it\r\n        if (formFieldName && parameters[formFieldName]) return;\r\n\r\n        // Apply the token either to headers or parameters based on configuration\r\n        if (headerName) {\r\n            headers[headerName] = requestToken;\r\n        } else {\r\n            parameters[formFieldName] = requestToken;\r\n        }\r\n    });\r\n    document.addEventListener(\"htmx:afterOnLoad\", evt => {\r\n        if (evt.detail.boosted) {\r\n            const responseText = evt.detail.xhr.responseText;\r\n            const selector = 'meta[name=htmx-config]';\r\n\r\n            // Find the index of the opening and closing tag for the meta element.\r\n            const startIndex = responseText.indexOf(`<meta name=\"htmx-config\"`);\r\n            const endIndex = responseText.indexOf(\">\", startIndex) + 1; // Include the closing >\r\n            const closingTagIndex = responseText.indexOf(\"</meta>\", endIndex);  //handle self closing tags\r\n\r\n            if (startIndex > -1) {\r\n                let metaTagString = \"\";\r\n                if(closingTagIndex > -1){\r\n                    const closingSlashIndex = responseText.indexOf(\"/\", startIndex);\r\n                    if (closingSlashIndex > -1 && closingSlashIndex < endIndex) {\r\n                        // Handle Self closing tag e.g. <meta ... />\r\n                        metaTagString = responseText.substring(startIndex, endIndex);\r\n                    } else {\r\n                        metaTagString = responseText.substring(startIndex, responseText.indexOf(\"</meta>\") + 7);\r\n                    }\r\n                } else {\r\n                    metaTagString = responseText.substring(startIndex, endIndex);\r\n                }\r\n\r\n                // Extract the content attribute.\r\n                const contentAttributeRegex = /content=\"([^\"]*)\"/;\r\n                const contentMatch = metaTagString.match(contentAttributeRegex);\r\n\r\n                if (contentMatch && contentMatch[1]) {\r\n                    const contentValue = contentMatch[1];\r\n\r\n                    const current = document.querySelector(selector);\r\n\r\n                    // only change the anti-forgery token\r\n                    const key = 'antiforgery';\r\n                    try {\r\n                        htmx.config[key] = JSON.parse(contentValue)[key];\r\n                    } catch (e) {\r\n                        console.error(\"Error parsing htmx-config JSON:\", e);\r\n                        return; // Exit if parsing fails\r\n                    }\r\n\r\n\r\n                    // Create the new meta element and set its attributes.\r\n                    const newMeta = document.createElement('meta');\r\n                    newMeta.setAttribute('name', 'htmx-config');\r\n                    newMeta.setAttribute('content', contentValue);\r\n\r\n                    // update DOM\r\n                    current.replaceWith(newMeta);\r\n\r\n                }\r\n            }\r\n        }\r\n    });\r\n    document.body.attributes.__htmx_antiforgery = true;\r\n}","//import htmx from 'htmx.org';\r\n\r\n(function() {\r\n    \r\n    htmx.defineExtension('rizzy-nonce',\r\n        {\r\n            transformResponse: function(text, xhr, elt) {\r\n\r\n                let documentNonce = htmx.config.documentNonce ?? htmx.config.inlineScriptNonce;\r\n\r\n                if (!documentNonce) {\r\n                    console.warn(\"rizzy-nonce extension loaded but no no nonce found for document. Inline scripts may be blocked.\");\r\n                    documentNonce = \"\";\r\n                }\r\n\r\n                // disable ajax fetching on history miss because it doesn't handle nonce replacment\r\n                htmx.config.refreshOnHistoryMiss = true; \r\n\r\n                // CSP nonce determination based on safe-nonce by Michael West\r\n                let nonce = xhr?.getResponseHeader('HX-Nonce');\r\n                if (!nonce) {\r\n                    const csp = xhr?.getResponseHeader('content-security-policy');\r\n                    if (csp) {\r\n                        const cspMatch = csp.match(/(style|script)-src[^;]*'nonce-([^']*)'/i);\r\n                        if (cspMatch) {\r\n                            nonce = cspMatch[2];\r\n                        }\r\n                    }\r\n                }\r\n                if (xhr && window.location.hostname) {\r\n                    const responseURL = new URL(xhr.responseURL);\r\n                    if (responseURL.hostname !== window.location.hostname) {\r\n                        nonce = ''; // ignore nonce header if request is not some domain \r\n                    }\r\n                }\r\n\r\n                nonce ??= '';\r\n\r\n                return this.processUnsafeHtml(text, documentNonce, nonce);\r\n            },\r\n            processUnsafeHtml: function(text, documentNonce, newScriptNonce) {\r\n                //const noncePattern = new RegExp(`(['\"])${newScriptNonce}\\\\1`, 'gi');\r\n\r\n                // Replace any occurrences of the nonce provided by the server with\r\n                // the existing document nonce. Note that at minimum the server text originates\r\n                // from is same-origin and the newScriptNonce that is replaced is determined\r\n                // from response headers which are only available when processing the xmlHttpRequest\r\n                if (documentNonce && newScriptNonce)\r\n                    text = text.replaceAll(newScriptNonce, documentNonce);\r\n\r\n                const parser = new DOMParser();\r\n\r\n                try {\r\n                    // At this point any remaining elements that don't have the correct\r\n                    // nonce will cause console errors to be emitted. We are going to strip\r\n                    // out those elements and any attempts to block rizzy-nonce in the included markup.\r\n                    let doc = parser.parseFromString(text, \"text/html\");\r\n\r\n                    if (doc) {\r\n                        // Remove any attempts to disable rizzy-nonce extension\r\n                        Array.from(doc.querySelectorAll('[hx-ext*=\"ignore:rizzy-nonce\"], [data-hx-ext*=\"ignore:rizzy-nonce\"]'))\r\n                            .forEach((elt) => {\r\n                                elt.remove();\r\n                            });\r\n\r\n                        // Select all <script> and <style> tags\r\n                        const elements = doc.querySelectorAll(\"script, style, link\");\r\n\r\n                        // Iterate through each element\r\n                        elements.forEach(elt => {\r\n                            const nonce = elt.getAttribute(\"nonce\");\r\n                            if (nonce !== documentNonce) {\r\n                                // Remove the element if the nonce doesn't match (or is missing)\r\n                                elt.remove();\r\n                            }\r\n                        });\r\n\r\n                        // Serialize the document back into an HTML string and return it\r\n                        return doc.documentElement.outerHTML;\r\n                    }\r\n\r\n                } catch (_) { }\r\n                {\r\n\r\n                }\r\n\r\n                return '';\r\n\r\n            }\r\n        });\r\n\r\n})()","/*\r\n * Blazor Stream Rendering HTMX Extension\r\n * Author: Michael Tanczos\r\n * Credits to SSE extension and Microsoft aspnetcore\r\n * at https://github.com/dotnet/aspnetcore/blob/main/src/Components/Web.JS/src/Rendering/StreamingRendering.ts\r\n */\r\n//import htmx from 'htmx.org';\r\n\r\n(function () {\r\n\r\n    var api;\r\n    var enableDomPreservation = true;\r\n    var componentLoaded = false;\r\n\r\n    class blazorStreamingUpdate extends HTMLElement {\r\n        connectedCallback() {\r\n            const blazorSsrElement = this.parentNode;\r\n\r\n            // Synchronously remove this from the DOM to minimize our chance of affecting anything else\r\n            blazorSsrElement.parentNode?.removeChild(blazorSsrElement);\r\n\r\n            // When this element receives content, if it's <template blazor-component-id=\"...\">...</template>,\r\n            // insert the template content into the DOM\r\n            blazorSsrElement.childNodes.forEach(node => {\r\n                if (node instanceof HTMLTemplateElement) {\r\n                    const componentId = node.getAttribute(\"blazor-component-id\");\r\n                    if (componentId) {\r\n                        insertStreamingContentIntoDocument(componentId, node.content);\r\n                    }\r\n                }\r\n            });\r\n\r\n            htmx?.process(document.body);\r\n        }\r\n    }\r\n\r\n    htmx.defineExtension(\"rizzy-streaming\",\r\n        {\r\n            /**\r\n             * Init saves the provided reference to the internal HTMX API.\r\n             *\r\n             * @param {import(\"../htmx\").HtmxInternalApi} api\r\n             * @returns void\r\n             */\r\n            init: function (apiRef) {\r\n                // store a reference to the internal API.\r\n                api = apiRef;\r\n\r\n                // set a function in the public API for creating new EventSource objects\r\n                if (htmx.blazorSwapSsr == undefined) {\r\n                    if (customElements.get('blazor-ssr-end') === undefined) {\r\n                        customElements.define('blazor-ssr-end', blazorStreamingUpdate);\r\n                    }\r\n                    htmx.blazorSwapSsr = blazorSwapSsr;\r\n                }\r\n            },\r\n            onEvent: function (name, evt) {\r\n                if (name === \"htmx:afterOnLoad\") {\r\n                    htmx?.process(document.body);\r\n                }\r\n                else if (name === \"htmx:beforeRequest\") {\r\n                    var element = evt.detail.elt;\r\n                    if (evt.detail.requestConfig.target) {\r\n                        evt.detail.requestConfig.target.addEventListener(\"htmx:beforeSwap\",\r\n                            e => {\r\n                                // Any html that was already streamed in could have been updated with\r\n                                // blazor ssr content so the final xhr response can be thrown away\r\n                                //e.detail.shouldSwap = false;\r\n                            }, { once: true });\r\n                    }\r\n\r\n                    var last = 0;\r\n                    var swapSpec = api.getSwapSpecification(element);\r\n                    var xhr = evt.detail.xhr;\r\n\r\n                    // Create a container id for a temporary div container. All streamed html will be placed \r\n                    // inside the container so that htmx swap methods work correctly\r\n                    var cid = 'ctr' + crypto.randomUUID();\r\n\r\n                    xhr.addEventListener(\"readystatechange\", () => {\r\n\r\n                        // If finished we can unwrap the container all html was stored into\r\n                        if (xhr.readyState === 4) {\r\n                            var container = document.getElementById(cid);\r\n\r\n                            if (container != null)\r\n                                unwrap(container);\r\n                        }\r\n                    });\r\n\r\n                    xhr.addEventListener(\"progress\", e => {\r\n\r\n                        var container = document.getElementById(cid);\r\n\r\n                        // If the container doesn't exist we need to create it and swap it into the element\r\n                        // target space. From here on we can stream responses into the container directly.\r\n                        if (container == null) {\r\n                            container = document.createElement('div');\r\n                            container.id = cid;\r\n\r\n                            // Swap in a container div to hold the streaming html\r\n                            swap(element, container.outerHTML, swapSpec, xhr);\r\n\r\n                            // The very first swap into the container can be a replacement swap\r\n                            swapSpec.swapStyle = \"innerHTML\";\r\n\r\n                            // Ensure there is always a container even if not added to the dom\r\n                            container = document.getElementById(cid) ?? container;\r\n                        }\r\n\r\n                        // Compute any new html in this chunk\r\n                        let diff = e.currentTarget.response.substring(last);\r\n                        swap(container, diff, swapSpec, xhr);\r\n\r\n                        swapSpec.settleDelay = 0;\r\n                        swapSpec.swapStyle = \"beforeend\";\r\n                        last = e.loaded;\r\n                    });\r\n\r\n                }\r\n\r\n                return true;\r\n            }\r\n        });\r\n\r\n    function isCommentNodeInHead(commentNode) {\r\n        // Ensure that the provided node is indeed a comment node\r\n        if (commentNode && commentNode.nodeType === Node.COMMENT_NODE) {\r\n            let currentNode = commentNode.parentNode;\r\n            // Traverse up the DOM tree\r\n            while (currentNode !== null) {\r\n                if (currentNode === document.head) {\r\n                    // The comment node is within the <head>\r\n                    return true;\r\n                }\r\n                currentNode = currentNode.parentNode;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n        // The traversal reached the root without finding <head>, or <head> does not exist\r\n        return false;\r\n    }\r\n\r\n    function blazorSwapSsr(start, end, docFrag, xhr) {\r\n        var newDiv = wrap(start, end, 'ssr' + crypto.randomUUID());\r\n\r\n        var container = document.createElement('div');\r\n        container.appendChild(docFrag);\r\n\r\n        swap(newDiv, container.innerHTML, xhr);\r\n\r\n        unwrap(newDiv);\r\n    }\r\n\r\n    function wrap(start, end, id) {\r\n\r\n        var newDiv = document.createElement('div');\r\n        newDiv.id = id;\r\n\r\n        // Iterate through nodes between start and end\r\n        var currentNode = start.nextSibling;\r\n        while (currentNode && currentNode !== end) {\r\n            newDiv.appendChild(currentNode);\r\n            currentNode = start.nextSibling;\r\n        }\r\n\r\n        start.parentNode.insertBefore(newDiv, end);\r\n\r\n        return newDiv;\r\n    }\r\n\r\n    function unwrap(element) {\r\n        // Ensure that the element has a parent\r\n        if (element.parentNode) {\r\n            // Move all child nodes out of the element\r\n            while (element.firstChild) {\r\n                element.parentNode.insertBefore(element.firstChild, element);\r\n            }\r\n\r\n            // Remove the empty element\r\n            element.parentNode.removeChild(element);\r\n        }\r\n    }\r\n\r\n    function handleOutOfBandSwaps(elt, fragment, settleInfo) {\r\n        var oobSelects = api.getClosestAttributeValue(elt, \"hx-select-oob\");\r\n        if (oobSelects) {\r\n            var oobSelectValues = oobSelects.split(\",\");\r\n            for (var i = 0; i < oobSelectValues.length; i++) {\r\n                var oobSelectValue = oobSelectValues[i].split(\":\", 2);\r\n                var id = oobSelectValue[0].trim();\r\n                if (id.indexOf(\"#\") === 0) {\r\n                    id = id.substring(1);\r\n                }\r\n                var oobValue = oobSelectValue[1] || \"true\";\r\n                var oobElement = fragment.querySelector(\"#\" + id);\r\n                if (oobElement) {\r\n                    api.oobSwap(oobValue, oobElement, settleInfo);\r\n                }\r\n            }\r\n        }\r\n        forEach(findAll(fragment, '[hx-swap-oob], [data-hx-swap-oob]'), function (oobElement) {\r\n            var oobValue = getAttributeValue(oobElement, \"hx-swap-oob\");\r\n            if (oobValue != null) {\r\n                api.oobSwap(oobValue, oobElement, settleInfo);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} elt\r\n     * @param {string} content\r\n     */\r\n    function swap(elt, content, swapSpec, xhr) {\r\n\r\n        api.withExtensions(elt, function (extension) {\r\n            content = extension.transformResponse(content, xhr, elt);\r\n        });\r\n\r\n        swapSpec ??= api.getSwapSpecification(elt);\r\n        var target = api.getTarget(elt);\r\n        var settleInfo = api.makeSettleInfo(elt);\r\n\r\n        // htmx 2.0\r\n        api.swap(target, content, swapSpec);\r\n\r\n        //api.selectAndSwap(swapSpec.swapStyle, target, elt, content, settleInfo);\r\n\r\n        settleInfo.elts.forEach(function (elt) {\r\n            if (elt.classList) {\r\n                elt.classList.add(htmx.config.settlingClass);\r\n            }\r\n            api.triggerEvent(elt, 'htmx:beforeSettle');\r\n        });\r\n\r\n        // Handle settle tasks (with delay if requested)\r\n        if (swapSpec.settleDelay > 0) {\r\n            setTimeout(doSettle(settleInfo), swapSpec.settleDelay);\r\n        } else {\r\n            doSettle(settleInfo)();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * doSettle mirrors much of the functionality in htmx that\r\n     * settles elements after their content has been swapped.\r\n     * TODO: this should be published by htmx, and not duplicated here\r\n     * @param {import(\"../htmx\").HtmxSettleInfo} settleInfo\r\n     * @returns () => void\r\n     */\r\n    function doSettle(settleInfo) {\r\n\r\n        return function () {\r\n            settleInfo.tasks.forEach(function (task) {\r\n                task.call();\r\n            });\r\n\r\n            settleInfo.elts.forEach(function (elt) {\r\n                if (elt.classList) {\r\n                    elt.classList.remove(htmx.config.settlingClass);\r\n                }\r\n                api.triggerEvent(elt, 'htmx:afterSettle');\r\n            });\r\n        }\r\n    }\r\n\r\n    function insertStreamingContentIntoDocument(componentIdAsString, docFrag) {\r\n        const markers = findStreamingMarkers(componentIdAsString)\r\n        if (markers) {\r\n            const { startMarker, endMarker } = markers\r\n            enableDomPreservation = !isCommentNodeInHead(startMarker);\r\n            if (enableDomPreservation) {\r\n                blazorSwapSsr(startMarker, endMarker, docFrag);\r\n            } else {\r\n                // In this mode we completely delete the old content before inserting the new content\r\n                const destinationRoot = endMarker.parentNode\r\n                const existingContent = new Range()\r\n                existingContent.setStart(startMarker, startMarker.textContent.length)\r\n                existingContent.setEnd(endMarker, 0)\r\n                existingContent.deleteContents()\r\n\r\n                while (docFrag.childNodes[0]) {\r\n                    destinationRoot.insertBefore(docFrag.childNodes[0], endMarker)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function findStreamingMarkers(componentIdAsString) {\r\n        // Find start marker\r\n        const expectedStartText = `bl:${componentIdAsString}`\r\n        const iterator = document.createNodeIterator(\r\n            document,\r\n            NodeFilter.SHOW_COMMENT\r\n        )\r\n        let startMarker = null\r\n        while ((startMarker = iterator.nextNode())) {\r\n            if (startMarker.textContent === expectedStartText) {\r\n                break\r\n            }\r\n        }\r\n\r\n        if (!startMarker) {\r\n            return null\r\n        }\r\n\r\n        // Find end marker\r\n        const expectedEndText = `/bl:${componentIdAsString}`\r\n        let endMarker = null\r\n        while ((endMarker = iterator.nextNode())) {\r\n            if (endMarker.textContent === expectedEndText) {\r\n                break\r\n            }\r\n        }\r\n\r\n        return endMarker ? { startMarker, endMarker } : null\r\n    }\r\n})();","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import \"./rizzy-nonce\"\r\nimport \"./rizzy-streaming\"\r\nimport { ValidationService } from \"aspnet-client-validation\";\r\nimport \"./antiforgerySnippet\";\r\n\r\n// Set up ASP.NET validation\r\nlet validation = new ValidationService();\r\nvalidation.bootstrap({ watch: true });\r\n\r\nconst Rizzy = {\r\n    validation\r\n};\r\n\r\nwindow.Rizzy = { ...(window.Rizzy || {}), ...Rizzy };\r\n\r\nexport default Rizzy;"],"names":["document","body","attributes","__htmx_antiforgery","addEventListener","evt","_htmx$config","_evt$detail","detail","verb","parameters","headers","toUpperCase","antiforgery","htmx","config","headerName","requestToken","formFieldName","console","warn","boosted","responseText","xhr","selector","startIndex","indexOf","endIndex","closingTagIndex","metaTagString","closingSlashIndex","substring","contentAttributeRegex","contentMatch","match","contentValue","current","querySelector","key","JSON","parse","e","error","newMeta","createElement","setAttribute","replaceWith","defineExtension","transformResponse","text","elt","_htmx$config$document","documentNonce","inlineScriptNonce","refreshOnHistoryMiss","nonce","getResponseHeader","csp","cspMatch","window","location","hostname","responseURL","URL","processUnsafeHtml","newScriptNonce","replaceAll","parser","DOMParser","doc","parseFromString","Array","from","querySelectorAll","forEach","remove","elements","getAttribute","documentElement","outerHTML","_","api","enableDomPreservation","componentLoaded","blazorStreamingUpdate","_HTMLElement","_classCallCheck","_callSuper","arguments","_inherits","_createClass","value","connectedCallback","_blazorSsrElement$par","_htmx","blazorSsrElement","parentNode","removeChild","childNodes","node","HTMLTemplateElement","componentId","insertStreamingContentIntoDocument","content","process","_wrapNativeSuper","HTMLElement","init","apiRef","blazorSwapSsr","undefined","customElements","get","define","onEvent","name","_htmx2","element","requestConfig","target","once","last","swapSpec","getSwapSpecification","cid","crypto","randomUUID","readyState","container","getElementById","unwrap","_document$getElementB","id","swap","swapStyle","diff","currentTarget","response","settleDelay","loaded","isCommentNodeInHead","commentNode","nodeType","Node","COMMENT_NODE","currentNode","head","start","end","docFrag","newDiv","wrap","appendChild","innerHTML","nextSibling","insertBefore","firstChild","handleOutOfBandSwaps","fragment","settleInfo","oobSelects","getClosestAttributeValue","oobSelectValues","split","i","length","oobSelectValue","trim","oobValue","oobElement","oobSwap","findAll","getAttributeValue","withExtensions","extension","getTarget","makeSettleInfo","elts","classList","add","settlingClass","triggerEvent","setTimeout","doSettle","tasks","task","call","componentIdAsString","markers","findStreamingMarkers","startMarker","endMarker","destinationRoot","existingContent","Range","setStart","textContent","setEnd","deleteContents","expectedStartText","concat","iterator","createNodeIterator","NodeFilter","SHOW_COMMENT","nextNode","expectedEndText","ValidationService","validation","bootstrap","watch","Rizzy","_objectSpread"],"sourceRoot":""}