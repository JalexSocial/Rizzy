{"version":3,"file":"rizzy.es.js","sources":["../../src/js/rizzy-nonce.js","../../src/js/rizzy-streaming.js","../../node_modules/aspnet-client-validation/dist/aspnet-validation.js","../../src/js/antiforgerySnippet.js","../../src/js/rizzy.js"],"sourcesContent":["//import htmx from 'htmx.org';\r\n\r\n(function() {\r\n    \r\n    htmx.defineExtension('rizzy-nonce',\r\n        {\r\n            transformResponse: function(text, xhr, elt) {\r\n\r\n                let documentNonce = htmx.config.documentNonce ?? htmx.config.inlineScriptNonce;\r\n\r\n                if (!documentNonce) {\r\n                    console.warn(\"rizzy-nonce extension loaded but no no nonce found for document. Inline scripts may be blocked.\");\r\n                    documentNonce = \"\";\r\n                }\r\n\r\n                // disable ajax fetching on history miss because it doesn't handle nonce replacment\r\n                htmx.config.refreshOnHistoryMiss = true; \r\n\r\n                // CSP nonce determination based on safe-nonce by Michael West\r\n                let nonce = xhr?.getResponseHeader('HX-Nonce');\r\n                if (!nonce) {\r\n                    const csp = xhr?.getResponseHeader('content-security-policy');\r\n                    if (csp) {\r\n                        const cspMatch = csp.match(/(style|script)-src[^;]*'nonce-([^']*)'/i);\r\n                        if (cspMatch) {\r\n                            nonce = cspMatch[2];\r\n                        }\r\n                    }\r\n                }\r\n                if (xhr && window.location.hostname) {\r\n                    const responseURL = new URL(xhr.responseURL);\r\n                    if (responseURL.hostname !== window.location.hostname) {\r\n                        nonce = ''; // ignore nonce header if request is not some domain \r\n                    }\r\n                }\r\n\r\n                nonce ??= '';\r\n\r\n                return this.processUnsafeHtml(text, documentNonce, nonce);\r\n            },\r\n            processUnsafeHtml: function(text, documentNonce, newScriptNonce) {\r\n                //const noncePattern = new RegExp(`(['\"])${newScriptNonce}\\\\1`, 'gi');\r\n\r\n                // Replace any occurrences of the nonce provided by the server with\r\n                // the existing document nonce. Note that at minimum the server text originates\r\n                // from is same-origin and the newScriptNonce that is replaced is determined\r\n                // from response headers which are only available when processing the xmlHttpRequest\r\n                if (documentNonce && newScriptNonce)\r\n                    text = text.replaceAll(newScriptNonce, documentNonce);\r\n\r\n                const parser = new DOMParser();\r\n\r\n                try {\r\n                    // At this point any remaining elements that don't have the correct\r\n                    // nonce will cause console errors to be emitted. We are going to strip\r\n                    // out those elements and any attempts to block rizzy-nonce in the included markup.\r\n                    let doc = parser.parseFromString(text, \"text/html\");\r\n\r\n                    if (doc) {\r\n                        // Remove any attempts to disable rizzy-nonce extension\r\n                        Array.from(doc.querySelectorAll('[hx-ext*=\"ignore:rizzy-nonce\"], [data-hx-ext*=\"ignore:rizzy-nonce\"]'))\r\n                            .forEach((elt) => {\r\n                                elt.remove();\r\n                            });\r\n\r\n                        // Select all <script> and <style> tags\r\n                        const elements = doc.querySelectorAll(\"script, style, link\");\r\n\r\n                        // Iterate through each element\r\n                        elements.forEach(elt => {\r\n                            const nonce = elt.getAttribute(\"nonce\");\r\n                            if (nonce !== documentNonce) {\r\n                                // Remove the element if the nonce doesn't match (or is missing)\r\n                                elt.remove();\r\n                            }\r\n                        });\r\n\r\n                        // Serialize the document back into an HTML string and return it\r\n                        return doc.documentElement.outerHTML;\r\n                    }\r\n\r\n                } catch (_) { }\r\n                {\r\n\r\n                }\r\n\r\n                return '';\r\n\r\n            }\r\n        });\r\n\r\n})()","/*\r\n * Blazor Stream Rendering HTMX Extension\r\n * Author: Michael Tanczos\r\n * Credits to SSE extension and Microsoft aspnetcore\r\n * at https://github.com/dotnet/aspnetcore/blob/main/src/Components/Web.JS/src/Rendering/StreamingRendering.ts\r\n */\r\n//import htmx from 'htmx.org';\r\n\r\n(function () {\r\n\r\n    var api;\r\n    var enableDomPreservation = true;\r\n    var componentLoaded = false;\r\n\r\n    class blazorStreamingUpdate extends HTMLElement {\r\n        connectedCallback() {\r\n            const blazorSsrElement = this.parentNode;\r\n\r\n            // Synchronously remove this from the DOM to minimize our chance of affecting anything else\r\n            blazorSsrElement.parentNode?.removeChild(blazorSsrElement);\r\n\r\n            // When this element receives content, if it's <template blazor-component-id=\"...\">...</template>,\r\n            // insert the template content into the DOM\r\n            blazorSsrElement.childNodes.forEach(node => {\r\n                if (node instanceof HTMLTemplateElement) {\r\n                    const componentId = node.getAttribute(\"blazor-component-id\");\r\n                    if (componentId) {\r\n                        insertStreamingContentIntoDocument(componentId, node.content);\r\n                    }\r\n                }\r\n            });\r\n\r\n            htmx?.process(document.body);\r\n        }\r\n    }\r\n\r\n    htmx.defineExtension(\"rizzy-streaming\",\r\n        {\r\n            /**\r\n             * Init saves the provided reference to the internal HTMX API.\r\n             *\r\n             * @param {import(\"../htmx\").HtmxInternalApi} api\r\n             * @returns void\r\n             */\r\n            init: function (apiRef) {\r\n                // store a reference to the internal API.\r\n                api = apiRef;\r\n\r\n                // set a function in the public API for creating new EventSource objects\r\n                if (htmx.blazorSwapSsr == undefined) {\r\n                    if (customElements.get('blazor-ssr-end') === undefined) {\r\n                        customElements.define('blazor-ssr-end', blazorStreamingUpdate);\r\n                    }\r\n                    htmx.blazorSwapSsr = blazorSwapSsr;\r\n                }\r\n            },\r\n            onEvent: function (name, evt) {\r\n                if (name === \"htmx:afterOnLoad\") {\r\n                    htmx?.process(document.body);\r\n                }\r\n                else if (name === \"htmx:beforeRequest\") {\r\n                    var element = evt.detail.elt;\r\n                    if (evt.detail.requestConfig.target) {\r\n                        evt.detail.requestConfig.target.addEventListener(\"htmx:beforeSwap\",\r\n                            e => {\r\n                                // Any html that was already streamed in could have been updated with\r\n                                // blazor ssr content so the final xhr response can be thrown away\r\n                                //e.detail.shouldSwap = false;\r\n                            }, { once: true });\r\n                    }\r\n\r\n                    var last = 0;\r\n                    var swapSpec = api.getSwapSpecification(element);\r\n                    var xhr = evt.detail.xhr;\r\n\r\n                    // Create a container id for a temporary div container. All streamed html will be placed \r\n                    // inside the container so that htmx swap methods work correctly\r\n                    var cid = 'ctr' + crypto.randomUUID();\r\n\r\n                    xhr.addEventListener(\"readystatechange\", () => {\r\n\r\n                        // If finished we can unwrap the container all html was stored into\r\n                        if (xhr.readyState === 4) {\r\n                            var container = document.getElementById(cid);\r\n\r\n                            if (container != null)\r\n                                unwrap(container);\r\n                        }\r\n                    });\r\n\r\n                    xhr.addEventListener(\"progress\", e => {\r\n\r\n                        var container = document.getElementById(cid);\r\n\r\n                        // If the container doesn't exist we need to create it and swap it into the element\r\n                        // target space. From here on we can stream responses into the container directly.\r\n                        if (container == null) {\r\n                            container = document.createElement('div');\r\n                            container.id = cid;\r\n\r\n                            // Swap in a container div to hold the streaming html\r\n                            swap(element, container.outerHTML, swapSpec, xhr);\r\n\r\n                            // The very first swap into the container can be a replacement swap\r\n                            swapSpec.swapStyle = \"innerHTML\";\r\n\r\n                            // Ensure there is always a container even if not added to the dom\r\n                            container = document.getElementById(cid) ?? container;\r\n                        }\r\n\r\n                        // Compute any new html in this chunk\r\n                        let diff = e.currentTarget.response.substring(last);\r\n                        swap(container, diff, swapSpec, xhr);\r\n\r\n                        swapSpec.settleDelay = 0;\r\n                        swapSpec.swapStyle = \"beforeend\";\r\n                        last = e.loaded;\r\n                    });\r\n\r\n                }\r\n\r\n                return true;\r\n            }\r\n        });\r\n\r\n    function isCommentNodeInHead(commentNode) {\r\n        // Ensure that the provided node is indeed a comment node\r\n        if (commentNode && commentNode.nodeType === Node.COMMENT_NODE) {\r\n            let currentNode = commentNode.parentNode;\r\n            // Traverse up the DOM tree\r\n            while (currentNode !== null) {\r\n                if (currentNode === document.head) {\r\n                    // The comment node is within the <head>\r\n                    return true;\r\n                }\r\n                currentNode = currentNode.parentNode;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n        // The traversal reached the root without finding <head>, or <head> does not exist\r\n        return false;\r\n    }\r\n\r\n    function blazorSwapSsr(start, end, docFrag, xhr) {\r\n        var newDiv = wrap(start, end, 'ssr' + crypto.randomUUID());\r\n\r\n        var container = document.createElement('div');\r\n        container.appendChild(docFrag);\r\n\r\n        swap(newDiv, container.innerHTML, xhr);\r\n\r\n        unwrap(newDiv);\r\n    }\r\n\r\n    function wrap(start, end, id) {\r\n\r\n        var newDiv = document.createElement('div');\r\n        newDiv.id = id;\r\n\r\n        // Iterate through nodes between start and end\r\n        var currentNode = start.nextSibling;\r\n        while (currentNode && currentNode !== end) {\r\n            newDiv.appendChild(currentNode);\r\n            currentNode = start.nextSibling;\r\n        }\r\n\r\n        start.parentNode.insertBefore(newDiv, end);\r\n\r\n        return newDiv;\r\n    }\r\n\r\n    function unwrap(element) {\r\n        // Ensure that the element has a parent\r\n        if (element.parentNode) {\r\n            // Move all child nodes out of the element\r\n            while (element.firstChild) {\r\n                element.parentNode.insertBefore(element.firstChild, element);\r\n            }\r\n\r\n            // Remove the empty element\r\n            element.parentNode.removeChild(element);\r\n        }\r\n    }\r\n\r\n    function handleOutOfBandSwaps(elt, fragment, settleInfo) {\r\n        var oobSelects = api.getClosestAttributeValue(elt, \"hx-select-oob\");\r\n        if (oobSelects) {\r\n            var oobSelectValues = oobSelects.split(\",\");\r\n            for (var i = 0; i < oobSelectValues.length; i++) {\r\n                var oobSelectValue = oobSelectValues[i].split(\":\", 2);\r\n                var id = oobSelectValue[0].trim();\r\n                if (id.indexOf(\"#\") === 0) {\r\n                    id = id.substring(1);\r\n                }\r\n                var oobValue = oobSelectValue[1] || \"true\";\r\n                var oobElement = fragment.querySelector(\"#\" + id);\r\n                if (oobElement) {\r\n                    api.oobSwap(oobValue, oobElement, settleInfo);\r\n                }\r\n            }\r\n        }\r\n        forEach(findAll(fragment, '[hx-swap-oob], [data-hx-swap-oob]'), function (oobElement) {\r\n            var oobValue = getAttributeValue(oobElement, \"hx-swap-oob\");\r\n            if (oobValue != null) {\r\n                api.oobSwap(oobValue, oobElement, settleInfo);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} elt\r\n     * @param {string} content\r\n     */\r\n    function swap(elt, content, swapSpec, xhr) {\r\n\r\n        api.withExtensions(elt, function (extension) {\r\n            content = extension.transformResponse(content, xhr, elt);\r\n        });\r\n\r\n        swapSpec ??= api.getSwapSpecification(elt);\r\n        var target = api.getTarget(elt);\r\n        var settleInfo = api.makeSettleInfo(elt);\r\n\r\n        // htmx 2.0\r\n        api.swap(target, content, swapSpec);\r\n\r\n        //api.selectAndSwap(swapSpec.swapStyle, target, elt, content, settleInfo);\r\n\r\n        settleInfo.elts.forEach(function (elt) {\r\n            if (elt.classList) {\r\n                elt.classList.add(htmx.config.settlingClass);\r\n            }\r\n            api.triggerEvent(elt, 'htmx:beforeSettle');\r\n        });\r\n\r\n        // Handle settle tasks (with delay if requested)\r\n        if (swapSpec.settleDelay > 0) {\r\n            setTimeout(doSettle(settleInfo), swapSpec.settleDelay);\r\n        } else {\r\n            doSettle(settleInfo)();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * doSettle mirrors much of the functionality in htmx that\r\n     * settles elements after their content has been swapped.\r\n     * TODO: this should be published by htmx, and not duplicated here\r\n     * @param {import(\"../htmx\").HtmxSettleInfo} settleInfo\r\n     * @returns () => void\r\n     */\r\n    function doSettle(settleInfo) {\r\n\r\n        return function () {\r\n            settleInfo.tasks.forEach(function (task) {\r\n                task.call();\r\n            });\r\n\r\n            settleInfo.elts.forEach(function (elt) {\r\n                if (elt.classList) {\r\n                    elt.classList.remove(htmx.config.settlingClass);\r\n                }\r\n                api.triggerEvent(elt, 'htmx:afterSettle');\r\n            });\r\n        }\r\n    }\r\n\r\n    function insertStreamingContentIntoDocument(componentIdAsString, docFrag) {\r\n        const markers = findStreamingMarkers(componentIdAsString)\r\n        if (markers) {\r\n            const { startMarker, endMarker } = markers\r\n            enableDomPreservation = !isCommentNodeInHead(startMarker);\r\n            if (enableDomPreservation) {\r\n                blazorSwapSsr(startMarker, endMarker, docFrag);\r\n            } else {\r\n                // In this mode we completely delete the old content before inserting the new content\r\n                const destinationRoot = endMarker.parentNode\r\n                const existingContent = new Range()\r\n                existingContent.setStart(startMarker, startMarker.textContent.length)\r\n                existingContent.setEnd(endMarker, 0)\r\n                existingContent.deleteContents()\r\n\r\n                while (docFrag.childNodes[0]) {\r\n                    destinationRoot.insertBefore(docFrag.childNodes[0], endMarker)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function findStreamingMarkers(componentIdAsString) {\r\n        // Find start marker\r\n        const expectedStartText = `bl:${componentIdAsString}`\r\n        const iterator = document.createNodeIterator(\r\n            document,\r\n            NodeFilter.SHOW_COMMENT\r\n        )\r\n        let startMarker = null\r\n        while ((startMarker = iterator.nextNode())) {\r\n            if (startMarker.textContent === expectedStartText) {\r\n                break\r\n            }\r\n        }\r\n\r\n        if (!startMarker) {\r\n            return null\r\n        }\r\n\r\n        // Find end marker\r\n        const expectedEndText = `/bl:${componentIdAsString}`\r\n        let endMarker = null\r\n        while ((endMarker = iterator.nextNode())) {\r\n            if (endMarker.textContent === expectedEndText) {\r\n                break\r\n            }\r\n        }\r\n\r\n        return endMarker ? { startMarker, endMarker } : null\r\n    }\r\n})();","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"aspnetValidation\"] = factory();\n\telse\n\t\troot[\"aspnetValidation\"] = factory();\n})(self, () => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \t// The require scope\n/******/ \tvar __webpack_require__ = {};\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__webpack_require__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__webpack_require__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = {};\n/*!**********************!*\\\n  !*** ./src/index.ts ***!\n  \\**********************/\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MvcValidationProviders: () => (/* binding */ MvcValidationProviders),\n/* harmony export */   ValidationService: () => (/* binding */ ValidationService),\n/* harmony export */   isValidatable: () => (/* binding */ isValidatable)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar nullLogger = new (/** @class */ (function () {\n    function class_1() {\n        this.warn = globalThis.console.warn;\n    }\n    class_1.prototype.log = function (_) {\n        var _args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            _args[_i - 1] = arguments[_i];\n        }\n    };\n    return class_1;\n}()))();\n/**\n * Checks if `element` is validatable (`input`, `select`, `textarea`).\n * @param element The element to check.\n * @returns `true` if validatable, otherwise `false`.\n */\nvar isValidatable = function (element) {\n    return element instanceof HTMLInputElement\n        || element instanceof HTMLSelectElement\n        || element instanceof HTMLTextAreaElement;\n};\nvar validatableElementTypes = ['input', 'select', 'textarea'];\n/**\n * Generates a selector to match validatable elements (`input`, `select`, `textarea`).\n * @param selector An optional selector to apply to the valid input types, e.g. `[data-val=\"true\"]`.\n * @returns The validatable elements.\n */\nvar validatableSelector = function (selector) {\n    return validatableElementTypes.map(function (t) { return \"\".concat(t).concat(selector || ''); }).join(',');\n};\n/**\n * Resolves and returns the element referred by original element using ASP.NET selector logic.\n * @param element - The input to validate\n * @param selector - Used to find the field. Ex. *.Password where * replaces whatever prefixes asp.net might add.\n */\nfunction getRelativeFormElement(element, selector) {\n    // example elementName: Form.PasswordConfirm, Form.Email\n    // example selector (dafuq): *.Password, *.__RequestVerificationToken\n    // example result element name: Form.Password, __RequestVerificationToken\n    var elementName = element.name;\n    var selectedName = selector.substring(2); // Password, __RequestVerificationToken\n    var objectName = '';\n    var dotLocation = elementName.lastIndexOf('.');\n    if (dotLocation > -1) {\n        // Form\n        objectName = elementName.substring(0, dotLocation);\n        // Form.Password\n        var relativeElementName = objectName + '.' + selectedName;\n        var relativeElement = document.getElementsByName(relativeElementName)[0];\n        if (isValidatable(relativeElement)) {\n            return relativeElement;\n        }\n    }\n    // __RequestVerificationToken\n    return element.form.querySelector(validatableSelector(\"[name=\".concat(selectedName, \"]\")));\n}\n/**\n * Contains default implementations for ASP.NET Core MVC validation attributes.\n */\nvar MvcValidationProviders = /** @class */ (function () {\n    function MvcValidationProviders() {\n        /**\n         * Validates whether the input has a value.\n         */\n        this.required = function (value, element, params) {\n            // Handle single and multiple checkboxes/radio buttons.\n            var elementType = element.type.toLowerCase();\n            if (elementType === \"checkbox\" || elementType === \"radio\") {\n                var allElementsOfThisName = Array.from(element.form.querySelectorAll(validatableSelector(\"[name='\".concat(element.name, \"'][type='\").concat(elementType, \"']\"))));\n                for (var _i = 0, allElementsOfThisName_1 = allElementsOfThisName; _i < allElementsOfThisName_1.length; _i++) {\n                    var element_1 = allElementsOfThisName_1[_i];\n                    if (element_1 instanceof HTMLInputElement && element_1.checked === true) {\n                        return true;\n                    }\n                }\n                // Checkboxes do not submit a value when unchecked. To work around this, platforms such as ASP.NET render a\n                // hidden input with the same name as the checkbox so that a value (\"false\") is still submitted even when\n                // the checkbox is not checked. We check this special case here.\n                if (elementType === \"checkbox\") {\n                    var checkboxHiddenInput = element.form.querySelector(\"input[name='\".concat(element.name, \"'][type='hidden']\"));\n                    if (checkboxHiddenInput instanceof HTMLInputElement && checkboxHiddenInput.value === \"false\") {\n                        return true;\n                    }\n                }\n                return false;\n            }\n            // Default behavior otherwise (trim ensures whitespace only is not seen as valid).\n            return Boolean(value === null || value === void 0 ? void 0 : value.trim());\n        };\n        /**\n         * Validates whether the input value satisfies the length contstraint.\n         */\n        this.stringLength = function (value, element, params) {\n            if (!value) {\n                return true;\n            }\n            if (params.min) {\n                var min = parseInt(params.min);\n                if (value.length < min) {\n                    return false;\n                }\n            }\n            if (params.max) {\n                var max = parseInt(params.max);\n                if (value.length > max) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        /**\n         * Validates whether the input value is equal to another input value.\n         */\n        this.compare = function (value, element, params) {\n            if (!params.other) {\n                return true;\n            }\n            var otherElement = getRelativeFormElement(element, params.other);\n            if (!otherElement) {\n                return true;\n            }\n            return (otherElement.value === value);\n        };\n        /**\n         * Validates whether the input value is a number within a given range.\n         */\n        this.range = function (value, element, params) {\n            if (!value) {\n                return true;\n            }\n            var val = parseFloat(value);\n            if (isNaN(val)) {\n                return false;\n            }\n            if (params.min) {\n                var min = parseFloat(params.min);\n                if (val < min) {\n                    return false;\n                }\n            }\n            if (params.max) {\n                var max = parseFloat(params.max);\n                if (val > max) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        /**\n         * Validates whether the input value satisfies a regular expression pattern.\n         */\n        this.regex = function (value, element, params) {\n            if (!value || !params.pattern) {\n                return true;\n            }\n            var r = new RegExp(params.pattern);\n            return r.test(value);\n        };\n        /**\n         * Validates whether the input value is an email in accordance to RFC822 specification, with a top level domain.\n         */\n        this.email = function (value, element, params) {\n            if (!value) {\n                return true;\n            }\n            // RFC822 email address with .TLD validation\n            // (c) Richard Willis, Chris Ferdinandi, MIT Licensed\n            // https://gist.github.com/badsyntax/719800\n            // https://gist.github.com/cferdinandi/d04aad4ce064b8da3edf21e26f8944c4\n            var r = /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*(\\.\\w{2,})+$/;\n            return r.test(value);\n        };\n        /**\n         * Validates whether the input value is a credit card number, with Luhn's Algorithm.\n         */\n        this.creditcard = function (value, element, params) {\n            if (!value) {\n                return true;\n            }\n            // (c) jquery-validation, MIT Licensed\n            // https://github.com/jquery-validation/jquery-validation/blob/master/src/additional/creditcard.js\n            // based on https://en.wikipedia.org/wiki/Luhn_algorithm\n            // Accept only spaces, digits and dashes\n            if (/[^0-9 \\-]+/.test(value)) {\n                return false;\n            }\n            var nCheck = 0, nDigit = 0, bEven = false, n, cDigit;\n            value = value.replace(/\\D/g, \"\");\n            // Basing min and max length on https://developer.ean.com/general_info/Valid_Credit_Card_Types\n            if (value.length < 13 || value.length > 19) {\n                return false;\n            }\n            for (n = value.length - 1; n >= 0; n--) {\n                cDigit = value.charAt(n);\n                nDigit = parseInt(cDigit, 10);\n                if (bEven) {\n                    if ((nDigit *= 2) > 9) {\n                        nDigit -= 9;\n                    }\n                }\n                nCheck += nDigit;\n                bEven = !bEven;\n            }\n            return (nCheck % 10) === 0;\n        };\n        /**\n         * Validates whether the input value is a URL.\n         */\n        this.url = function (value, element, params) {\n            if (!value) {\n                return true;\n            }\n            var lowerCaseValue = value.toLowerCase();\n            // Match the logic in `UrlAttribute`\n            return lowerCaseValue.indexOf('http://') > -1\n                || lowerCaseValue.indexOf('https://') > -1\n                || lowerCaseValue.indexOf('ftp://') > -1;\n        };\n        /**\n         * Validates whether the input value is a phone number.\n         */\n        this.phone = function (value, element, params) {\n            if (!value) {\n                return true;\n            }\n            // Allows whitespace or dash as number separator because some people like to do that...\n            var consecutiveSeparator = /[\\+\\-\\s][\\-\\s]/g;\n            if (consecutiveSeparator.test(value)) {\n                return false;\n            }\n            var r = /^\\+?[0-9\\-\\s]+$/;\n            return r.test(value);\n        };\n        /**\n         * Asynchronously validates the input value to a JSON GET API endpoint.\n         */\n        this.remote = function (value, element, params) {\n            if (!value) {\n                return true;\n            }\n            // params.additionalfields: *.Email,*.Username\n            var fieldSelectors = params.additionalfields.split(',');\n            var fields = {};\n            for (var _i = 0, fieldSelectors_1 = fieldSelectors; _i < fieldSelectors_1.length; _i++) {\n                var fieldSelector = fieldSelectors_1[_i];\n                var fieldName = fieldSelector.substr(2);\n                var fieldElement = getRelativeFormElement(element, fieldSelector);\n                var hasValue = Boolean(fieldElement && fieldElement.value);\n                if (!hasValue) {\n                    continue;\n                }\n                if (fieldElement instanceof HTMLInputElement &&\n                    (fieldElement.type === 'checkbox' || fieldElement.type === 'radio')) {\n                    fields[fieldName] = fieldElement.checked ? fieldElement.value : '';\n                }\n                else {\n                    fields[fieldName] = fieldElement.value;\n                }\n            }\n            var url = params['url'];\n            var encodedParams = [];\n            for (var fieldName in fields) {\n                var encodedParam = encodeURIComponent(fieldName) + '=' + encodeURIComponent(fields[fieldName]);\n                encodedParams.push(encodedParam);\n            }\n            var payload = encodedParams.join('&');\n            return new Promise(function (ok, reject) {\n                var request = new XMLHttpRequest();\n                if (params.type && params.type.toLowerCase() === 'post') {\n                    var postData = new FormData();\n                    for (var fieldName in fields) {\n                        postData.append(fieldName, fields[fieldName]);\n                    }\n                    request.open('post', url);\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n                    request.send(payload);\n                }\n                else {\n                    request.open('get', url + '?' + payload);\n                    request.send();\n                }\n                request.onload = function (e) {\n                    if (request.status >= 200 && request.status < 300) {\n                        var data = JSON.parse(request.responseText);\n                        ok(data);\n                    }\n                    else {\n                        reject({\n                            status: request.status,\n                            statusText: request.statusText,\n                            data: request.responseText\n                        });\n                    }\n                };\n                request.onerror = function (e) {\n                    reject({\n                        status: request.status,\n                        statusText: request.statusText,\n                        data: request.responseText\n                    });\n                };\n            });\n        };\n    }\n    return MvcValidationProviders;\n}());\n\n/**\n * Responsible for managing the DOM elements and running the validation providers.\n */\nvar ValidationService = /** @class */ (function () {\n    function ValidationService(logger) {\n        var _this = this;\n        /**\n         * A key-value collection of loaded validation plugins.\n         */\n        this.providers = {};\n        /**\n         * A key-value collection of form UIDs and their <span> elements for displaying validation messages for an input (by DOM name).\n         */\n        this.messageFor = {};\n        /**\n         * A list of managed elements, each having a randomly assigned unique identifier (UID).\n         */\n        this.elementUIDs = [];\n        /**\n         * A key-value collection of UID to Element for quick lookup.\n         */\n        this.elementByUID = {};\n        /**\n         * A key-value collection of input UIDs for a <form> UID.\n         */\n        this.formInputs = {};\n        /**\n         * A key-value map for input UID to its validator factory.\n         */\n        this.validators = {};\n        /**\n         * A key-value map for form UID to its trigger element (submit event for <form>).\n         */\n        this.formEvents = {};\n        /**\n         * A key-value map for element UID to its trigger element (input event for <textarea> and <input>, change event for <select>).\n         */\n        this.inputEvents = {};\n        /**\n         * A key-value map of input UID to its validation error message.\n         */\n        this.summary = {};\n        /**\n         * In milliseconds, the rate of fire of the input validation.\n         */\n        this.debounce = 300;\n        /**\n         * Allow hidden fields validation\n         */\n        this.allowHiddenFields = false;\n        /**\n         * Fires off validation for elements within the provided form and then calls the callback\n         * @param form The form to validate.\n         * @param callback Receives true or false indicating validity after all validation is complete.\n         * @returns Promise that resolves to true or false indicating validity after all validation is complete.\n         */\n        this.validateForm = function (form, callback) { return __awaiter(_this, void 0, void 0, function () {\n            var formUID, formValidationEvent, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(form instanceof HTMLFormElement)) {\n                            throw new Error('validateForm() can only be called on <form> elements');\n                        }\n                        formUID = this.getElementUID(form);\n                        formValidationEvent = this.formEvents[formUID];\n                        _a = !formValidationEvent;\n                        if (_a) return [3 /*break*/, 2];\n                        return [4 /*yield*/, formValidationEvent(undefined, callback)];\n                    case 1:\n                        _a = (_b.sent());\n                        _b.label = 2;\n                    case 2: return [2 /*return*/, _a];\n                }\n            });\n        }); };\n        /**\n         * Fires off validation for the provided element and then calls the callback\n         * @param field The element to validate.\n         * @param callback Receives true or false indicating validity after all validation is complete.\n         * @returns Promise that resolves to true or false indicating validity after all validation is complete\n         */\n        this.validateField = function (field, callback) { return __awaiter(_this, void 0, void 0, function () {\n            var fieldUID, fieldValidationEvent, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        fieldUID = this.getElementUID(field);\n                        fieldValidationEvent = this.inputEvents[fieldUID];\n                        _a = !fieldValidationEvent;\n                        if (_a) return [3 /*break*/, 2];\n                        return [4 /*yield*/, fieldValidationEvent(undefined, callback)];\n                    case 1:\n                        _a = (_b.sent());\n                        _b.label = 2;\n                    case 2: return [2 /*return*/, _a];\n                }\n            });\n        }); };\n        /**\n         * Called before validating form submit events.\n         * Default calls `preventDefault()` and `stopImmediatePropagation()`.\n         * @param submitEvent The `SubmitEvent`.\n         */\n        this.preValidate = function (submitEvent) {\n            submitEvent.preventDefault();\n            submitEvent.stopImmediatePropagation();\n        };\n        /**\n         * Handler for validated form submit events.\n         * Default calls `submitValidForm(form, submitEvent)` on success\n         * and `focusFirstInvalid(form)` on failure.\n         * @param form The form that has been validated.\n         * @param success The validation result.\n         * @param submitEvent The `SubmitEvent`.\n         */\n        this.handleValidated = function (form, success, submitEvent) {\n            if (!(form instanceof HTMLFormElement)) {\n                throw new Error('handleValidated() can only be called on <form> elements');\n            }\n            if (success) {\n                if (submitEvent) {\n                    _this.submitValidForm(form, submitEvent);\n                }\n            }\n            else {\n                _this.focusFirstInvalid(form);\n            }\n        };\n        /**\n         * Dispatches a new `SubmitEvent` on the provided form,\n         * then calls `form.submit()` unless `submitEvent` is cancelable\n         * and `preventDefault()` was called by a handler that received the new event.\n         *\n         * This is equivalent to `form.requestSubmit()`, but more flexible.\n         * @param form The validated form to submit\n         * @param submitEvent The `SubmitEvent`.\n         */\n        this.submitValidForm = function (form, submitEvent) {\n            if (!(form instanceof HTMLFormElement)) {\n                throw new Error('submitValidForm() can only be called on <form> elements');\n            }\n            var newEvent = new SubmitEvent('submit', submitEvent);\n            if (form.dispatchEvent(newEvent)) {\n                // Because the submitter is not propagated when calling\n                // form.submit(), we recreate it here.\n                var submitter = submitEvent.submitter;\n                var submitterInput = null;\n                var initialFormAction = form.action;\n                if (submitter) {\n                    var name_1 = submitter.getAttribute('name');\n                    // If name is null, a submit button is not submitted.\n                    if (name_1) {\n                        submitterInput = document.createElement('input');\n                        submitterInput.type = 'hidden';\n                        submitterInput.name = name_1;\n                        submitterInput.value = submitter.getAttribute('value');\n                        form.appendChild(submitterInput);\n                    }\n                    var formAction = submitter.getAttribute('formaction');\n                    if (formAction) {\n                        form.action = formAction;\n                    }\n                }\n                try {\n                    form.submit();\n                }\n                finally {\n                    if (submitterInput) {\n                        // Important to clean up the submit input we created.\n                        form.removeChild(submitterInput);\n                    }\n                    form.action = initialFormAction;\n                }\n            }\n        };\n        /**\n         * Focuses the first invalid element within the provided form\n         * @param form\n         */\n        this.focusFirstInvalid = function (form) {\n            if (!(form instanceof HTMLFormElement)) {\n                throw new Error('focusFirstInvalid() can only be called on <form> elements');\n            }\n            var formUID = _this.getElementUID(form);\n            var formInputUIDs = _this.formInputs[formUID];\n            var invalidFormInputUID = formInputUIDs === null || formInputUIDs === void 0 ? void 0 : formInputUIDs.find(function (uid) { return _this.summary[uid]; });\n            if (invalidFormInputUID) {\n                var firstInvalid = _this.elementByUID[invalidFormInputUID];\n                if (firstInvalid instanceof HTMLElement) {\n                    firstInvalid.focus();\n                }\n            }\n        };\n        /**\n         * Returns true if the provided form is currently valid.\n         * The form will be validated unless prevalidate is set to false.\n         * @param form The form to validate.\n         * @param prevalidate Whether the form should be validated before returning.\n         * @param callback A callback that receives true or false indicating validity after all validation is complete. Ignored if prevalidate is false.\n         * @returns The current state of the form. May be inaccurate if any validation is asynchronous (e.g. remote); consider using `callback` instead.\n         */\n        this.isValid = function (form, prevalidate, callback) {\n            if (prevalidate === void 0) { prevalidate = true; }\n            if (!(form instanceof HTMLFormElement)) {\n                throw new Error('isValid() can only be called on <form> elements');\n            }\n            if (prevalidate) {\n                _this.validateForm(form, callback);\n            }\n            var formUID = _this.getElementUID(form);\n            var formInputUIDs = _this.formInputs[formUID];\n            var formIsInvalid = (formInputUIDs === null || formInputUIDs === void 0 ? void 0 : formInputUIDs.some(function (uid) { return _this.summary[uid]; })) === true;\n            return !formIsInvalid;\n        };\n        /**\n         * Returns true if the provided field is currently valid.\n         * The field will be validated unless prevalidate is set to false.\n         * @param field The field to validate.\n         * @param prevalidate Whether the field should be validated before returning.\n         * @param callback A callback that receives true or false indicating validity after all validation is complete. Ignored if prevalidate is false.\n         * @returns The current state of the field. May be inaccurate if any validation is asynchronous (e.g. remote); consider using `callback` instead.\n         */\n        this.isFieldValid = function (field, prevalidate, callback) {\n            if (prevalidate === void 0) { prevalidate = true; }\n            if (prevalidate) {\n                _this.validateField(field, callback);\n            }\n            var fieldUID = _this.getElementUID(field);\n            return _this.summary[fieldUID] === undefined;\n        };\n        /**\n         * Options for this instance of @type {ValidationService}.\n         */\n        this.options = {\n            root: document.body,\n            watch: false,\n            addNoValidate: true,\n        };\n        /**\n         * Override CSS class name for input validation error. Default: 'input-validation-error'\n         */\n        this.ValidationInputCssClassName = \"input-validation-error\";\n        /**\n         * Override CSS class name for valid input validation. Default: 'input-validation-valid'\n         */\n        this.ValidationInputValidCssClassName = \"input-validation-valid\";\n        /**\n         * Override CSS class name for field validation error. Default: 'field-validation-error'\n         */\n        this.ValidationMessageCssClassName = \"field-validation-error\";\n        /**\n         * Override CSS class name for valid field validation. Default: 'field-validation-valid'\n         */\n        this.ValidationMessageValidCssClassName = \"field-validation-valid\";\n        /**\n         * Override CSS class name for validation summary error. Default: 'validation-summary-errors'\n         */\n        this.ValidationSummaryCssClassName = \"validation-summary-errors\";\n        /**\n         * Override CSS class name for valid validation summary. Default: 'validation-summary-valid'\n         */\n        this.ValidationSummaryValidCssClassName = \"validation-summary-valid\";\n        this.logger = logger || nullLogger;\n    }\n    /**\n     * Registers a new validation plugin of the given name, if not registered yet.\n     * Registered plugin validates inputs with data-val-[name] attribute, used as error message.\n     * @param name\n     * @param callback\n     */\n    ValidationService.prototype.addProvider = function (name, callback) {\n        if (this.providers[name]) {\n            // First-Come-First-Serve validation plugin design.\n            // Allows developers to override the default MVC Providers by adding custom providers BEFORE bootstrap() is called!\n            return;\n        }\n        this.logger.log(\"Registered provider: %s\", name);\n        this.providers[name] = callback;\n    };\n    /**\n     * Registers the default providers for enabling ASP.NET Core MVC client-side validation.\n     */\n    ValidationService.prototype.addMvcProviders = function () {\n        var mvc = new MvcValidationProviders();\n        // [Required]\n        this.addProvider('required', mvc.required);\n        // [StringLength], [MinLength], [MaxLength]\n        this.addProvider('length', mvc.stringLength);\n        this.addProvider('maxlength', mvc.stringLength);\n        this.addProvider('minlength', mvc.stringLength);\n        // [Compare]\n        this.addProvider('equalto', mvc.compare);\n        // [Range]\n        this.addProvider('range', mvc.range);\n        // [RegularExpression]\n        this.addProvider('regex', mvc.regex);\n        // [CreditCard]\n        this.addProvider('creditcard', mvc.creditcard);\n        // [EmailAddress]\n        this.addProvider('email', mvc.email);\n        // [Url]\n        this.addProvider('url', mvc.url);\n        // [Phone]\n        this.addProvider('phone', mvc.phone);\n        // [Remote]\n        this.addProvider('remote', mvc.remote);\n    };\n    /**\n     * Scans `root` for all validation message <span> generated by ASP.NET Core MVC, then calls `cb` for each.\n     * @param root The root node to scan\n     * @param cb The callback to invoke with each form and span\n     */\n    ValidationService.prototype.scanMessages = function (root, cb) {\n        /* If a validation span explicitly declares a form, we group the span with that form. */\n        var validationMessageElements = Array.from(root.querySelectorAll('span[form]'));\n        for (var _i = 0, validationMessageElements_1 = validationMessageElements; _i < validationMessageElements_1.length; _i++) {\n            var span = validationMessageElements_1[_i];\n            var form = document.getElementById(span.getAttribute('form'));\n            if (form instanceof HTMLFormElement) {\n                cb.call(this, form, span);\n            }\n        }\n        // Otherwise if a validation message span is inside a form, we group the span with the form it's inside.\n        var forms = Array.from(root.querySelectorAll('form'));\n        if (root instanceof HTMLFormElement) {\n            // querySelectorAll does not include the root element itself.\n            // we could use 'matches', but that's newer than querySelectorAll so we'll keep it simple and compatible.\n            forms.push(root);\n        }\n        // If root is the descendant of a form, we want to include that form too.\n        var containingForm = (root instanceof Element) ? root.closest('form') : null;\n        if (containingForm) {\n            forms.push(containingForm);\n        }\n        for (var _a = 0, forms_1 = forms; _a < forms_1.length; _a++) {\n            var form = forms_1[_a];\n            var validationMessageElements_3 = Array.from(form.querySelectorAll('[data-valmsg-for]'));\n            for (var _b = 0, validationMessageElements_2 = validationMessageElements_3; _b < validationMessageElements_2.length; _b++) {\n                var span = validationMessageElements_2[_b];\n                cb.call(this, form, span);\n            }\n        }\n    };\n    ValidationService.prototype.pushValidationMessageSpan = function (form, span) {\n        var _a, _b;\n        var _c;\n        var formId = this.getElementUID(form);\n        var formSpans = (_a = (_c = this.messageFor)[formId]) !== null && _a !== void 0 ? _a : (_c[formId] = {});\n        var messageForId = span.getAttribute('data-valmsg-for');\n        if (!messageForId)\n            return;\n        var spans = (_b = formSpans[messageForId]) !== null && _b !== void 0 ? _b : (formSpans[messageForId] = []);\n        if (spans.indexOf(span) < 0) {\n            spans.push(span);\n        }\n        else {\n            this.logger.log(\"Validation element for '%s' is already tracked\", name, span);\n        }\n    };\n    ValidationService.prototype.removeValidationMessageSpan = function (form, span) {\n        var formId = this.getElementUID(form);\n        var formSpans = this.messageFor[formId];\n        if (!formSpans)\n            return;\n        var messageForId = span.getAttribute('data-valmsg-for');\n        if (!messageForId)\n            return;\n        var spans = formSpans[messageForId];\n        if (!spans) {\n            return;\n        }\n        var index = spans.indexOf(span);\n        if (index >= 0) {\n            spans.splice(index, 1);\n        }\n        else {\n            this.logger.log(\"Validation element for '%s' was already removed\", name, span);\n        }\n    };\n    /**\n     * Given attribute map for an HTML input, returns the validation directives to be executed.\n     * @param attributes\n     */\n    ValidationService.prototype.parseDirectives = function (attributes) {\n        var directives = {};\n        var validationAtributes = {};\n        var cut = 'data-val-'.length;\n        for (var i = 0; i < attributes.length; i++) {\n            var a = attributes[i];\n            if (a.name.indexOf('data-val-') === 0) {\n                var key = a.name.substr(cut);\n                validationAtributes[key] = a.value;\n            }\n        }\n        var _loop_1 = function (key) {\n            if (key.indexOf('-') === -1) {\n                var parameters = Object.keys(validationAtributes).filter(function (Q) {\n                    return (Q !== key) && (Q.indexOf(key) === 0);\n                });\n                var directive = {\n                    error: validationAtributes[key],\n                    params: {}\n                };\n                var pcut = (key + '-').length;\n                for (var i = 0; i < parameters.length; i++) {\n                    var pvalue = validationAtributes[parameters[i]];\n                    var pkey = parameters[i].substr(pcut);\n                    directive.params[pkey] = pvalue;\n                }\n                directives[key] = directive;\n            }\n        };\n        for (var key in validationAtributes) {\n            _loop_1(key);\n        }\n        return directives;\n    };\n    /**\n     *  Returns an RFC4122 version 4 compliant GUID.\n     */\n    ValidationService.prototype.guid4 = function () {\n        // (c) broofa, MIT Licensed\n        // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript/2117523#2117523\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n    /**\n     * Gets a UID for an DOM element.\n     * @param node\n     */\n    ValidationService.prototype.getElementUID = function (node) {\n        var x = this.elementUIDs.filter(function (e) {\n            return e.node === node;\n        })[0];\n        if (x) {\n            return x.uid;\n        }\n        var uid = this.guid4();\n        this.elementUIDs.push({\n            node: node,\n            uid: uid\n        });\n        this.elementByUID[uid] = node;\n        return uid;\n    };\n    /**\n     * Returns a Promise that returns validation result for each and every inputs within the form.\n     * @param formUID\n     */\n    ValidationService.prototype.getFormValidationTask = function (formUID) {\n        var formInputUIDs = this.formInputs[formUID];\n        if (!formInputUIDs || formInputUIDs.length === 0) {\n            return Promise.resolve(true);\n        }\n        var formValidators = [];\n        for (var _i = 0, formInputUIDs_1 = formInputUIDs; _i < formInputUIDs_1.length; _i++) {\n            var inputUID = formInputUIDs_1[_i];\n            var validator = this.validators[inputUID];\n            if (validator) {\n                formValidators.push(validator);\n            }\n        }\n        var tasks = formValidators.map(function (factory) { return factory(); });\n        return Promise.all(tasks).then(function (result) { return result.every(function (e) { return e; }); });\n    };\n    // Retrieves the validation span for the input.\n    ValidationService.prototype.getMessageFor = function (input) {\n        var _a;\n        if (!input.form) {\n            return undefined;\n        }\n        var formId = this.getElementUID(input.form);\n        return (_a = this.messageFor[formId]) === null || _a === void 0 ? void 0 : _a[input.name];\n    };\n    /**\n     * Returns true if the event triggering the form submission indicates we should validate the form.\n     * @param e\n     */\n    ValidationService.prototype.shouldValidate = function (e) {\n        // Skip client-side validation if the form has been submitted via a button that has the \"formnovalidate\" attribute.\n        return !(e && e['submitter'] && e['submitter']['formNoValidate']);\n    };\n    /**\n     * Tracks a <form> element as parent of an input UID. When the form is submitted, attempts to validate the said input asynchronously.\n     * @param form\n     * @param inputUID\n     */\n    ValidationService.prototype.trackFormInput = function (form, inputUID) {\n        var _this = this;\n        var _a;\n        var _b;\n        var formUID = this.getElementUID(form);\n        var formInputUIDs = (_a = (_b = this.formInputs)[formUID]) !== null && _a !== void 0 ? _a : (_b[formUID] = []);\n        var add = formInputUIDs.indexOf(inputUID) === -1;\n        if (add) {\n            formInputUIDs.push(inputUID);\n            if (this.options.addNoValidate) {\n                this.logger.log('Setting novalidate on form', form);\n                form.setAttribute('novalidate', 'novalidate');\n            }\n            else {\n                this.logger.log('Not setting novalidate on form', form);\n            }\n        }\n        else {\n            this.logger.log(\"Form input for UID '%s' is already tracked\", inputUID);\n        }\n        if (this.formEvents[formUID]) {\n            return;\n        }\n        var validationTask = null;\n        var cb = function (e, callback) {\n            // Prevent recursion\n            if (validationTask) {\n                return validationTask;\n            }\n            if (!_this.shouldValidate(e)) {\n                return Promise.resolve(true);\n            }\n            validationTask = _this.getFormValidationTask(formUID);\n            //`preValidate` typically prevents submit before validation\n            if (e) {\n                _this.preValidate(e);\n            }\n            _this.logger.log('Validating', form);\n            return validationTask.then(function (success) { return __awaiter(_this, void 0, void 0, function () {\n                var validationEvent;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            this.logger.log('Validated (success = %s)', success, form);\n                            if (callback) {\n                                callback(success);\n                                return [2 /*return*/, success];\n                            }\n                            validationEvent = new CustomEvent('validation', {\n                                detail: { valid: success }\n                            });\n                            form.dispatchEvent(validationEvent);\n                            // Firefox fix: redispatch 'submit' after finished handling this event\n                            return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 0); })];\n                        case 1:\n                            // Firefox fix: redispatch 'submit' after finished handling this event\n                            _a.sent();\n                            this.handleValidated(form, success, e);\n                            return [2 /*return*/, success];\n                    }\n                });\n            }); }).catch(function (error) {\n                _this.logger.log('Validation error', error);\n                return false;\n            }).finally(function () {\n                validationTask = null;\n            });\n        };\n        form.addEventListener('submit', cb);\n        var cbReset = function (e) {\n            var formInputUIDs = _this.formInputs[formUID];\n            for (var _i = 0, formInputUIDs_2 = formInputUIDs; _i < formInputUIDs_2.length; _i++) {\n                var inputUID_1 = formInputUIDs_2[_i];\n                _this.resetField(inputUID_1);\n            }\n            _this.renderSummary();\n        };\n        form.addEventListener('reset', cbReset);\n        cb.remove = function () {\n            form.removeEventListener('submit', cb);\n            form.removeEventListener('reset', cbReset);\n        };\n        this.formEvents[formUID] = cb;\n    };\n    /*\n        Reset the state of a validatable input. This is used when it's enabled or disabled.\n    */\n    ValidationService.prototype.reset = function (input) {\n        if (this.isDisabled(input)) {\n            this.resetField(this.getElementUID(input));\n        }\n        else {\n            this.scan(input);\n        }\n    };\n    ValidationService.prototype.resetField = function (inputUID) {\n        var input = this.elementByUID[inputUID];\n        this.swapClasses(input, '', this.ValidationInputCssClassName);\n        this.swapClasses(input, '', this.ValidationInputValidCssClassName);\n        var spans = isValidatable(input) && this.getMessageFor(input);\n        if (spans) {\n            for (var i = 0; i < spans.length; i++) {\n                spans[i].innerHTML = '';\n                this.swapClasses(spans[i], '', this.ValidationMessageCssClassName);\n                this.swapClasses(spans[i], '', this.ValidationMessageValidCssClassName);\n            }\n        }\n        delete this.summary[inputUID];\n    };\n    ValidationService.prototype.untrackFormInput = function (form, inputUID) {\n        var _a;\n        var formUID = this.getElementUID(form);\n        var formInputUIDs = this.formInputs[formUID];\n        if (!formInputUIDs) {\n            return;\n        }\n        var indexToRemove = formInputUIDs.indexOf(inputUID);\n        if (indexToRemove >= 0) {\n            formInputUIDs.splice(indexToRemove, 1);\n            if (!formInputUIDs.length) {\n                (_a = this.formEvents[formUID]) === null || _a === void 0 ? void 0 : _a.remove();\n                delete this.formEvents[formUID];\n                delete this.formInputs[formUID];\n                delete this.messageFor[formUID];\n            }\n        }\n        else {\n            this.logger.log(\"Form input for UID '%s' was already removed\", inputUID);\n        }\n    };\n    /**\n     * Adds an input element to be managed and validated by the service.\n     * Triggers a debounced live validation when input value changes.\n     * @param input\n     */\n    ValidationService.prototype.addInput = function (input) {\n        var _this = this;\n        var _a;\n        var uid = this.getElementUID(input);\n        var directives = this.parseDirectives(input.attributes);\n        this.validators[uid] = this.createValidator(input, directives);\n        if (input.form) {\n            this.trackFormInput(input.form, uid);\n        }\n        if (this.inputEvents[uid]) {\n            return;\n        }\n        var cb = function (event, callback) { return __awaiter(_this, void 0, void 0, function () {\n            var validate, success, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        validate = this.validators[uid];\n                        if (!validate)\n                            return [2 /*return*/, true];\n                        if (!input.dataset.valEvent &&\n                            event && event.type === 'input' &&\n                            !input.classList.contains(this.ValidationInputCssClassName)) {\n                            // When no data-val-event specified on a field, \"input\" event only takes it back to valid. \"Change\" event can make it invalid.\n                            return [2 /*return*/, true];\n                        }\n                        this.logger.log('Validating', { event: event });\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, validate()];\n                    case 2:\n                        success = _a.sent();\n                        callback(success);\n                        return [2 /*return*/, success];\n                    case 3:\n                        error_1 = _a.sent();\n                        this.logger.log('Validation error', error_1);\n                        return [2 /*return*/, false];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        }); };\n        var debounceTimeoutID = null;\n        cb.debounced = function (event, callback) {\n            if (debounceTimeoutID !== null) {\n                clearTimeout(debounceTimeoutID);\n            }\n            debounceTimeoutID = setTimeout(function () {\n                cb(event, callback);\n            }, _this.debounce);\n        };\n        var defaultEvent = input instanceof HTMLSelectElement ? 'change' : 'input change';\n        var validateEvent = (_a = input.dataset.valEvent) !== null && _a !== void 0 ? _a : defaultEvent;\n        var events = validateEvent.split(' ');\n        events.forEach(function (eventName) {\n            input.addEventListener(eventName, cb.debounced);\n        });\n        cb.remove = function () {\n            events.forEach(function (eventName) {\n                input.removeEventListener(eventName, cb.debounced);\n            });\n        };\n        this.inputEvents[uid] = cb;\n    };\n    ValidationService.prototype.removeInput = function (input) {\n        var uid = this.getElementUID(input);\n        // Clean up event listener\n        var cb = this.inputEvents[uid];\n        if (cb === null || cb === void 0 ? void 0 : cb.remove) {\n            cb.remove();\n            delete cb.remove;\n        }\n        delete this.summary[uid];\n        delete this.inputEvents[uid];\n        delete this.validators[uid];\n        if (input.form) {\n            this.untrackFormInput(input.form, uid);\n        }\n    };\n    /**\n     * Scans `root` for input elements to be validated, then calls `cb` for each.\n     * @param root The root node to scan\n     * @param cb The callback to invoke with each input\n     */\n    ValidationService.prototype.scanInputs = function (root, cb) {\n        var inputs = Array.from(root.querySelectorAll(validatableSelector('[data-val=\"true\"]')));\n        // querySelectorAll does not include the root element itself.\n        // we could use 'matches', but that's newer than querySelectorAll so we'll keep it simple and compatible.\n        if (isValidatable(root) && root.getAttribute(\"data-val\") === \"true\") {\n            inputs.push(root);\n        }\n        for (var i = 0; i < inputs.length; i++) {\n            var input = inputs[i];\n            cb.call(this, input);\n        }\n    };\n    /**\n     * Returns a <ul> element as a validation errors summary.\n     */\n    ValidationService.prototype.createSummaryDOM = function () {\n        if (!Object.keys(this.summary).length) {\n            return null;\n        }\n        var renderedMessages = [];\n        var ul = document.createElement('ul');\n        for (var key in this.summary) {\n            // It could be that the message we are rendering belongs to one of a fieldset of multiple inputs that's not selected,\n            // even if another one in the fieldset is. In that case the fieldset is valid, and we shouldn't render the message.\n            var matchingElement = this.elementByUID[key];\n            if (matchingElement instanceof HTMLInputElement) {\n                if (matchingElement.type === \"checkbox\" || matchingElement.type === \"radio\") {\n                    if (matchingElement.className === this.ValidationInputValidCssClassName) {\n                        continue;\n                    }\n                }\n            }\n            // With required multiple inputs, such as a checkbox list, we'll have one message per input.\n            // It's one from the inputs that's required, not all, so we should only have one message displayed.\n            if (renderedMessages.indexOf(this.summary[key]) > -1) {\n                continue;\n            }\n            var li = document.createElement('li');\n            li.innerHTML = this.summary[key];\n            ul.appendChild(li);\n            renderedMessages.push(this.summary[key]);\n        }\n        return ul;\n    };\n    /**\n     * Displays validation summary to ASP.NET Core MVC designated elements, when it actually gets updated.\n     */\n    ValidationService.prototype.renderSummary = function () {\n        var summaryElements = document.querySelectorAll('[data-valmsg-summary=\"true\"]');\n        if (!summaryElements.length) {\n            return;\n        }\n        // Prevents wasteful re-rendering of summary list element with identical items!\n        // Using JSON.stringify for quick and painless deep compare of simple KVP. You need to sort the keys first, tho...\n        var shadow = JSON.stringify(this.summary, Object.keys(this.summary).sort());\n        if (shadow === this.renderedSummaryJSON) {\n            return;\n        }\n        // Prevents wasteful re-rendering of summary list element with identical items!\n        this.renderedSummaryJSON = shadow;\n        var ul = this.createSummaryDOM();\n        for (var i = 0; i < summaryElements.length; i++) {\n            var e = summaryElements[i];\n            // Remove existing list elements, but keep the summary's message.\n            var listElements = e.querySelectorAll(\"ul\");\n            for (var j = 0; j < listElements.length; j++) {\n                listElements[j].remove();\n            }\n            // Style the summary element as valid/invalid depending on whether there are any messages to display.\n            if (ul && ul.hasChildNodes()) {\n                this.swapClasses(e, this.ValidationSummaryCssClassName, this.ValidationSummaryValidCssClassName);\n                e.appendChild(ul.cloneNode(true));\n            }\n            else {\n                this.swapClasses(e, this.ValidationSummaryValidCssClassName, this.ValidationSummaryCssClassName);\n            }\n        }\n    };\n    /**\n     * Adds an error message to an input element, which also updates the validation message elements and validation summary elements.\n     * @param input\n     * @param message\n     */\n    ValidationService.prototype.addError = function (input, message) {\n        var spans = this.getMessageFor(input);\n        if (spans) {\n            for (var i = 0; i < spans.length; i++) {\n                var span = spans[i];\n                spans[i].innerHTML = message;\n                this.swapClasses(spans[i], this.ValidationMessageCssClassName, this.ValidationMessageValidCssClassName);\n            }\n        }\n        this.highlight(input, this.ValidationInputCssClassName, this.ValidationInputValidCssClassName);\n        if (input.form) {\n            // Adding an error to one input should also add it to others with the same name (i.e. for radio button and checkbox lists).\n            var inputs = input.form.querySelectorAll(validatableSelector(\"[name=\\\"\".concat(input.name, \"\\\"]\")));\n            for (var i = 0; i < inputs.length; i++) {\n                this.swapClasses(inputs[i], this.ValidationInputCssClassName, this.ValidationInputValidCssClassName);\n                var uid = this.getElementUID(inputs[i]);\n                this.summary[uid] = message;\n            }\n        }\n        this.renderSummary();\n    };\n    /**\n     * Removes an error message from an input element, which also updates the validation message elements and validation summary elements.\n     * @param input\n     */\n    ValidationService.prototype.removeError = function (input) {\n        var spans = this.getMessageFor(input);\n        if (spans) {\n            for (var i = 0; i < spans.length; i++) {\n                spans[i].innerHTML = '';\n                this.swapClasses(spans[i], this.ValidationMessageValidCssClassName, this.ValidationMessageCssClassName);\n            }\n        }\n        this.unhighlight(input, this.ValidationInputCssClassName, this.ValidationInputValidCssClassName);\n        // Removing an error from one input should also remove it from others with the same name (i.e. for radio button and checkbox lists).\n        if (input.form) {\n            var inputs = input.form.querySelectorAll(validatableSelector(\"[name=\\\"\".concat(input.name, \"\\\"]\")));\n            for (var i = 0; i < inputs.length; i++) {\n                this.swapClasses(inputs[i], this.ValidationInputValidCssClassName, this.ValidationInputCssClassName);\n                var uid = this.getElementUID(inputs[i]);\n                delete this.summary[uid];\n            }\n        }\n        this.renderSummary();\n    };\n    /**\n     * Returns a validation Promise factory for an input element, using given validation directives.\n     * @param input\n     * @param directives\n     */\n    ValidationService.prototype.createValidator = function (input, directives) {\n        var _this = this;\n        return function () { return __awaiter(_this, void 0, void 0, function () {\n            var _a, _b, _c, _i, key, directive, provider, result, valid, error, resolution;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        if (!(!this.isHidden(input) && !this.isDisabled(input))) return [3 /*break*/, 7];\n                        _a = directives;\n                        _b = [];\n                        for (_c in _a)\n                            _b.push(_c);\n                        _i = 0;\n                        _d.label = 1;\n                    case 1:\n                        if (!(_i < _b.length)) return [3 /*break*/, 7];\n                        _c = _b[_i];\n                        if (!(_c in _a)) return [3 /*break*/, 6];\n                        key = _c;\n                        directive = directives[key];\n                        provider = this.providers[key];\n                        if (!provider) {\n                            this.logger.log('aspnet-validation provider not implemented: %s', key);\n                            return [3 /*break*/, 6];\n                        }\n                        this.logger.log(\"Running %s validator on element\", key, input);\n                        result = provider(input.value, input, directive.params);\n                        valid = false;\n                        error = directive.error;\n                        if (!(typeof result === 'boolean')) return [3 /*break*/, 2];\n                        valid = result;\n                        return [3 /*break*/, 5];\n                    case 2:\n                        if (!(typeof result === 'string')) return [3 /*break*/, 3];\n                        valid = false;\n                        error = result;\n                        return [3 /*break*/, 5];\n                    case 3: return [4 /*yield*/, result];\n                    case 4:\n                        resolution = _d.sent();\n                        if (typeof resolution === 'boolean') {\n                            valid = resolution;\n                        }\n                        else {\n                            valid = false;\n                            error = resolution;\n                        }\n                        _d.label = 5;\n                    case 5:\n                        if (!valid) {\n                            this.addError(input, error);\n                            return [2 /*return*/, false];\n                        }\n                        _d.label = 6;\n                    case 6:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 7:\n                        this.removeError(input);\n                        return [2 /*return*/, true];\n                }\n            });\n        }); };\n    };\n    /**\n     * Checks if the provided input is hidden from the browser\n     * @param input\n     * @returns\n     */\n    ValidationService.prototype.isHidden = function (input) {\n        return !(this.allowHiddenFields || input.offsetWidth || input.offsetHeight || input.getClientRects().length);\n    };\n    /**\n     * Checks if the provided input is disabled\n     * @param input\n     * @returns\n     */\n    ValidationService.prototype.isDisabled = function (input) {\n        // If the input is validatable, we check the `disabled` property.\n        // Otherwise the `disabled` property is undefined and this returns false.\n        return input.disabled;\n    };\n    /**\n     * Adds addClass and removes removeClass\n     * @param element Element to modify\n     * @param addClass Class to add\n     * @param removeClass Class to remove\n     */\n    ValidationService.prototype.swapClasses = function (element, addClass, removeClass) {\n        if (addClass && !this.isDisabled(element) && !element.classList.contains(addClass)) {\n            element.classList.add(addClass);\n        }\n        if (element.classList.contains(removeClass)) {\n            element.classList.remove(removeClass);\n        }\n    };\n    /**\n     * Load default validation providers and scans the entire document when ready.\n     * @param options.watch If set to true, a MutationObserver will be used to continuously watch for new elements that provide validation directives.\n     * @param options.addNoValidate If set to true (the default), a novalidate attribute will be added to the containing form in validate elements.\n     */\n    ValidationService.prototype.bootstrap = function (options) {\n        var _this = this;\n        Object.assign(this.options, options);\n        this.addMvcProviders();\n        var document = window.document;\n        var root = this.options.root;\n        var init = function () {\n            _this.scan(root);\n            // Watch for further mutations after initial scan\n            if (_this.options.watch) {\n                _this.watch(root);\n            }\n        };\n        // If the document is done loading, scan it now.\n        if (document.readyState === 'complete' || document.readyState === 'interactive') {\n            init();\n        }\n        else {\n            // Otherwise wait until the document is done loading.\n            document.addEventListener('DOMContentLoaded', init);\n        }\n    };\n    /**\n     * Scans the root element for any validation directives and attaches behavior to them.\n     * @param root The root node to scan; if not provided, `options.root` (default: `document.body`) will be scanned\n     */\n    ValidationService.prototype.scan = function (root) {\n        root !== null && root !== void 0 ? root : (root = this.options.root);\n        this.logger.log('Scanning', root);\n        this.scanMessages(root, this.pushValidationMessageSpan);\n        this.scanInputs(root, this.addInput);\n    };\n    /**\n     * Scans the root element for any validation directives and removes behavior from them.\n     * @param root The root node to scan; if not provided, `options.root` (default: `document.body`) will be scanned\n     */\n    ValidationService.prototype.remove = function (root) {\n        root !== null && root !== void 0 ? root : (root = this.options.root);\n        this.logger.log('Removing', root);\n        this.scanMessages(root, this.removeValidationMessageSpan);\n        this.scanInputs(root, this.removeInput);\n    };\n    /**\n     * Watches the provided root element for mutations, and scans for new validation directives to attach behavior.\n     * @param root The root node to watch; if not provided, `options.root` (default: `document.body`) will be watched\n     */\n    ValidationService.prototype.watch = function (root) {\n        var _this = this;\n        root !== null && root !== void 0 ? root : (root = this.options.root);\n        this.observer = new MutationObserver(function (mutations) {\n            mutations.forEach(function (mutation) {\n                _this.observed(mutation);\n            });\n        });\n        this.observer.observe(root, {\n            attributes: true,\n            childList: true,\n            subtree: true\n        });\n        this.logger.log(\"Watching for mutations\");\n    };\n    ValidationService.prototype.observed = function (mutation) {\n        var _a, _b, _c;\n        if (mutation.type === 'childList') {\n            for (var i = 0; i < mutation.addedNodes.length; i++) {\n                var node = mutation.addedNodes[i];\n                this.logger.log('Added node', node);\n                if (node instanceof HTMLElement) {\n                    this.scan(node);\n                }\n            }\n            for (var i = 0; i < mutation.removedNodes.length; i++) {\n                var node = mutation.removedNodes[i];\n                this.logger.log('Removed node', node);\n                if (node instanceof HTMLElement) {\n                    this.remove(node);\n                }\n            }\n        }\n        else if (mutation.type === 'attributes') {\n            if (mutation.target instanceof HTMLElement) {\n                var attributeName = mutation.attributeName;\n                // Special case for disabled.\n                if (attributeName === 'disabled') {\n                    var target = mutation.target;\n                    this.reset(target);\n                }\n                else {\n                    var oldValue = (_a = mutation.oldValue) !== null && _a !== void 0 ? _a : '';\n                    var newValue = (_c = (_b = mutation.target.attributes[mutation.attributeName]) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : '';\n                    this.logger.log(\"Attribute '%s' changed from '%s' to '%s'\", mutation.attributeName, oldValue, newValue, mutation.target);\n                    if (oldValue !== newValue) {\n                        this.scan(mutation.target);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Highlights invalid element by adding errorClass CSS class and removing validClass CSS class\n     * @param input Element to modify\n     * @param errorClass Class to add\n     * @param validClass Class to remove\n     */\n    ValidationService.prototype.highlight = function (input, errorClass, validClass) {\n        this.swapClasses(input, errorClass, validClass);\n    };\n    /**\n     * Unhighlight valid element by removing errorClass CSS class and adding validClass CSS class\n     * @param input Element to modify\n     * @param errorClass Class to remove\n     * @param validClass Class to add\n     */\n    ValidationService.prototype.unhighlight = function (input, errorClass, validClass) {\n        this.swapClasses(input, validClass, errorClass);\n    };\n    return ValidationService;\n}());\n\n\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});","if (!document.body.attributes.__htmx_antiforgery) {\r\n    document.addEventListener(\"htmx:configRequest\", evt => {\r\n        // Safely destructure detail properties with optional chaining\r\n        const { verb, parameters, headers } = evt.detail;\r\n        if (verb?.toUpperCase() === 'GET') return;\r\n\r\n        const antiforgery = htmx.config?.antiforgery;\r\n        if (!antiforgery) return;\r\n\r\n        const { headerName, requestToken, formFieldName } = antiforgery;\r\n\r\n        // Ensure at least one configuration field is provided\r\n        if (!headerName && !formFieldName) {\r\n            console.warn(\"Antiforgery configuration is missing both headerName and formFieldName. Token not added.\");\r\n            return;\r\n        }\r\n\r\n        // If formFieldName exists and token is already set, avoid overriding it\r\n        if (formFieldName && parameters[formFieldName]) return;\r\n\r\n        // Apply the token either to headers or parameters based on configuration\r\n        if (headerName) {\r\n            headers[headerName] = requestToken;\r\n        } else {\r\n            parameters[formFieldName] = requestToken;\r\n        }\r\n    });\r\n    document.addEventListener(\"htmx:afterOnLoad\", evt => {\r\n        if (evt.detail.boosted) {\r\n            const responseText = evt.detail.xhr.responseText;\r\n            const selector = 'meta[name=htmx-config]';\r\n\r\n            // Find the index of the opening and closing tag for the meta element.\r\n            const startIndex = responseText.indexOf(`<meta name=\"htmx-config\"`);\r\n            const endIndex = responseText.indexOf(\">\", startIndex) + 1; // Include the closing >\r\n            const closingTagIndex = responseText.indexOf(\"</meta>\", endIndex);  //handle self closing tags\r\n\r\n            if (startIndex > -1) {\r\n                let metaTagString = \"\";\r\n                if(closingTagIndex > -1){\r\n                    const closingSlashIndex = responseText.indexOf(\"/\", startIndex);\r\n                    if (closingSlashIndex > -1 && closingSlashIndex < endIndex) {\r\n                        // Handle Self closing tag e.g. <meta ... />\r\n                        metaTagString = responseText.substring(startIndex, endIndex);\r\n                    } else {\r\n                        metaTagString = responseText.substring(startIndex, responseText.indexOf(\"</meta>\") + 7);\r\n                    }\r\n                } else {\r\n                    metaTagString = responseText.substring(startIndex, endIndex);\r\n                }\r\n\r\n                // Extract the content attribute.\r\n                const contentAttributeRegex = /content=\"([^\"]*)\"/;\r\n                const contentMatch = metaTagString.match(contentAttributeRegex);\r\n\r\n                if (contentMatch && contentMatch[1]) {\r\n                    const contentValue = contentMatch[1];\r\n\r\n                    const current = document.querySelector(selector);\r\n\r\n                    // only change the anti-forgery token\r\n                    const key = 'antiforgery';\r\n                    try {\r\n                        htmx.config[key] = JSON.parse(contentValue)[key];\r\n                    } catch (e) {\r\n                        console.error(\"Error parsing htmx-config JSON:\", e);\r\n                        return; // Exit if parsing fails\r\n                    }\r\n\r\n\r\n                    // Create the new meta element and set its attributes.\r\n                    const newMeta = document.createElement('meta');\r\n                    newMeta.setAttribute('name', 'htmx-config');\r\n                    newMeta.setAttribute('content', contentValue);\r\n\r\n                    // update DOM\r\n                    current.replaceWith(newMeta);\r\n\r\n                }\r\n            }\r\n        }\r\n    });\r\n    document.body.attributes.__htmx_antiforgery = true;\r\n}","import \"./rizzy-nonce\"\r\nimport \"./rizzy-streaming\"\r\nimport { ValidationService } from \"aspnet-client-validation\";\r\nimport \"./antiforgerySnippet\";\r\n\r\n// Set up ASP.NET validation\r\nlet validation = new ValidationService();\r\nvalidation.bootstrap({ watch: true });\r\n\r\nconst Rizzy = {\r\n    validation\r\n};\r\n\r\nwindow.Rizzy = { ...(window.Rizzy || {}), ...Rizzy };\r\n\r\nexport default Rizzy;"],"names":["name","elt","exports","MvcValidationProviders","fieldName","ValidationService","key","i","_a","formInputUIDs","document"],"mappings":"CAEC,WAAW;AAER,OAAK;AAAA,IAAgB;AAAA,IACjB;AAAA,MACI,mBAAmB,SAAS,MAAM,KAAK,KAAK;AAExC,YAAI,gBAAgB,KAAK,OAAO,iBAAiB,KAAK,OAAO;AAE7D,YAAI,CAAC,eAAe;AAChB,kBAAQ,KAAK,iGAAiG;AAC9G,0BAAgB;AAAA,QACnB;AAGD,aAAK,OAAO,uBAAuB;AAGnC,YAAI,QAAQ,KAAK,kBAAkB,UAAU;AAC7C,YAAI,CAAC,OAAO;AACR,gBAAM,MAAM,KAAK,kBAAkB,yBAAyB;AAC5D,cAAI,KAAK;AACL,kBAAM,WAAW,IAAI,MAAM,yCAAyC;AACpE,gBAAI,UAAU;AACV,sBAAQ,SAAS,CAAC;AAAA,YACrB;AAAA,UACJ;AAAA,QACJ;AACD,YAAI,OAAO,OAAO,SAAS,UAAU;AACjC,gBAAM,cAAc,IAAI,IAAI,IAAI,WAAW;AAC3C,cAAI,YAAY,aAAa,OAAO,SAAS,UAAU;AACnD,oBAAQ;AAAA,UACX;AAAA,QACJ;AAED,0BAAU;AAEV,eAAO,KAAK,kBAAkB,MAAM,eAAe,KAAK;AAAA,MAC3D;AAAA,MACD,mBAAmB,SAAS,MAAM,eAAe,gBAAgB;AAO7D,YAAI,iBAAiB;AACjB,iBAAO,KAAK,WAAW,gBAAgB,aAAa;AAExD,cAAM,SAAS,IAAI;AAEnB,YAAI;AAIA,cAAI,MAAM,OAAO,gBAAgB,MAAM,WAAW;AAElD,cAAI,KAAK;AAEL,kBAAM,KAAK,IAAI,iBAAiB,qEAAqE,CAAC,EACjG,QAAQ,CAAC,QAAQ;AACd,kBAAI,OAAM;AAAA,YAC1C,CAA6B;AAGL,kBAAM,WAAW,IAAI,iBAAiB,qBAAqB;AAG3D,qBAAS,QAAQ,SAAO;AACpB,oBAAM,QAAQ,IAAI,aAAa,OAAO;AACtC,kBAAI,UAAU,eAAe;AAEzB,oBAAI,OAAM;AAAA,cACb;AAAA,YAC7B,CAAyB;AAGD,mBAAO,IAAI,gBAAgB;AAAA,UAC9B;AAAA,QAErB,SAAyB,GAAG;AAAA,QAAG;AAKf,eAAO;AAAA,MAEV;AAAA,IACb;AAAA,EAAS;AAET,GAAC;AAAA,CCnFA,WAAY;AAET,MAAI;AACJ,MAAI,wBAAwB;AAAA,EAG5B,MAAM,8BAA8B,YAAY;AAAA,IAC5C,oBAAoB;AAChB,YAAM,mBAAmB,KAAK;AAG9B,uBAAiB,YAAY,YAAY,gBAAgB;AAIzD,uBAAiB,WAAW,QAAQ,UAAQ;AACxC,YAAI,gBAAgB,qBAAqB;AACrC,gBAAM,cAAc,KAAK,aAAa,qBAAqB;AAC3D,cAAI,aAAa;AACb,+CAAmC,aAAa,KAAK,OAAO;AAAA,UAC/D;AAAA,QACJ;AAAA,MACjB,CAAa;AAED,YAAM,QAAQ,SAAS,IAAI;AAAA,IAC9B;AAAA,EACJ;AAED,OAAK;AAAA,IAAgB;AAAA,IACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOI,MAAM,SAAU,QAAQ;AAEpB,cAAM;AAGN,YAAI,KAAK,iBAAiB,QAAW;AACjC,cAAI,eAAe,IAAI,gBAAgB,MAAM,QAAW;AACpD,2BAAe,OAAO,kBAAkB,qBAAqB;AAAA,UAChE;AACD,eAAK,gBAAgB;AAAA,QACxB;AAAA,MACJ;AAAA,MACD,SAAS,SAAUA,OAAM,KAAK;AAC1B,YAAIA,UAAS,oBAAoB;AAC7B,gBAAM,QAAQ,SAAS,IAAI;AAAA,QAC9B,WACQA,UAAS,sBAAsB;AACpC,cAAI,UAAU,IAAI,OAAO;AACzB,cAAI,IAAI,OAAO,cAAc,QAAQ;AACjC,gBAAI,OAAO,cAAc,OAAO;AAAA,cAAiB;AAAA,cAC7C,OAAK;AAAA,cAIjC;AAAA,cAA+B,EAAE,MAAM,KAAI;AAAA,YAAE;AAAA,UACxB;AAED,cAAI,OAAO;AACX,cAAI,WAAW,IAAI,qBAAqB,OAAO;AAC/C,cAAI,MAAM,IAAI,OAAO;AAIrB,cAAI,MAAM,QAAQ,OAAO,WAAU;AAEnC,cAAI,iBAAiB,oBAAoB,MAAM;AAG3C,gBAAI,IAAI,eAAe,GAAG;AACtB,kBAAI,YAAY,SAAS,eAAe,GAAG;AAE3C,kBAAI,aAAa;AACb,uBAAO,SAAS;AAAA,YACvB;AAAA,UACzB,CAAqB;AAED,cAAI,iBAAiB,YAAY,OAAK;AAElC,gBAAI,YAAY,SAAS,eAAe,GAAG;AAI3C,gBAAI,aAAa,MAAM;AACnB,0BAAY,SAAS,cAAc,KAAK;AACxC,wBAAU,KAAK;AAGf,mBAAK,SAAS,UAAU,WAAW,UAAU,GAAG;AAGhD,uBAAS,YAAY;AAGrB,0BAAY,SAAS,eAAe,GAAG,KAAK;AAAA,YAC/C;AAGD,gBAAI,OAAO,EAAE,cAAc,SAAS,UAAU,IAAI;AAClD,iBAAK,WAAW,MAAM,UAAU,GAAG;AAEnC,qBAAS,cAAc;AACvB,qBAAS,YAAY;AACrB,mBAAO,EAAE;AAAA,UACjC,CAAqB;AAAA,QAEJ;AAED,eAAO;AAAA,MACV;AAAA,IACb;AAAA,EAAS;AAEL,WAAS,oBAAoB,aAAa;AAEtC,QAAI,eAAe,YAAY,aAAa,KAAK,cAAc;AAC3D,UAAI,cAAc,YAAY;AAE9B,aAAO,gBAAgB,MAAM;AACzB,YAAI,gBAAgB,SAAS,MAAM;AAE/B,iBAAO;AAAA,QACV;AACD,sBAAc,YAAY;AAAA,MAC7B;AAAA,IACb,OAAe;AACH,aAAO;AAAA,IACV;AAED,WAAO;AAAA,EACV;AAED,WAAS,cAAc,OAAO,KAAK,SAAS,KAAK;AAC7C,QAAI,SAAS,KAAK,OAAO,KAAK,QAAQ,OAAO,WAAU,CAAE;AAEzD,QAAI,YAAY,SAAS,cAAc,KAAK;AAC5C,cAAU,YAAY,OAAO;AAE7B,SAAK,QAAQ,UAAU,WAAW,GAAG;AAErC,WAAO,MAAM;AAAA,EAChB;AAED,WAAS,KAAK,OAAO,KAAK,IAAI;AAE1B,QAAI,SAAS,SAAS,cAAc,KAAK;AACzC,WAAO,KAAK;AAGZ,QAAI,cAAc,MAAM;AACxB,WAAO,eAAe,gBAAgB,KAAK;AACvC,aAAO,YAAY,WAAW;AAC9B,oBAAc,MAAM;AAAA,IACvB;AAED,UAAM,WAAW,aAAa,QAAQ,GAAG;AAEzC,WAAO;AAAA,EACV;AAED,WAAS,OAAO,SAAS;AAErB,QAAI,QAAQ,YAAY;AAEpB,aAAO,QAAQ,YAAY;AACvB,gBAAQ,WAAW,aAAa,QAAQ,YAAY,OAAO;AAAA,MAC9D;AAGD,cAAQ,WAAW,YAAY,OAAO;AAAA,IACzC;AAAA,EACJ;AA+BD,WAAS,KAAK,KAAK,SAAS,UAAU,KAAK;AAEvC,QAAI,eAAe,KAAK,SAAU,WAAW;AACzC,gBAAU,UAAU,kBAAkB,SAAS,KAAK,GAAG;AAAA,IACnE,CAAS;AAED,4BAAa,IAAI,qBAAqB,GAAG;AACzC,QAAI,SAAS,IAAI,UAAU,GAAG;AAC9B,QAAI,aAAa,IAAI,eAAe,GAAG;AAGvC,QAAI,KAAK,QAAQ,SAAS,QAAQ;AAIlC,eAAW,KAAK,QAAQ,SAAUC,MAAK;AACnC,UAAIA,KAAI,WAAW;AACf,QAAAA,KAAI,UAAU,IAAI,KAAK,OAAO,aAAa;AAAA,MAC9C;AACD,UAAI,aAAaA,MAAK,mBAAmB;AAAA,IACrD,CAAS;AAGD,QAAI,SAAS,cAAc,GAAG;AAC1B,iBAAW,SAAS,UAAU,GAAG,SAAS,WAAW;AAAA,IACjE,OAAe;AACH,eAAS,UAAU;IACtB;AAAA,EACJ;AASD,WAAS,SAAS,YAAY;AAE1B,WAAO,WAAY;AACf,iBAAW,MAAM,QAAQ,SAAU,MAAM;AACrC,aAAK,KAAI;AAAA,MACzB,CAAa;AAED,iBAAW,KAAK,QAAQ,SAAU,KAAK;AACnC,YAAI,IAAI,WAAW;AACf,cAAI,UAAU,OAAO,KAAK,OAAO,aAAa;AAAA,QACjD;AACD,YAAI,aAAa,KAAK,kBAAkB;AAAA,MACxD,CAAa;AAAA,IACJ;AAAA,EACJ;AAED,WAAS,mCAAmC,qBAAqB,SAAS;AACtE,UAAM,UAAU,qBAAqB,mBAAmB;AACxD,QAAI,SAAS;AACT,YAAM,EAAE,aAAa,UAAS,IAAK;AACnC,8BAAwB,CAAC,oBAAoB,WAAW;AACxD,UAAI,uBAAuB;AACvB,sBAAc,aAAa,WAAW,OAAO;AAAA,MAC7D,OAAmB;AAEH,cAAM,kBAAkB,UAAU;AAClC,cAAM,kBAAkB,IAAI,MAAO;AACnC,wBAAgB,SAAS,aAAa,YAAY,YAAY,MAAM;AACpE,wBAAgB,OAAO,WAAW,CAAC;AACnC,wBAAgB,eAAgB;AAEhC,eAAO,QAAQ,WAAW,CAAC,GAAG;AAC1B,0BAAgB,aAAa,QAAQ,WAAW,CAAC,GAAG,SAAS;AAAA,QAChE;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAED,WAAS,qBAAqB,qBAAqB;AAE/C,UAAM,oBAAoB,MAAM,mBAAmB;AACnD,UAAM,WAAW,SAAS;AAAA,MACtB;AAAA,MACA,WAAW;AAAA,IACd;AACD,QAAI,cAAc;AAClB,WAAQ,cAAc,SAAS,YAAa;AACxC,UAAI,YAAY,gBAAgB,mBAAmB;AAC/C;AAAA,MACH;AAAA,IACJ;AAED,QAAI,CAAC,aAAa;AACd,aAAO;AAAA,IACV;AAGD,UAAM,kBAAkB,OAAO,mBAAmB;AAClD,QAAI,YAAY;AAChB,WAAQ,YAAY,SAAS,YAAa;AACtC,UAAI,UAAU,gBAAgB,iBAAiB;AAC3C;AAAA,MACH;AAAA,IACJ;AAED,WAAO,YAAY,EAAE,aAAa,UAAW,IAAG;AAAA,EACnD;AACL,GAAI;;;;;;;AC9TJ,KAAC,SAAS,iCAAiC,MAAM,SAAS;AAExD,aAAA,UAAiB,QAAS;AAAA,IAO3B,GAAE,MAAM,MAAM;AACf;AAAA;AAAA,SAAiB,MAAM;AAGb,cAAI,sBAAsB,CAAE;AAI5B,WAAC,MAAM;AAEN,gCAAoB,IAAI,CAACC,UAAS,eAAe;AAChD,uBAAQ,OAAO,YAAY;AAC1B,oBAAG,oBAAoB,EAAE,YAAY,GAAG,KAAK,CAAC,oBAAoB,EAAEA,UAAS,GAAG,GAAG;AAClF,yBAAO,eAAeA,UAAS,KAAK,EAAE,YAAY,MAAM,KAAK,WAAW,GAAG,GAAG;AAAA,gBAC5F;AAAA,cACA;AAAA,YACY;AAAA,UACZ,GAAc;AAGJ,WAAC,MAAM;AACN,gCAAoB,IAAI,CAAC,KAAK,SAAU,OAAO,UAAU,eAAe,KAAK,KAAK,IAAI;AAAA,UACjG,GAAc;AAGJ,WAAC,MAAM;AAEN,gCAAoB,IAAI,CAACA,aAAY;AACpC,kBAAG,OAAO,WAAW,eAAe,OAAO,aAAa;AACvD,uBAAO,eAAeA,UAAS,OAAO,aAAa,EAAE,OAAO,UAAU;AAAA,cACnF;AACY,qBAAO,eAAeA,UAAS,cAAc,EAAE,OAAO,MAAM;AAAA,YAC5D;AAAA,UACZ,GAAc;AAGd,cAAI,sBAAsB,CAAE;AAAA,UAC5B;AAAA;AAAA;AAGA,8BAAoB,EAAE,mBAAmB;AACpB,8BAAoB,EAAE,qBAAqB;AAAA;AAAA,YACzC,wBAAwB;AAAA;AAAA,cAAqB;AAAA;AAAA;AAAA,YAC7C,mBAAmB;AAAA;AAAA,cAAqB;AAAA;AAAA;AAAA,YACxC,eAAe;AAAA;AAAA,cAAqB;AAAA;AAAA;AAAA,UAC3D,CAAsB;AACtB,cAAI,YAAkD,SAAU,SAAS,YAAY,GAAG,WAAW;AAC/F,qBAAS,MAAM,OAAO;AAAE,qBAAO,iBAAiB,IAAI,QAAQ,IAAI,EAAE,SAAU,SAAS;AAAE,wBAAQ,KAAK;AAAA,cAAI,CAAA;AAAA,YAAE;AAC1G,mBAAO,KAAK,MAAM,IAAI,UAAU,SAAU,SAAS,QAAQ;AACvD,uBAAS,UAAU,OAAO;AAAE,oBAAI;AAAE,uBAAK,UAAU,KAAK,KAAK,CAAC;AAAA,gBAAI,SAAQ,GAAG;AAAE,yBAAO,CAAC;AAAA,gBAAI;AAAA,cAAA;AACzF,uBAAS,SAAS,OAAO;AAAE,oBAAI;AAAE,uBAAK,UAAU,OAAO,EAAE,KAAK,CAAC;AAAA,gBAAI,SAAQ,GAAG;AAAE,yBAAO,CAAC;AAAA,gBAAI;AAAA,cAAA;AAC5F,uBAAS,KAAK,QAAQ;AAAE,uBAAO,OAAO,QAAQ,OAAO,KAAK,IAAI,MAAM,OAAO,KAAK,EAAE,KAAK,WAAW,QAAQ;AAAA,cAAE;AAC5G,oBAAM,YAAY,UAAU,MAAM,SAAS,cAAc,CAAA,CAAE,GAAG,MAAM;AAAA,YAC5E,CAAK;AAAA,UACJ;AACD,cAAI,cAAsD,SAAU,SAAS,MAAM;AAC/E,gBAAI,IAAI,EAAE,OAAO,GAAG,MAAM,WAAW;AAAE,kBAAI,EAAE,CAAC,IAAI,EAAG,OAAM,EAAE,CAAC;AAAG,qBAAO,EAAE,CAAC;AAAA,YAAE,GAAI,MAAM,CAAA,GAAI,KAAK,CAAE,EAAA,GAAI,GAAG,GAAG,GAAG;AAC/G,mBAAO,IAAI,EAAE,MAAM,KAAK,CAAC,GAAG,SAAS,KAAK,CAAC,GAAG,UAAU,KAAK,CAAC,EAAG,GAAE,OAAO,WAAW,eAAe,EAAE,OAAO,QAAQ,IAAI,WAAW;AAAE,qBAAO;AAAA,YAAK,IAAK;AACvJ,qBAAS,KAAK,GAAG;AAAE,qBAAO,SAAU,GAAG;AAAE,uBAAO,KAAK,CAAC,GAAG,CAAC,CAAC;AAAA,cAAE;AAAA,YAAG;AAChE,qBAAS,KAAK,IAAI;AACd,kBAAI,EAAG,OAAM,IAAI,UAAU,iCAAiC;AAC5D,qBAAO,MAAM,IAAI,GAAG,GAAG,CAAC,MAAM,IAAI,KAAK,EAAG,KAAI;AAC1C,oBAAI,IAAI,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,IAAI,EAAE,QAAQ,IAAI,GAAG,CAAC,IAAI,EAAE,OAAO,OAAO,IAAI,EAAE,QAAQ,MAAM,EAAE,KAAK,CAAC,GAAG,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,GAAG,GAAG,CAAC,CAAC,GAAG,KAAM,QAAO;AAC3J,oBAAI,IAAI,GAAG,EAAG,MAAK,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,KAAK;AACtC,wBAAQ,GAAG,CAAC,GAAC;AAAA,kBACT,KAAK;AAAA,kBAAG,KAAK;AAAG,wBAAI;AAAI;AAAA,kBACxB,KAAK;AAAG,sBAAE;AAAS,2BAAO,EAAE,OAAO,GAAG,CAAC,GAAG,MAAM,MAAO;AAAA,kBACvD,KAAK;AAAG,sBAAE;AAAS,wBAAI,GAAG,CAAC;AAAG,yBAAK,CAAC,CAAC;AAAG;AAAA,kBACxC,KAAK;AAAG,yBAAK,EAAE,IAAI;AAAO,sBAAE,KAAK,IAAG;AAAI;AAAA,kBACxC;AACI,wBAAI,EAAE,IAAI,EAAE,MAAM,IAAI,EAAE,SAAS,KAAK,EAAE,EAAE,SAAS,CAAC,OAAO,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,MAAM,IAAI;AAAE,0BAAI;AAAG;AAAA,oBAAS;AAC1G,wBAAI,GAAG,CAAC,MAAM,MAAM,CAAC,KAAM,GAAG,CAAC,IAAI,EAAE,CAAC,KAAK,GAAG,CAAC,IAAI,EAAE,CAAC,IAAK;AAAE,wBAAE,QAAQ,GAAG,CAAC;AAAG;AAAA,oBAAM;AACpF,wBAAI,GAAG,CAAC,MAAM,KAAK,EAAE,QAAQ,EAAE,CAAC,GAAG;AAAE,wBAAE,QAAQ,EAAE,CAAC;AAAG,0BAAI;AAAI;AAAA,oBAAM;AACnE,wBAAI,KAAK,EAAE,QAAQ,EAAE,CAAC,GAAG;AAAE,wBAAE,QAAQ,EAAE,CAAC;AAAG,wBAAE,IAAI,KAAK,EAAE;AAAG;AAAA,oBAAM;AACjE,wBAAI,EAAE,CAAC,EAAG,GAAE,IAAI,IAAK;AACrB,sBAAE,KAAK,IAAG;AAAI;AAAA,gBAClC;AACY,qBAAK,KAAK,KAAK,SAAS,CAAC;AAAA,cAC5B,SAAQ,GAAG;AAAE,qBAAK,CAAC,GAAG,CAAC;AAAG,oBAAI;AAAA,cAAI,UAAA;AAAW,oBAAI,IAAI;AAAA,cAAE;AACxD,kBAAI,GAAG,CAAC,IAAI,EAAG,OAAM,GAAG,CAAC;AAAG,qBAAO,EAAE,OAAO,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,QAAQ,MAAM,KAAM;AAAA,YACxF;AAAA,UACC;AACD,cAAI,aAAa;AAAA,WAAoB,WAAY;AAC7C,qBAAS,UAAU;AACf,mBAAK,OAAO,WAAW,QAAQ;AAAA,YACvC;AACI,oBAAQ,UAAU,MAAM,SAAU,GAAG;AAAA,YAKpC;AACD,mBAAO;AAAA,UACX,KAAO;AAMP,cAAI,gBAAgB,SAAU,SAAS;AACnC,mBAAO,mBAAmB,oBACnB,mBAAmB,qBACnB,mBAAmB;AAAA,UAC7B;AACD,cAAI,0BAA0B,CAAC,SAAS,UAAU,UAAU;AAM5D,cAAI,sBAAsB,SAAU,UAAU;AAC1C,mBAAO,wBAAwB,IAAI,SAAU,GAAG;AAAE,qBAAO,GAAG,OAAO,CAAC,EAAE,OAAO,YAAY,EAAE;AAAA,YAAE,CAAE,EAAE,KAAK,GAAG;AAAA,UAC5G;AAMD,mBAAS,uBAAuB,SAAS,UAAU;AAI/C,gBAAI,cAAc,QAAQ;AAC1B,gBAAI,eAAe,SAAS,UAAU,CAAC;AACvC,gBAAI,aAAa;AACjB,gBAAI,cAAc,YAAY,YAAY,GAAG;AAC7C,gBAAI,cAAc,IAAI;AAElB,2BAAa,YAAY,UAAU,GAAG,WAAW;AAEjD,kBAAI,sBAAsB,aAAa,MAAM;AAC7C,kBAAI,kBAAkB,SAAS,kBAAkB,mBAAmB,EAAE,CAAC;AACvE,kBAAI,cAAc,eAAe,GAAG;AAChC,uBAAO;AAAA,cACnB;AAAA,YACA;AAEI,mBAAO,QAAQ,KAAK,cAAc,oBAAoB,SAAS,OAAO,cAAc,GAAG,CAAC,CAAC;AAAA,UAC7F;AAIA,cAAI;AAAA;AAAA,YAAwC,2BAAY;AACpD,uBAASC,0BAAyB;AAI9B,qBAAK,WAAW,SAAU,OAAO,SAAS,QAAQ;AAE9C,sBAAI,cAAc,QAAQ,KAAK,YAAa;AAC5C,sBAAI,gBAAgB,cAAc,gBAAgB,SAAS;AACvD,wBAAI,wBAAwB,MAAM,KAAK,QAAQ,KAAK,iBAAiB,oBAAoB,UAAU,OAAO,QAAQ,MAAM,WAAW,EAAE,OAAO,aAAa,IAAI,CAAC,CAAC,CAAC;AAChK,6BAAS,KAAK,GAAG,0BAA0B,uBAAuB,KAAK,wBAAwB,QAAQ,MAAM;AACzG,0BAAI,YAAY,wBAAwB,EAAE;AAC1C,0BAAI,qBAAqB,oBAAoB,UAAU,YAAY,MAAM;AACrE,+BAAO;AAAA,sBAC/B;AAAA,oBACA;AAIgB,wBAAI,gBAAgB,YAAY;AAC5B,0BAAI,sBAAsB,QAAQ,KAAK,cAAc,eAAe,OAAO,QAAQ,MAAM,mBAAmB,CAAC;AAC7G,0BAAI,+BAA+B,oBAAoB,oBAAoB,UAAU,SAAS;AAC1F,+BAAO;AAAA,sBAC/B;AAAA,oBACA;AACgB,2BAAO;AAAA,kBACvB;AAEY,yBAAO,QAAQ,UAAU,QAAQ,UAAU,SAAS,SAAS,MAAM,MAAM;AAAA,gBAC5E;AAID,qBAAK,eAAe,SAAU,OAAO,SAAS,QAAQ;AAClD,sBAAI,CAAC,OAAO;AACR,2BAAO;AAAA,kBACvB;AACY,sBAAI,OAAO,KAAK;AACZ,wBAAI,MAAM,SAAS,OAAO,GAAG;AAC7B,wBAAI,MAAM,SAAS,KAAK;AACpB,6BAAO;AAAA,oBAC3B;AAAA,kBACA;AACY,sBAAI,OAAO,KAAK;AACZ,wBAAI,MAAM,SAAS,OAAO,GAAG;AAC7B,wBAAI,MAAM,SAAS,KAAK;AACpB,6BAAO;AAAA,oBAC3B;AAAA,kBACA;AACY,yBAAO;AAAA,gBACV;AAID,qBAAK,UAAU,SAAU,OAAO,SAAS,QAAQ;AAC7C,sBAAI,CAAC,OAAO,OAAO;AACf,2BAAO;AAAA,kBACvB;AACY,sBAAI,eAAe,uBAAuB,SAAS,OAAO,KAAK;AAC/D,sBAAI,CAAC,cAAc;AACf,2BAAO;AAAA,kBACvB;AACY,yBAAQ,aAAa,UAAU;AAAA,gBAClC;AAID,qBAAK,QAAQ,SAAU,OAAO,SAAS,QAAQ;AAC3C,sBAAI,CAAC,OAAO;AACR,2BAAO;AAAA,kBACvB;AACY,sBAAI,MAAM,WAAW,KAAK;AAC1B,sBAAI,MAAM,GAAG,GAAG;AACZ,2BAAO;AAAA,kBACvB;AACY,sBAAI,OAAO,KAAK;AACZ,wBAAI,MAAM,WAAW,OAAO,GAAG;AAC/B,wBAAI,MAAM,KAAK;AACX,6BAAO;AAAA,oBAC3B;AAAA,kBACA;AACY,sBAAI,OAAO,KAAK;AACZ,wBAAI,MAAM,WAAW,OAAO,GAAG;AAC/B,wBAAI,MAAM,KAAK;AACX,6BAAO;AAAA,oBAC3B;AAAA,kBACA;AACY,yBAAO;AAAA,gBACV;AAID,qBAAK,QAAQ,SAAU,OAAO,SAAS,QAAQ;AAC3C,sBAAI,CAAC,SAAS,CAAC,OAAO,SAAS;AAC3B,2BAAO;AAAA,kBACvB;AACY,sBAAI,IAAI,IAAI,OAAO,OAAO,OAAO;AACjC,yBAAO,EAAE,KAAK,KAAK;AAAA,gBACtB;AAID,qBAAK,QAAQ,SAAU,OAAO,SAAS,QAAQ;AAC3C,sBAAI,CAAC,OAAO;AACR,2BAAO;AAAA,kBACvB;AAKY,sBAAI,IAAI;AACR,yBAAO,EAAE,KAAK,KAAK;AAAA,gBACtB;AAID,qBAAK,aAAa,SAAU,OAAO,SAAS,QAAQ;AAChD,sBAAI,CAAC,OAAO;AACR,2BAAO;AAAA,kBACvB;AAKY,sBAAI,aAAa,KAAK,KAAK,GAAG;AAC1B,2BAAO;AAAA,kBACvB;AACY,sBAAI,SAAS,GAAG,SAAS,GAAG,QAAQ,OAAO,GAAG;AAC9C,0BAAQ,MAAM,QAAQ,OAAO,EAAE;AAE/B,sBAAI,MAAM,SAAS,MAAM,MAAM,SAAS,IAAI;AACxC,2BAAO;AAAA,kBACvB;AACY,uBAAK,IAAI,MAAM,SAAS,GAAG,KAAK,GAAG,KAAK;AACpC,6BAAS,MAAM,OAAO,CAAC;AACvB,6BAAS,SAAS,QAAQ,EAAE;AAC5B,wBAAI,OAAO;AACP,2BAAK,UAAU,KAAK,GAAG;AACnB,kCAAU;AAAA,sBAClC;AAAA,oBACA;AACgB,8BAAU;AACV,4BAAQ,CAAC;AAAA,kBACzB;AACY,yBAAQ,SAAS,OAAQ;AAAA,gBAC5B;AAID,qBAAK,MAAM,SAAU,OAAO,SAAS,QAAQ;AACzC,sBAAI,CAAC,OAAO;AACR,2BAAO;AAAA,kBACvB;AACY,sBAAI,iBAAiB,MAAM,YAAa;AAExC,yBAAO,eAAe,QAAQ,SAAS,IAAI,MACpC,eAAe,QAAQ,UAAU,IAAI,MACrC,eAAe,QAAQ,QAAQ,IAAI;AAAA,gBAC7C;AAID,qBAAK,QAAQ,SAAU,OAAO,SAAS,QAAQ;AAC3C,sBAAI,CAAC,OAAO;AACR,2BAAO;AAAA,kBACvB;AAEY,sBAAI,uBAAuB;AAC3B,sBAAI,qBAAqB,KAAK,KAAK,GAAG;AAClC,2BAAO;AAAA,kBACvB;AACY,sBAAI,IAAI;AACR,yBAAO,EAAE,KAAK,KAAK;AAAA,gBACtB;AAID,qBAAK,SAAS,SAAU,OAAO,SAAS,QAAQ;AAC5C,sBAAI,CAAC,OAAO;AACR,2BAAO;AAAA,kBACvB;AAEY,sBAAI,iBAAiB,OAAO,iBAAiB,MAAM,GAAG;AACtD,sBAAI,SAAS,CAAE;AACf,2BAAS,KAAK,GAAG,mBAAmB,gBAAgB,KAAK,iBAAiB,QAAQ,MAAM;AACpF,wBAAI,gBAAgB,iBAAiB,EAAE;AACvC,wBAAI,YAAY,cAAc,OAAO,CAAC;AACtC,wBAAI,eAAe,uBAAuB,SAAS,aAAa;AAChE,wBAAI,WAAW,QAAQ,gBAAgB,aAAa,KAAK;AACzD,wBAAI,CAAC,UAAU;AACX;AAAA,oBACpB;AACgB,wBAAI,wBAAwB,qBACvB,aAAa,SAAS,cAAc,aAAa,SAAS,UAAU;AACrE,6BAAO,SAAS,IAAI,aAAa,UAAU,aAAa,QAAQ;AAAA,oBACpF,OACqB;AACD,6BAAO,SAAS,IAAI,aAAa;AAAA,oBACrD;AAAA,kBACA;AACY,sBAAI,MAAM,OAAO,KAAK;AACtB,sBAAI,gBAAgB,CAAE;AACtB,2BAAS,aAAa,QAAQ;AAC1B,wBAAI,eAAe,mBAAmB,SAAS,IAAI,MAAM,mBAAmB,OAAO,SAAS,CAAC;AAC7F,kCAAc,KAAK,YAAY;AAAA,kBAC/C;AACY,sBAAI,UAAU,cAAc,KAAK,GAAG;AACpC,yBAAO,IAAI,QAAQ,SAAU,IAAI,QAAQ;AACrC,wBAAI,UAAU,IAAI,eAAgB;AAClC,wBAAI,OAAO,QAAQ,OAAO,KAAK,YAAa,MAAK,QAAQ;AACrD,0BAAI,WAAW,IAAI,SAAU;AAC7B,+BAASC,cAAa,QAAQ;AAC1B,iCAAS,OAAOA,YAAW,OAAOA,UAAS,CAAC;AAAA,sBACpE;AACoB,8BAAQ,KAAK,QAAQ,GAAG;AACxB,8BAAQ,iBAAiB,gBAAgB,mCAAmC;AAC5E,8BAAQ,KAAK,OAAO;AAAA,oBACxC,OACqB;AACD,8BAAQ,KAAK,OAAO,MAAM,MAAM,OAAO;AACvC,8BAAQ,KAAM;AAAA,oBAClC;AACgB,4BAAQ,SAAS,SAAU,GAAG;AAC1B,0BAAI,QAAQ,UAAU,OAAO,QAAQ,SAAS,KAAK;AAC/C,4BAAI,OAAO,KAAK,MAAM,QAAQ,YAAY;AAC1C,2BAAG,IAAI;AAAA,sBAC/B,OACyB;AACD,+BAAO;AAAA,0BACH,QAAQ,QAAQ;AAAA,0BAChB,YAAY,QAAQ;AAAA,0BACpB,MAAM,QAAQ;AAAA,wBAC1C,CAAyB;AAAA,sBACzB;AAAA,oBACiB;AACD,4BAAQ,UAAU,SAAU,GAAG;AAC3B,6BAAO;AAAA,wBACH,QAAQ,QAAQ;AAAA,wBAChB,YAAY,QAAQ;AAAA,wBACpB,MAAM,QAAQ;AAAA,sBACtC,CAAqB;AAAA,oBACJ;AAAA,kBACjB,CAAa;AAAA,gBACJ;AAAA,cACT;AACI,qBAAOD;AAAA,YACX;;AAKA,cAAI;AAAA;AAAA,YAAmC,WAAY;AAC/C,uBAASE,mBAAkB,QAAQ;AAC/B,oBAAI,QAAQ;AAIZ,qBAAK,YAAY,CAAE;AAInB,qBAAK,aAAa,CAAE;AAIpB,qBAAK,cAAc,CAAE;AAIrB,qBAAK,eAAe,CAAE;AAItB,qBAAK,aAAa,CAAE;AAIpB,qBAAK,aAAa,CAAE;AAIpB,qBAAK,aAAa,CAAE;AAIpB,qBAAK,cAAc,CAAE;AAIrB,qBAAK,UAAU,CAAE;AAIjB,qBAAK,WAAW;AAIhB,qBAAK,oBAAoB;AAOzB,qBAAK,eAAe,SAAU,MAAM,UAAU;AAAE,yBAAO,UAAU,OAAO,QAAQ,QAAQ,WAAY;AAChG,wBAAI,SAAS,qBAAqB;AAClC,2BAAO,YAAY,MAAM,SAAU,IAAI;AACnC,8BAAQ,GAAG,OAAK;AAAA,wBACZ,KAAK;AACD,8BAAI,EAAE,gBAAgB,kBAAkB;AACpC,kCAAM,IAAI,MAAM,sDAAsD;AAAA,0BAClG;AACwB,oCAAU,KAAK,cAAc,IAAI;AACjC,gDAAsB,KAAK,WAAW,OAAO;AAC7C,+BAAK,CAAC;AACN,8BAAI,GAAI,QAAO,CAAC,GAAa,CAAC;AAC9B,iCAAO,CAAC,GAAa,oBAAoB,QAAW,QAAQ,CAAC;AAAA,wBACjE,KAAK;AACD,+BAAM,GAAG;AACT,6BAAG,QAAQ;AAAA,wBACf,KAAK;AAAG,iCAAO,CAAC,GAAc,EAAE;AAAA,sBACpD;AAAA,oBACA,CAAa;AAAA,kBACJ,CAAA;AAAA,gBAAI;AAOL,qBAAK,gBAAgB,SAAU,OAAO,UAAU;AAAE,yBAAO,UAAU,OAAO,QAAQ,QAAQ,WAAY;AAClG,wBAAI,UAAU,sBAAsB;AACpC,2BAAO,YAAY,MAAM,SAAU,IAAI;AACnC,8BAAQ,GAAG,OAAK;AAAA,wBACZ,KAAK;AACD,qCAAW,KAAK,cAAc,KAAK;AACnC,iDAAuB,KAAK,YAAY,QAAQ;AAChD,+BAAK,CAAC;AACN,8BAAI,GAAI,QAAO,CAAC,GAAa,CAAC;AAC9B,iCAAO,CAAC,GAAa,qBAAqB,QAAW,QAAQ,CAAC;AAAA,wBAClE,KAAK;AACD,+BAAM,GAAG;AACT,6BAAG,QAAQ;AAAA,wBACf,KAAK;AAAG,iCAAO,CAAC,GAAc,EAAE;AAAA,sBACpD;AAAA,oBACA,CAAa;AAAA,kBACJ,CAAA;AAAA,gBAAI;AAML,qBAAK,cAAc,SAAU,aAAa;AACtC,8BAAY,eAAgB;AAC5B,8BAAY,yBAA0B;AAAA,gBACzC;AASD,qBAAK,kBAAkB,SAAU,MAAM,SAAS,aAAa;AACzD,sBAAI,EAAE,gBAAgB,kBAAkB;AACpC,0BAAM,IAAI,MAAM,yDAAyD;AAAA,kBACzF;AACY,sBAAI,SAAS;AACT,wBAAI,aAAa;AACb,4BAAM,gBAAgB,MAAM,WAAW;AAAA,oBAC3D;AAAA,kBACA,OACiB;AACD,0BAAM,kBAAkB,IAAI;AAAA,kBAC5C;AAAA,gBACS;AAUD,qBAAK,kBAAkB,SAAU,MAAM,aAAa;AAChD,sBAAI,EAAE,gBAAgB,kBAAkB;AACpC,0BAAM,IAAI,MAAM,yDAAyD;AAAA,kBACzF;AACY,sBAAI,WAAW,IAAI,YAAY,UAAU,WAAW;AACpD,sBAAI,KAAK,cAAc,QAAQ,GAAG;AAG9B,wBAAI,YAAY,YAAY;AAC5B,wBAAI,iBAAiB;AACrB,wBAAI,oBAAoB,KAAK;AAC7B,wBAAI,WAAW;AACX,0BAAI,SAAS,UAAU,aAAa,MAAM;AAE1C,0BAAI,QAAQ;AACR,yCAAiB,SAAS,cAAc,OAAO;AAC/C,uCAAe,OAAO;AACtB,uCAAe,OAAO;AACtB,uCAAe,QAAQ,UAAU,aAAa,OAAO;AACrD,6BAAK,YAAY,cAAc;AAAA,sBACvD;AACoB,0BAAI,aAAa,UAAU,aAAa,YAAY;AACpD,0BAAI,YAAY;AACZ,6BAAK,SAAS;AAAA,sBACtC;AAAA,oBACA;AACgB,wBAAI;AACA,2BAAK,OAAQ;AAAA,oBACjC,UACwB;AACJ,0BAAI,gBAAgB;AAEhB,6BAAK,YAAY,cAAc;AAAA,sBACvD;AACoB,2BAAK,SAAS;AAAA,oBAClC;AAAA,kBACA;AAAA,gBACS;AAKD,qBAAK,oBAAoB,SAAU,MAAM;AACrC,sBAAI,EAAE,gBAAgB,kBAAkB;AACpC,0BAAM,IAAI,MAAM,2DAA2D;AAAA,kBAC3F;AACY,sBAAI,UAAU,MAAM,cAAc,IAAI;AACtC,sBAAI,gBAAgB,MAAM,WAAW,OAAO;AAC5C,sBAAI,sBAAsB,kBAAkB,QAAQ,kBAAkB,SAAS,SAAS,cAAc,KAAK,SAAU,KAAK;AAAE,2BAAO,MAAM,QAAQ,GAAG;AAAA,mBAAI;AACxJ,sBAAI,qBAAqB;AACrB,wBAAI,eAAe,MAAM,aAAa,mBAAmB;AACzD,wBAAI,wBAAwB,aAAa;AACrC,mCAAa,MAAO;AAAA,oBACxC;AAAA,kBACA;AAAA,gBACS;AASD,qBAAK,UAAU,SAAU,MAAM,aAAa,UAAU;AAClD,sBAAI,gBAAgB,QAAQ;AAAE,kCAAc;AAAA,kBAAK;AACjD,sBAAI,EAAE,gBAAgB,kBAAkB;AACpC,0BAAM,IAAI,MAAM,iDAAiD;AAAA,kBACjF;AACY,sBAAI,aAAa;AACb,0BAAM,aAAa,MAAM,QAAQ;AAAA,kBACjD;AACY,sBAAI,UAAU,MAAM,cAAc,IAAI;AACtC,sBAAI,gBAAgB,MAAM,WAAW,OAAO;AAC5C,sBAAI,iBAAiB,kBAAkB,QAAQ,kBAAkB,SAAS,SAAS,cAAc,KAAK,SAAU,KAAK;AAAE,2BAAO,MAAM,QAAQ,GAAG;AAAA,kBAAI,CAAA,OAAO;AAC1J,yBAAO,CAAC;AAAA,gBACX;AASD,qBAAK,eAAe,SAAU,OAAO,aAAa,UAAU;AACxD,sBAAI,gBAAgB,QAAQ;AAAE,kCAAc;AAAA,kBAAK;AACjD,sBAAI,aAAa;AACb,0BAAM,cAAc,OAAO,QAAQ;AAAA,kBACnD;AACY,sBAAI,WAAW,MAAM,cAAc,KAAK;AACxC,yBAAO,MAAM,QAAQ,QAAQ,MAAM;AAAA,gBACtC;AAID,qBAAK,UAAU;AAAA,kBACX,MAAM,SAAS;AAAA,kBACf,OAAO;AAAA,kBACP,eAAe;AAAA,gBAClB;AAID,qBAAK,8BAA8B;AAInC,qBAAK,mCAAmC;AAIxC,qBAAK,gCAAgC;AAIrC,qBAAK,qCAAqC;AAI1C,qBAAK,gCAAgC;AAIrC,qBAAK,qCAAqC;AAC1C,qBAAK,SAAS,UAAU;AAAA,cAChC;AAOI,cAAAA,mBAAkB,UAAU,cAAc,SAAUL,OAAM,UAAU;AAChE,oBAAI,KAAK,UAAUA,KAAI,GAAG;AAGtB;AAAA,gBACZ;AACQ,qBAAK,OAAO,IAAI,2BAA2BA,KAAI;AAC/C,qBAAK,UAAUA,KAAI,IAAI;AAAA,cAC1B;AAID,cAAAK,mBAAkB,UAAU,kBAAkB,WAAY;AACtD,oBAAI,MAAM,IAAI,uBAAwB;AAEtC,qBAAK,YAAY,YAAY,IAAI,QAAQ;AAEzC,qBAAK,YAAY,UAAU,IAAI,YAAY;AAC3C,qBAAK,YAAY,aAAa,IAAI,YAAY;AAC9C,qBAAK,YAAY,aAAa,IAAI,YAAY;AAE9C,qBAAK,YAAY,WAAW,IAAI,OAAO;AAEvC,qBAAK,YAAY,SAAS,IAAI,KAAK;AAEnC,qBAAK,YAAY,SAAS,IAAI,KAAK;AAEnC,qBAAK,YAAY,cAAc,IAAI,UAAU;AAE7C,qBAAK,YAAY,SAAS,IAAI,KAAK;AAEnC,qBAAK,YAAY,OAAO,IAAI,GAAG;AAE/B,qBAAK,YAAY,SAAS,IAAI,KAAK;AAEnC,qBAAK,YAAY,UAAU,IAAI,MAAM;AAAA,cACxC;AAMD,cAAAA,mBAAkB,UAAU,eAAe,SAAU,MAAM,IAAI;AAE3D,oBAAI,4BAA4B,MAAM,KAAK,KAAK,iBAAiB,YAAY,CAAC;AAC9E,yBAAS,KAAK,GAAG,8BAA8B,2BAA2B,KAAK,4BAA4B,QAAQ,MAAM;AACrH,sBAAI,OAAO,4BAA4B,EAAE;AACzC,sBAAI,OAAO,SAAS,eAAe,KAAK,aAAa,MAAM,CAAC;AAC5D,sBAAI,gBAAgB,iBAAiB;AACjC,uBAAG,KAAK,MAAM,MAAM,IAAI;AAAA,kBACxC;AAAA,gBACA;AAEQ,oBAAI,QAAQ,MAAM,KAAK,KAAK,iBAAiB,MAAM,CAAC;AACpD,oBAAI,gBAAgB,iBAAiB;AAGjC,wBAAM,KAAK,IAAI;AAAA,gBAC3B;AAEQ,oBAAI,iBAAkB,gBAAgB,UAAW,KAAK,QAAQ,MAAM,IAAI;AACxE,oBAAI,gBAAgB;AAChB,wBAAM,KAAK,cAAc;AAAA,gBACrC;AACQ,yBAAS,KAAK,GAAG,UAAU,OAAO,KAAK,QAAQ,QAAQ,MAAM;AACzD,sBAAI,OAAO,QAAQ,EAAE;AACrB,sBAAI,8BAA8B,MAAM,KAAK,KAAK,iBAAiB,mBAAmB,CAAC;AACvF,2BAAS,KAAK,GAAG,8BAA8B,6BAA6B,KAAK,4BAA4B,QAAQ,MAAM;AACvH,wBAAI,OAAO,4BAA4B,EAAE;AACzC,uBAAG,KAAK,MAAM,MAAM,IAAI;AAAA,kBACxC;AAAA,gBACA;AAAA,cACK;AACD,cAAAA,mBAAkB,UAAU,4BAA4B,SAAU,MAAM,MAAM;AAC1E,oBAAI,IAAI;AACR,oBAAI;AACJ,oBAAI,SAAS,KAAK,cAAc,IAAI;AACpC,oBAAI,aAAa,MAAM,KAAK,KAAK,YAAY,MAAM,OAAO,QAAQ,OAAO,SAAS,KAAM,GAAG,MAAM,IAAI;AACrG,oBAAI,eAAe,KAAK,aAAa,iBAAiB;AACtD,oBAAI,CAAC;AACD;AACJ,oBAAI,SAAS,KAAK,UAAU,YAAY,OAAO,QAAQ,OAAO,SAAS,KAAM,UAAU,YAAY,IAAI,CAAA;AACvG,oBAAI,MAAM,QAAQ,IAAI,IAAI,GAAG;AACzB,wBAAM,KAAK,IAAI;AAAA,gBAC3B,OACa;AACD,uBAAK,OAAO,IAAI,kDAAkD,MAAM,IAAI;AAAA,gBACxF;AAAA,cACK;AACD,cAAAA,mBAAkB,UAAU,8BAA8B,SAAU,MAAM,MAAM;AAC5E,oBAAI,SAAS,KAAK,cAAc,IAAI;AACpC,oBAAI,YAAY,KAAK,WAAW,MAAM;AACtC,oBAAI,CAAC;AACD;AACJ,oBAAI,eAAe,KAAK,aAAa,iBAAiB;AACtD,oBAAI,CAAC;AACD;AACJ,oBAAI,QAAQ,UAAU,YAAY;AAClC,oBAAI,CAAC,OAAO;AACR;AAAA,gBACZ;AACQ,oBAAI,QAAQ,MAAM,QAAQ,IAAI;AAC9B,oBAAI,SAAS,GAAG;AACZ,wBAAM,OAAO,OAAO,CAAC;AAAA,gBACjC,OACa;AACD,uBAAK,OAAO,IAAI,mDAAmD,MAAM,IAAI;AAAA,gBACzF;AAAA,cACK;AAKD,cAAAA,mBAAkB,UAAU,kBAAkB,SAAU,YAAY;AAChE,oBAAI,aAAa,CAAE;AACnB,oBAAI,sBAAsB,CAAE;AAC5B,oBAAI,MAAM,YAAY;AACtB,yBAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AACxC,sBAAI,IAAI,WAAW,CAAC;AACpB,sBAAI,EAAE,KAAK,QAAQ,WAAW,MAAM,GAAG;AACnC,wBAAI,MAAM,EAAE,KAAK,OAAO,GAAG;AAC3B,wCAAoB,GAAG,IAAI,EAAE;AAAA,kBAC7C;AAAA,gBACA;AACQ,oBAAI,UAAU,SAAUC,MAAK;AACzB,sBAAIA,KAAI,QAAQ,GAAG,MAAM,IAAI;AACzB,wBAAI,aAAa,OAAO,KAAK,mBAAmB,EAAE,OAAO,SAAU,GAAG;AAClE,6BAAQ,MAAMA,QAAS,EAAE,QAAQA,IAAG,MAAM;AAAA,oBAC9D,CAAiB;AACD,wBAAI,YAAY;AAAA,sBACZ,OAAO,oBAAoBA,IAAG;AAAA,sBAC9B,QAAQ,CAAA;AAAA,oBACX;AACD,wBAAI,QAAQA,OAAM,KAAK;AACvB,6BAASC,KAAI,GAAGA,KAAI,WAAW,QAAQA,MAAK;AACxC,0BAAI,SAAS,oBAAoB,WAAWA,EAAC,CAAC;AAC9C,0BAAI,OAAO,WAAWA,EAAC,EAAE,OAAO,IAAI;AACpC,gCAAU,OAAO,IAAI,IAAI;AAAA,oBAC7C;AACgB,+BAAWD,IAAG,IAAI;AAAA,kBAClC;AAAA,gBACS;AACD,yBAAS,OAAO,qBAAqB;AACjC,0BAAQ,GAAG;AAAA,gBACvB;AACQ,uBAAO;AAAA,cACV;AAID,cAAAD,mBAAkB,UAAU,QAAQ,WAAY;AAG5C,uBAAO,uCAAuC,QAAQ,SAAS,SAAU,GAAG;AACxE,sBAAI,IAAI,KAAK,OAAQ,IAAG,KAAK,GAAG,IAAI,KAAK,MAAM,IAAK,IAAI,IAAM;AAC9D,yBAAO,EAAE,SAAS,EAAE;AAAA,gBAChC,CAAS;AAAA,cACJ;AAKD,cAAAA,mBAAkB,UAAU,gBAAgB,SAAU,MAAM;AACxD,oBAAI,IAAI,KAAK,YAAY,OAAO,SAAU,GAAG;AACzC,yBAAO,EAAE,SAAS;AAAA,gBACrB,CAAA,EAAE,CAAC;AACJ,oBAAI,GAAG;AACH,yBAAO,EAAE;AAAA,gBACrB;AACQ,oBAAI,MAAM,KAAK,MAAO;AACtB,qBAAK,YAAY,KAAK;AAAA,kBAClB;AAAA,kBACA;AAAA,gBACZ,CAAS;AACD,qBAAK,aAAa,GAAG,IAAI;AACzB,uBAAO;AAAA,cACV;AAKD,cAAAA,mBAAkB,UAAU,wBAAwB,SAAU,SAAS;AACnE,oBAAI,gBAAgB,KAAK,WAAW,OAAO;AAC3C,oBAAI,CAAC,iBAAiB,cAAc,WAAW,GAAG;AAC9C,yBAAO,QAAQ,QAAQ,IAAI;AAAA,gBACvC;AACQ,oBAAI,iBAAiB,CAAE;AACvB,yBAAS,KAAK,GAAG,kBAAkB,eAAe,KAAK,gBAAgB,QAAQ,MAAM;AACjF,sBAAI,WAAW,gBAAgB,EAAE;AACjC,sBAAI,YAAY,KAAK,WAAW,QAAQ;AACxC,sBAAI,WAAW;AACX,mCAAe,KAAK,SAAS;AAAA,kBAC7C;AAAA,gBACA;AACQ,oBAAI,QAAQ,eAAe,IAAI,SAAU,SAAS;AAAE,yBAAO,QAAS;AAAA,iBAAG;AACvE,uBAAO,QAAQ,IAAI,KAAK,EAAE,KAAK,SAAU,QAAQ;AAAE,yBAAO,OAAO,MAAM,SAAU,GAAG;AAAE,2BAAO;AAAA,kBAAE,CAAE;AAAA,iBAAI;AAAA,cACxG;AAED,cAAAA,mBAAkB,UAAU,gBAAgB,SAAU,OAAO;AACzD,oBAAI;AACJ,oBAAI,CAAC,MAAM,MAAM;AACb,yBAAO;AAAA,gBACnB;AACQ,oBAAI,SAAS,KAAK,cAAc,MAAM,IAAI;AAC1C,wBAAQ,KAAK,KAAK,WAAW,MAAM,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG,MAAM,IAAI;AAAA,cAC3F;AAKD,cAAAA,mBAAkB,UAAU,iBAAiB,SAAU,GAAG;AAEtD,uBAAO,EAAE,KAAK,EAAE,WAAW,KAAK,EAAE,WAAW,EAAE,gBAAgB;AAAA,cAClE;AAMD,cAAAA,mBAAkB,UAAU,iBAAiB,SAAU,MAAM,UAAU;AACnE,oBAAI,QAAQ;AACZ,oBAAI;AACJ,oBAAI;AACJ,oBAAI,UAAU,KAAK,cAAc,IAAI;AACrC,oBAAI,iBAAiB,MAAM,KAAK,KAAK,YAAY,OAAO,OAAO,QAAQ,OAAO,SAAS,KAAM,GAAG,OAAO,IAAI;AAC3G,oBAAI,MAAM,cAAc,QAAQ,QAAQ,MAAM;AAC9C,oBAAI,KAAK;AACL,gCAAc,KAAK,QAAQ;AAC3B,sBAAI,KAAK,QAAQ,eAAe;AAC5B,yBAAK,OAAO,IAAI,8BAA8B,IAAI;AAClD,yBAAK,aAAa,cAAc,YAAY;AAAA,kBAC5D,OACiB;AACD,yBAAK,OAAO,IAAI,kCAAkC,IAAI;AAAA,kBACtE;AAAA,gBACA,OACa;AACD,uBAAK,OAAO,IAAI,8CAA8C,QAAQ;AAAA,gBAClF;AACQ,oBAAI,KAAK,WAAW,OAAO,GAAG;AAC1B;AAAA,gBACZ;AACQ,oBAAI,iBAAiB;AACrB,oBAAI,KAAK,SAAU,GAAG,UAAU;AAE5B,sBAAI,gBAAgB;AAChB,2BAAO;AAAA,kBACvB;AACY,sBAAI,CAAC,MAAM,eAAe,CAAC,GAAG;AAC1B,2BAAO,QAAQ,QAAQ,IAAI;AAAA,kBAC3C;AACY,mCAAiB,MAAM,sBAAsB,OAAO;AAEpD,sBAAI,GAAG;AACH,0BAAM,YAAY,CAAC;AAAA,kBACnC;AACY,wBAAM,OAAO,IAAI,cAAc,IAAI;AACnC,yBAAO,eAAe,KAAK,SAAU,SAAS;AAAE,2BAAO,UAAU,OAAO,QAAQ,QAAQ,WAAY;AAChG,0BAAI;AACJ,6BAAO,YAAY,MAAM,SAAUG,KAAI;AACnC,gCAAQA,IAAG,OAAK;AAAA,0BACZ,KAAK;AACD,iCAAK,OAAO,IAAI,4BAA4B,SAAS,IAAI;AACzD,gCAAI,UAAU;AACV,uCAAS,OAAO;AAChB,qCAAO,CAAC,GAAc,OAAO;AAAA,4BAC7D;AAC4B,8CAAkB,IAAI,YAAY,cAAc;AAAA,8BAC5C,QAAQ,EAAE,OAAO,QAAO;AAAA,4BACxD,CAA6B;AACD,iCAAK,cAAc,eAAe;AAElC,mCAAO,CAAC,GAAa,IAAI,QAAQ,SAAU,SAAS;AAAE,qCAAO,WAAW,SAAS,CAAC;AAAA,4BAAI,CAAA,CAAC;AAAA,0BAC3F,KAAK;AAED,4BAAAA,IAAG,KAAM;AACT,iCAAK,gBAAgB,MAAM,SAAS,CAAC;AACrC,mCAAO,CAAC,GAAc,OAAO;AAAA,wBACzD;AAAA,sBACA,CAAiB;AAAA,oBACJ,CAAA;AAAA,kBAAI,CAAA,EAAE,MAAM,SAAU,OAAO;AAC1B,0BAAM,OAAO,IAAI,oBAAoB,KAAK;AAC1C,2BAAO;AAAA,kBACvB,CAAa,EAAE,QAAQ,WAAY;AACnB,qCAAiB;AAAA,kBACjC,CAAa;AAAA,gBACJ;AACD,qBAAK,iBAAiB,UAAU,EAAE;AAClC,oBAAI,UAAU,SAAU,GAAG;AACvB,sBAAIC,iBAAgB,MAAM,WAAW,OAAO;AAC5C,2BAAS,KAAK,GAAG,kBAAkBA,gBAAe,KAAK,gBAAgB,QAAQ,MAAM;AACjF,wBAAI,aAAa,gBAAgB,EAAE;AACnC,0BAAM,WAAW,UAAU;AAAA,kBAC3C;AACY,wBAAM,cAAe;AAAA,gBACxB;AACD,qBAAK,iBAAiB,SAAS,OAAO;AACtC,mBAAG,SAAS,WAAY;AACpB,uBAAK,oBAAoB,UAAU,EAAE;AACrC,uBAAK,oBAAoB,SAAS,OAAO;AAAA,gBAC5C;AACD,qBAAK,WAAW,OAAO,IAAI;AAAA,cAC9B;AAID,cAAAJ,mBAAkB,UAAU,QAAQ,SAAU,OAAO;AACjD,oBAAI,KAAK,WAAW,KAAK,GAAG;AACxB,uBAAK,WAAW,KAAK,cAAc,KAAK,CAAC;AAAA,gBACrD,OACa;AACD,uBAAK,KAAK,KAAK;AAAA,gBAC3B;AAAA,cACK;AACD,cAAAA,mBAAkB,UAAU,aAAa,SAAU,UAAU;AACzD,oBAAI,QAAQ,KAAK,aAAa,QAAQ;AACtC,qBAAK,YAAY,OAAO,IAAI,KAAK,2BAA2B;AAC5D,qBAAK,YAAY,OAAO,IAAI,KAAK,gCAAgC;AACjE,oBAAI,QAAQ,cAAc,KAAK,KAAK,KAAK,cAAc,KAAK;AAC5D,oBAAI,OAAO;AACP,2BAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,0BAAM,CAAC,EAAE,YAAY;AACrB,yBAAK,YAAY,MAAM,CAAC,GAAG,IAAI,KAAK,6BAA6B;AACjE,yBAAK,YAAY,MAAM,CAAC,GAAG,IAAI,KAAK,kCAAkC;AAAA,kBACtF;AAAA,gBACA;AACQ,uBAAO,KAAK,QAAQ,QAAQ;AAAA,cAC/B;AACD,cAAAA,mBAAkB,UAAU,mBAAmB,SAAU,MAAM,UAAU;AACrE,oBAAI;AACJ,oBAAI,UAAU,KAAK,cAAc,IAAI;AACrC,oBAAI,gBAAgB,KAAK,WAAW,OAAO;AAC3C,oBAAI,CAAC,eAAe;AAChB;AAAA,gBACZ;AACQ,oBAAI,gBAAgB,cAAc,QAAQ,QAAQ;AAClD,oBAAI,iBAAiB,GAAG;AACpB,gCAAc,OAAO,eAAe,CAAC;AACrC,sBAAI,CAAC,cAAc,QAAQ;AACvB,qBAAC,KAAK,KAAK,WAAW,OAAO,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG,OAAQ;AAChF,2BAAO,KAAK,WAAW,OAAO;AAC9B,2BAAO,KAAK,WAAW,OAAO;AAC9B,2BAAO,KAAK,WAAW,OAAO;AAAA,kBAC9C;AAAA,gBACA,OACa;AACD,uBAAK,OAAO,IAAI,+CAA+C,QAAQ;AAAA,gBACnF;AAAA,cACK;AAMD,cAAAA,mBAAkB,UAAU,WAAW,SAAU,OAAO;AACpD,oBAAI,QAAQ;AACZ,oBAAI;AACJ,oBAAI,MAAM,KAAK,cAAc,KAAK;AAClC,oBAAI,aAAa,KAAK,gBAAgB,MAAM,UAAU;AACtD,qBAAK,WAAW,GAAG,IAAI,KAAK,gBAAgB,OAAO,UAAU;AAC7D,oBAAI,MAAM,MAAM;AACZ,uBAAK,eAAe,MAAM,MAAM,GAAG;AAAA,gBAC/C;AACQ,oBAAI,KAAK,YAAY,GAAG,GAAG;AACvB;AAAA,gBACZ;AACQ,oBAAI,KAAK,SAAU,OAAO,UAAU;AAAE,yBAAO,UAAU,OAAO,QAAQ,QAAQ,WAAY;AACtF,wBAAI,UAAU,SAAS;AACvB,2BAAO,YAAY,MAAM,SAAUG,KAAI;AACnC,8BAAQA,IAAG,OAAK;AAAA,wBACZ,KAAK;AACD,qCAAW,KAAK,WAAW,GAAG;AAC9B,8BAAI,CAAC;AACD,mCAAO,CAAC,GAAc,IAAI;AAC9B,8BAAI,CAAC,MAAM,QAAQ,YACf,SAAS,MAAM,SAAS,WACxB,CAAC,MAAM,UAAU,SAAS,KAAK,2BAA2B,GAAG;AAE7D,mCAAO,CAAC,GAAc,IAAI;AAAA,0BACtD;AACwB,+BAAK,OAAO,IAAI,cAAc,EAAE,OAAc;AAC9C,0BAAAA,IAAG,QAAQ;AAAA,wBACf,KAAK;AACD,0BAAAA,IAAG,KAAK,KAAK,CAAC,GAAG,GAAK,EAAA,CAAC,CAAC;AACxB,iCAAO,CAAC,GAAa,UAAU;AAAA,wBACnC,KAAK;AACD,oCAAUA,IAAG,KAAM;AACnB,mCAAS,OAAO;AAChB,iCAAO,CAAC,GAAc,OAAO;AAAA,wBACjC,KAAK;AACD,oCAAUA,IAAG,KAAM;AACnB,+BAAK,OAAO,IAAI,oBAAoB,OAAO;AAC3C,iCAAO,CAAC,GAAc,KAAK;AAAA,wBAC/B,KAAK;AAAG,iCAAO;AAAA,4BAAC;AAAA;AAAA,0BAAa;AAAA,sBACjD;AAAA,oBACA,CAAa;AAAA,kBACJ,CAAA;AAAA,gBAAI;AACL,oBAAI,oBAAoB;AACxB,mBAAG,YAAY,SAAU,OAAO,UAAU;AACtC,sBAAI,sBAAsB,MAAM;AAC5B,iCAAa,iBAAiB;AAAA,kBAC9C;AACY,sCAAoB,WAAW,WAAY;AACvC,uBAAG,OAAO,QAAQ;AAAA,kBAClC,GAAe,MAAM,QAAQ;AAAA,gBACpB;AACD,oBAAI,eAAe,iBAAiB,oBAAoB,WAAW;AACnE,oBAAI,iBAAiB,KAAK,MAAM,QAAQ,cAAc,QAAQ,OAAO,SAAS,KAAK;AACnF,oBAAI,SAAS,cAAc,MAAM,GAAG;AACpC,uBAAO,QAAQ,SAAU,WAAW;AAChC,wBAAM,iBAAiB,WAAW,GAAG,SAAS;AAAA,gBAC1D,CAAS;AACD,mBAAG,SAAS,WAAY;AACpB,yBAAO,QAAQ,SAAU,WAAW;AAChC,0BAAM,oBAAoB,WAAW,GAAG,SAAS;AAAA,kBACjE,CAAa;AAAA,gBACJ;AACD,qBAAK,YAAY,GAAG,IAAI;AAAA,cAC3B;AACD,cAAAH,mBAAkB,UAAU,cAAc,SAAU,OAAO;AACvD,oBAAI,MAAM,KAAK,cAAc,KAAK;AAElC,oBAAI,KAAK,KAAK,YAAY,GAAG;AAC7B,oBAAI,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ;AACnD,qBAAG,OAAQ;AACX,yBAAO,GAAG;AAAA,gBACtB;AACQ,uBAAO,KAAK,QAAQ,GAAG;AACvB,uBAAO,KAAK,YAAY,GAAG;AAC3B,uBAAO,KAAK,WAAW,GAAG;AAC1B,oBAAI,MAAM,MAAM;AACZ,uBAAK,iBAAiB,MAAM,MAAM,GAAG;AAAA,gBACjD;AAAA,cACK;AAMD,cAAAA,mBAAkB,UAAU,aAAa,SAAU,MAAM,IAAI;AACzD,oBAAI,SAAS,MAAM,KAAK,KAAK,iBAAiB,oBAAoB,mBAAmB,CAAC,CAAC;AAGvF,oBAAI,cAAc,IAAI,KAAK,KAAK,aAAa,UAAU,MAAM,QAAQ;AACjE,yBAAO,KAAK,IAAI;AAAA,gBAC5B;AACQ,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,sBAAI,QAAQ,OAAO,CAAC;AACpB,qBAAG,KAAK,MAAM,KAAK;AAAA,gBAC/B;AAAA,cACK;AAID,cAAAA,mBAAkB,UAAU,mBAAmB,WAAY;AACvD,oBAAI,CAAC,OAAO,KAAK,KAAK,OAAO,EAAE,QAAQ;AACnC,yBAAO;AAAA,gBACnB;AACQ,oBAAI,mBAAmB,CAAE;AACzB,oBAAI,KAAK,SAAS,cAAc,IAAI;AACpC,yBAAS,OAAO,KAAK,SAAS;AAG1B,sBAAI,kBAAkB,KAAK,aAAa,GAAG;AAC3C,sBAAI,2BAA2B,kBAAkB;AAC7C,wBAAI,gBAAgB,SAAS,cAAc,gBAAgB,SAAS,SAAS;AACzE,0BAAI,gBAAgB,cAAc,KAAK,kCAAkC;AACrE;AAAA,sBACxB;AAAA,oBACA;AAAA,kBACA;AAGY,sBAAI,iBAAiB,QAAQ,KAAK,QAAQ,GAAG,CAAC,IAAI,IAAI;AAClD;AAAA,kBAChB;AACY,sBAAI,KAAK,SAAS,cAAc,IAAI;AACpC,qBAAG,YAAY,KAAK,QAAQ,GAAG;AAC/B,qBAAG,YAAY,EAAE;AACjB,mCAAiB,KAAK,KAAK,QAAQ,GAAG,CAAC;AAAA,gBACnD;AACQ,uBAAO;AAAA,cACV;AAID,cAAAA,mBAAkB,UAAU,gBAAgB,WAAY;AACpD,oBAAI,kBAAkB,SAAS,iBAAiB,8BAA8B;AAC9E,oBAAI,CAAC,gBAAgB,QAAQ;AACzB;AAAA,gBACZ;AAGQ,oBAAI,SAAS,KAAK,UAAU,KAAK,SAAS,OAAO,KAAK,KAAK,OAAO,EAAE,KAAI,CAAE;AAC1E,oBAAI,WAAW,KAAK,qBAAqB;AACrC;AAAA,gBACZ;AAEQ,qBAAK,sBAAsB;AAC3B,oBAAI,KAAK,KAAK,iBAAkB;AAChC,yBAAS,IAAI,GAAG,IAAI,gBAAgB,QAAQ,KAAK;AAC7C,sBAAI,IAAI,gBAAgB,CAAC;AAEzB,sBAAI,eAAe,EAAE,iBAAiB,IAAI;AAC1C,2BAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC1C,iCAAa,CAAC,EAAE,OAAQ;AAAA,kBACxC;AAEY,sBAAI,MAAM,GAAG,iBAAiB;AAC1B,yBAAK,YAAY,GAAG,KAAK,+BAA+B,KAAK,kCAAkC;AAC/F,sBAAE,YAAY,GAAG,UAAU,IAAI,CAAC;AAAA,kBAChD,OACiB;AACD,yBAAK,YAAY,GAAG,KAAK,oCAAoC,KAAK,6BAA6B;AAAA,kBAC/G;AAAA,gBACA;AAAA,cACK;AAMD,cAAAA,mBAAkB,UAAU,WAAW,SAAU,OAAO,SAAS;AAC7D,oBAAI,QAAQ,KAAK,cAAc,KAAK;AACpC,oBAAI,OAAO;AACP,2BAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACxB,0BAAM,CAAC;AAClB,0BAAM,CAAC,EAAE,YAAY;AACrB,yBAAK,YAAY,MAAM,CAAC,GAAG,KAAK,+BAA+B,KAAK,kCAAkC;AAAA,kBACtH;AAAA,gBACA;AACQ,qBAAK,UAAU,OAAO,KAAK,6BAA6B,KAAK,gCAAgC;AAC7F,oBAAI,MAAM,MAAM;AAEZ,sBAAI,SAAS,MAAM,KAAK,iBAAiB,oBAAoB,UAAW,OAAO,MAAM,MAAM,IAAK,CAAC,CAAC;AAClG,2BAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,yBAAK,YAAY,OAAO,CAAC,GAAG,KAAK,6BAA6B,KAAK,gCAAgC;AACnG,wBAAI,MAAM,KAAK,cAAc,OAAO,CAAC,CAAC;AACtC,yBAAK,QAAQ,GAAG,IAAI;AAAA,kBACpC;AAAA,gBACA;AACQ,qBAAK,cAAe;AAAA,cACvB;AAKD,cAAAA,mBAAkB,UAAU,cAAc,SAAU,OAAO;AACvD,oBAAI,QAAQ,KAAK,cAAc,KAAK;AACpC,oBAAI,OAAO;AACP,2BAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,0BAAM,CAAC,EAAE,YAAY;AACrB,yBAAK,YAAY,MAAM,CAAC,GAAG,KAAK,oCAAoC,KAAK,6BAA6B;AAAA,kBACtH;AAAA,gBACA;AACQ,qBAAK,YAAY,OAAO,KAAK,6BAA6B,KAAK,gCAAgC;AAE/F,oBAAI,MAAM,MAAM;AACZ,sBAAI,SAAS,MAAM,KAAK,iBAAiB,oBAAoB,UAAW,OAAO,MAAM,MAAM,IAAK,CAAC,CAAC;AAClG,2BAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,yBAAK,YAAY,OAAO,CAAC,GAAG,KAAK,kCAAkC,KAAK,2BAA2B;AACnG,wBAAI,MAAM,KAAK,cAAc,OAAO,CAAC,CAAC;AACtC,2BAAO,KAAK,QAAQ,GAAG;AAAA,kBACvC;AAAA,gBACA;AACQ,qBAAK,cAAe;AAAA,cACvB;AAMD,cAAAA,mBAAkB,UAAU,kBAAkB,SAAU,OAAO,YAAY;AACvE,oBAAI,QAAQ;AACZ,uBAAO,WAAY;AAAE,yBAAO,UAAU,OAAO,QAAQ,QAAQ,WAAY;AACrE,wBAAI,IAAI,IAAI,IAAI,IAAI,KAAK,WAAW,UAAU,QAAQ,OAAO,OAAO;AACpE,2BAAO,YAAY,MAAM,SAAU,IAAI;AACnC,8BAAQ,GAAG,OAAK;AAAA,wBACZ,KAAK;AACD,8BAAI,EAAE,CAAC,KAAK,SAAS,KAAK,KAAK,CAAC,KAAK,WAAW,KAAK,GAAI,QAAO,CAAC,GAAa,CAAC;AAC/E,+BAAK;AACL,+BAAK,CAAE;AACP,+BAAK,MAAM;AACP,+BAAG,KAAK,EAAE;AACd,+BAAK;AACL,6BAAG,QAAQ;AAAA,wBACf,KAAK;AACD,8BAAI,EAAE,KAAK,GAAG,QAAS,QAAO,CAAC,GAAa,CAAC;AAC7C,+BAAK,GAAG,EAAE;AACV,8BAAI,EAAE,MAAM,IAAK,QAAO,CAAC,GAAa,CAAC;AACvC,gCAAM;AACN,sCAAY,WAAW,GAAG;AAC1B,qCAAW,KAAK,UAAU,GAAG;AAC7B,8BAAI,CAAC,UAAU;AACX,iCAAK,OAAO,IAAI,kDAAkD,GAAG;AACrE,mCAAO,CAAC,GAAa,CAAC;AAAA,0BAClD;AACwB,+BAAK,OAAO,IAAI,mCAAmC,KAAK,KAAK;AAC7D,mCAAS,SAAS,MAAM,OAAO,OAAO,UAAU,MAAM;AACtD,kCAAQ;AACR,kCAAQ,UAAU;AAClB,8BAAI,EAAE,OAAO,WAAW,WAAY,QAAO,CAAC,GAAa,CAAC;AAC1D,kCAAQ;AACR,iCAAO,CAAC,GAAa,CAAC;AAAA,wBAC1B,KAAK;AACD,8BAAI,EAAE,OAAO,WAAW,UAAW,QAAO,CAAC,GAAa,CAAC;AACzD,kCAAQ;AACR,kCAAQ;AACR,iCAAO,CAAC,GAAa,CAAC;AAAA,wBAC1B,KAAK;AAAG,iCAAO,CAAC,GAAa,MAAM;AAAA,wBACnC,KAAK;AACD,uCAAa,GAAG,KAAM;AACtB,8BAAI,OAAO,eAAe,WAAW;AACjC,oCAAQ;AAAA,0BACpC,OAC6B;AACD,oCAAQ;AACR,oCAAQ;AAAA,0BACpC;AACwB,6BAAG,QAAQ;AAAA,wBACf,KAAK;AACD,8BAAI,CAAC,OAAO;AACR,iCAAK,SAAS,OAAO,KAAK;AAC1B,mCAAO,CAAC,GAAc,KAAK;AAAA,0BACvD;AACwB,6BAAG,QAAQ;AAAA,wBACf,KAAK;AACD;AACA,iCAAO,CAAC,GAAa,CAAC;AAAA,wBAC1B,KAAK;AACD,+BAAK,YAAY,KAAK;AACtB,iCAAO,CAAC,GAAc,IAAI;AAAA,sBAClD;AAAA,oBACA,CAAa;AAAA,kBACJ,CAAA;AAAA,gBAAI;AAAA,cACR;AAMD,cAAAA,mBAAkB,UAAU,WAAW,SAAU,OAAO;AACpD,uBAAO,EAAE,KAAK,qBAAqB,MAAM,eAAe,MAAM,gBAAgB,MAAM,eAAgB,EAAC;AAAA,cACxG;AAMD,cAAAA,mBAAkB,UAAU,aAAa,SAAU,OAAO;AAGtD,uBAAO,MAAM;AAAA,cAChB;AAOD,cAAAA,mBAAkB,UAAU,cAAc,SAAU,SAAS,UAAU,aAAa;AAChF,oBAAI,YAAY,CAAC,KAAK,WAAW,OAAO,KAAK,CAAC,QAAQ,UAAU,SAAS,QAAQ,GAAG;AAChF,0BAAQ,UAAU,IAAI,QAAQ;AAAA,gBAC1C;AACQ,oBAAI,QAAQ,UAAU,SAAS,WAAW,GAAG;AACzC,0BAAQ,UAAU,OAAO,WAAW;AAAA,gBAChD;AAAA,cACK;AAMD,cAAAA,mBAAkB,UAAU,YAAY,SAAU,SAAS;AACvD,oBAAI,QAAQ;AACZ,uBAAO,OAAO,KAAK,SAAS,OAAO;AACnC,qBAAK,gBAAiB;AACtB,oBAAIK,YAAW,OAAO;AACtB,oBAAI,OAAO,KAAK,QAAQ;AACxB,oBAAI,OAAO,WAAY;AACnB,wBAAM,KAAK,IAAI;AAEf,sBAAI,MAAM,QAAQ,OAAO;AACrB,0BAAM,MAAM,IAAI;AAAA,kBAChC;AAAA,gBACS;AAED,oBAAIA,UAAS,eAAe,cAAcA,UAAS,eAAe,eAAe;AAC7E,uBAAM;AAAA,gBAClB,OACa;AAED,kBAAAA,UAAS,iBAAiB,oBAAoB,IAAI;AAAA,gBAC9D;AAAA,cACK;AAKD,cAAAL,mBAAkB,UAAU,OAAO,SAAU,MAAM;AAC/C,yBAAS,QAAQ,SAAS,SAAS,OAAQ,OAAO,KAAK,QAAQ;AAC/D,qBAAK,OAAO,IAAI,YAAY,IAAI;AAChC,qBAAK,aAAa,MAAM,KAAK,yBAAyB;AACtD,qBAAK,WAAW,MAAM,KAAK,QAAQ;AAAA,cACtC;AAKD,cAAAA,mBAAkB,UAAU,SAAS,SAAU,MAAM;AACjD,yBAAS,QAAQ,SAAS,SAAS,OAAQ,OAAO,KAAK,QAAQ;AAC/D,qBAAK,OAAO,IAAI,YAAY,IAAI;AAChC,qBAAK,aAAa,MAAM,KAAK,2BAA2B;AACxD,qBAAK,WAAW,MAAM,KAAK,WAAW;AAAA,cACzC;AAKD,cAAAA,mBAAkB,UAAU,QAAQ,SAAU,MAAM;AAChD,oBAAI,QAAQ;AACZ,yBAAS,QAAQ,SAAS,SAAS,OAAQ,OAAO,KAAK,QAAQ;AAC/D,qBAAK,WAAW,IAAI,iBAAiB,SAAU,WAAW;AACtD,4BAAU,QAAQ,SAAU,UAAU;AAClC,0BAAM,SAAS,QAAQ;AAAA,kBACvC,CAAa;AAAA,gBACb,CAAS;AACD,qBAAK,SAAS,QAAQ,MAAM;AAAA,kBACxB,YAAY;AAAA,kBACZ,WAAW;AAAA,kBACX,SAAS;AAAA,gBACrB,CAAS;AACD,qBAAK,OAAO,IAAI,wBAAwB;AAAA,cAC3C;AACD,cAAAA,mBAAkB,UAAU,WAAW,SAAU,UAAU;AACvD,oBAAI,IAAI,IAAI;AACZ,oBAAI,SAAS,SAAS,aAAa;AAC/B,2BAAS,IAAI,GAAG,IAAI,SAAS,WAAW,QAAQ,KAAK;AACjD,wBAAI,OAAO,SAAS,WAAW,CAAC;AAChC,yBAAK,OAAO,IAAI,cAAc,IAAI;AAClC,wBAAI,gBAAgB,aAAa;AAC7B,2BAAK,KAAK,IAAI;AAAA,oBAClC;AAAA,kBACA;AACY,2BAAS,IAAI,GAAG,IAAI,SAAS,aAAa,QAAQ,KAAK;AACnD,wBAAI,OAAO,SAAS,aAAa,CAAC;AAClC,yBAAK,OAAO,IAAI,gBAAgB,IAAI;AACpC,wBAAI,gBAAgB,aAAa;AAC7B,2BAAK,OAAO,IAAI;AAAA,oBACpC;AAAA,kBACA;AAAA,gBACA,WACiB,SAAS,SAAS,cAAc;AACrC,sBAAI,SAAS,kBAAkB,aAAa;AACxC,wBAAI,gBAAgB,SAAS;AAE7B,wBAAI,kBAAkB,YAAY;AAC9B,0BAAI,SAAS,SAAS;AACtB,2BAAK,MAAM,MAAM;AAAA,oBACrC,OACqB;AACD,0BAAI,YAAY,KAAK,SAAS,cAAc,QAAQ,OAAO,SAAS,KAAK;AACzE,0BAAI,YAAY,MAAM,KAAK,SAAS,OAAO,WAAW,SAAS,aAAa,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG,WAAW,QAAQ,OAAO,SAAS,KAAK;AAC/J,2BAAK,OAAO,IAAI,4CAA4C,SAAS,eAAe,UAAU,UAAU,SAAS,MAAM;AACvH,0BAAI,aAAa,UAAU;AACvB,6BAAK,KAAK,SAAS,MAAM;AAAA,sBACjD;AAAA,oBACA;AAAA,kBACA;AAAA,gBACA;AAAA,cACK;AAOD,cAAAA,mBAAkB,UAAU,YAAY,SAAU,OAAO,YAAY,YAAY;AAC7E,qBAAK,YAAY,OAAO,YAAY,UAAU;AAAA,cACjD;AAOD,cAAAA,mBAAkB,UAAU,cAAc,SAAU,OAAO,YAAY,YAAY;AAC/E,qBAAK,YAAY,OAAO,YAAY,UAAU;AAAA,cACjD;AACD,qBAAOA;AAAA,YACX;;AAGU,iBAAO;AAAA,QACP,GAAA;AAAA;AAAA,IAEV,CAAC;AAAA;;;;AC17CD,IAAI,CAAC,SAAS,KAAK,WAAW,oBAAoB;AAC9C,WAAS,iBAAiB,sBAAsB,SAAO;AAEnD,UAAM,EAAE,MAAM,YAAY,QAAO,IAAK,IAAI;AAC1C,QAAI,MAAM,kBAAkB,MAAO;AAEnC,UAAM,cAAc,KAAK,QAAQ;AACjC,QAAI,CAAC,YAAa;AAElB,UAAM,EAAE,YAAY,cAAc,cAAa,IAAK;AAGpD,QAAI,CAAC,cAAc,CAAC,eAAe;AAC/B,cAAQ,KAAK,0FAA0F;AACvG;AAAA,IACH;AAGD,QAAI,iBAAiB,WAAW,aAAa,EAAG;AAGhD,QAAI,YAAY;AACZ,cAAQ,UAAU,IAAI;AAAA,IAClC,OAAe;AACH,iBAAW,aAAa,IAAI;AAAA,IAC/B;AAAA,EACT,CAAK;AACD,WAAS,iBAAiB,oBAAoB,SAAO;AACjD,QAAI,IAAI,OAAO,SAAS;AACpB,YAAM,eAAe,IAAI,OAAO,IAAI;AACpC,YAAM,WAAW;AAGjB,YAAM,aAAa,aAAa,QAAQ,0BAA0B;AAClE,YAAM,WAAW,aAAa,QAAQ,KAAK,UAAU,IAAI;AACzD,YAAM,kBAAkB,aAAa,QAAQ,WAAW,QAAQ;AAEhE,UAAI,aAAa,IAAI;AACjB,YAAI,gBAAgB;AACpB,YAAG,kBAAkB,IAAG;AACpB,gBAAM,oBAAoB,aAAa,QAAQ,KAAK,UAAU;AAC9D,cAAI,oBAAoB,MAAM,oBAAoB,UAAU;AAExD,4BAAgB,aAAa,UAAU,YAAY,QAAQ;AAAA,UACnF,OAA2B;AACH,4BAAgB,aAAa,UAAU,YAAY,aAAa,QAAQ,SAAS,IAAI,CAAC;AAAA,UACzF;AAAA,QACrB,OAAuB;AACH,0BAAgB,aAAa,UAAU,YAAY,QAAQ;AAAA,QAC9D;AAGD,cAAM,wBAAwB;AAC9B,cAAM,eAAe,cAAc,MAAM,qBAAqB;AAE9D,YAAI,gBAAgB,aAAa,CAAC,GAAG;AACjC,gBAAM,eAAe,aAAa,CAAC;AAEnC,gBAAM,UAAU,SAAS,cAAc,QAAQ;AAG/C,gBAAM,MAAM;AACZ,cAAI;AACA,iBAAK,OAAO,GAAG,IAAI,KAAK,MAAM,YAAY,EAAE,GAAG;AAAA,UAClD,SAAQ,GAAG;AACR,oBAAQ,MAAM,mCAAmC,CAAC;AAClD;AAAA,UACH;AAID,gBAAM,UAAU,SAAS,cAAc,MAAM;AAC7C,kBAAQ,aAAa,QAAQ,aAAa;AAC1C,kBAAQ,aAAa,WAAW,YAAY;AAG5C,kBAAQ,YAAY,OAAO;AAAA,QAE9B;AAAA,MACJ;AAAA,IACJ;AAAA,EACT,CAAK;AACD,WAAS,KAAK,WAAW,qBAAqB;AAClD;AC7EA,IAAI,aAAa,IAAIA,wBAAAA;AACrB,WAAW,UAAU,EAAE,OAAO,KAAM,CAAA;AAE/B,MAAC,QAAQ;AAAA,EACV;AACJ;AAEA,OAAO,QAAQ,EAAE,GAAI,OAAO,SAAS,CAAE,GAAG,GAAG,MAAO;","x_google_ignoreList":[2]}