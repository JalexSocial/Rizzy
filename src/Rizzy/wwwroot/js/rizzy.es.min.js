(function() {
  htmx.defineExtension(
    "rizzy-nonce",
    {
      transformResponse: function(y, p, w) {
        let b = htmx.config.documentNonce ?? htmx.config.inlineScriptNonce;
        b || (console.warn("rizzy-nonce extension loaded but no no nonce found for document. Inline scripts may be blocked."), b = ""), htmx.config.refreshOnHistoryMiss = !0;
        let v = p?.getResponseHeader("HX-Nonce");
        if (!v) {
          const I = p?.getResponseHeader("content-security-policy");
          if (I) {
            const E = I.match(/(style|script)-src[^;]*'nonce-([^']*)'/i);
            E && (v = E[2]);
          }
        }
        return p && window.location.hostname && new URL(p.responseURL).hostname !== window.location.hostname && (v = ""), v ?? (v = ""), this.processUnsafeHtml(y, b, v);
      },
      processUnsafeHtml: function(y, p, w) {
        p && w && (y = y.replaceAll(w, p));
        const b = new DOMParser();
        try {
          let v = b.parseFromString(y, "text/html");
          if (v)
            return Array.from(v.querySelectorAll('[hx-ext*="ignore:rizzy-nonce"], [data-hx-ext*="ignore:rizzy-nonce"]')).forEach((E) => {
              E.remove();
            }), v.querySelectorAll("script, style, link").forEach((E) => {
              E.getAttribute("nonce") !== p && E.remove();
            }), v.documentElement.outerHTML;
        } catch {
        }
        return "";
      }
    }
  );
})();
(function() {
  var y, p = !0;
  class w extends HTMLElement {
    connectedCallback() {
      const c = this.parentNode;
      c.parentNode?.removeChild(c), c.childNodes.forEach((s) => {
        if (s instanceof HTMLTemplateElement) {
          const e = s.getAttribute("blazor-component-id");
          e && M(e, s.content);
        }
      }), htmx?.process(document.body);
    }
  }
  htmx.defineExtension(
    "rizzy-streaming",
    {
      /**
       * Init saves the provided reference to the internal HTMX API.
       *
       * @param {import("../htmx").HtmxInternalApi} api
       * @returns void
       */
      init: function(f) {
        y = f, htmx.blazorSwapSsr == null && (customElements.get("blazor-ssr-end") === void 0 && customElements.define("blazor-ssr-end", w), htmx.blazorSwapSsr = v);
      },
      onEvent: function(f, c) {
        if (f === "htmx:afterOnLoad")
          htmx?.process(document.body);
        else if (f === "htmx:beforeRequest") {
          var s = c.detail.elt;
          c.detail.requestConfig.target && c.detail.requestConfig.target.addEventListener(
            "htmx:beforeSwap",
            (i) => {
            },
            { once: !0 }
          );
          var e = 0, r = y.getSwapSpecification(s), t = c.detail.xhr, n = "ctr" + crypto.randomUUID();
          t.addEventListener("readystatechange", () => {
            if (t.readyState === 4) {
              var i = document.getElementById(n);
              i != null && E(i);
            }
          }), t.addEventListener("progress", (i) => {
            var a = document.getElementById(n);
            a == null && (a = document.createElement("div"), a.id = n, V(s, a.outerHTML, r, t), r.swapStyle = "innerHTML", a = document.getElementById(n) ?? a);
            let o = i.currentTarget.response.substring(e);
            V(a, o, r, t), r.settleDelay = 0, r.swapStyle = "beforeend", e = i.loaded;
          });
        }
        return !0;
      }
    }
  );
  function b(f) {
    if (f && f.nodeType === Node.COMMENT_NODE) {
      let c = f.parentNode;
      for (; c !== null; ) {
        if (c === document.head)
          return !0;
        c = c.parentNode;
      }
    } else
      return !1;
    return !1;
  }
  function v(f, c, s, e) {
    var r = I(f, c, "ssr" + crypto.randomUUID()), t = document.createElement("div");
    t.appendChild(s), V(r, t.innerHTML, e), E(r);
  }
  function I(f, c, s) {
    var e = document.createElement("div");
    e.id = s;
    for (var r = f.nextSibling; r && r !== c; )
      e.appendChild(r), r = f.nextSibling;
    return f.parentNode.insertBefore(e, c), e;
  }
  function E(f) {
    if (f.parentNode) {
      for (; f.firstChild; )
        f.parentNode.insertBefore(f.firstChild, f);
      f.parentNode.removeChild(f);
    }
  }
  function V(f, c, s, e) {
    y.withExtensions(f, function(n) {
      c = n.transformResponse(c, e, f);
    }), s ?? (s = y.getSwapSpecification(f));
    var r = y.getTarget(f), t = y.makeSettleInfo(f);
    y.swap(r, c, s), t.elts.forEach(function(n) {
      n.classList && n.classList.add(htmx.config.settlingClass), y.triggerEvent(n, "htmx:beforeSettle");
    }), s.settleDelay > 0 ? setTimeout(L(t), s.settleDelay) : L(t)();
  }
  function L(f) {
    return function() {
      f.tasks.forEach(function(c) {
        c.call();
      }), f.elts.forEach(function(c) {
        c.classList && c.classList.remove(htmx.config.settlingClass), y.triggerEvent(c, "htmx:afterSettle");
      });
    };
  }
  function M(f, c) {
    const s = T(f);
    if (s) {
      const { startMarker: e, endMarker: r } = s;
      if (p = !b(e), p)
        v(e, r, c);
      else {
        const t = r.parentNode, n = new Range();
        for (n.setStart(e, e.textContent.length), n.setEnd(r, 0), n.deleteContents(); c.childNodes[0]; )
          t.insertBefore(c.childNodes[0], r);
      }
    }
  }
  function T(f) {
    const c = `bl:${f}`, s = document.createNodeIterator(
      document,
      NodeFilter.SHOW_COMMENT
    );
    let e = null;
    for (; (e = s.nextNode()) && e.textContent !== c; )
      ;
    if (!e)
      return null;
    const r = `/bl:${f}`;
    let t = null;
    for (; (t = s.nextNode()) && t.textContent !== r; )
      ;
    return t ? { startMarker: e, endMarker: t } : null;
  }
})();
var F = { exports: {} }, H;
function q() {
  return H || (H = 1, function(y, p) {
    (function(b, v) {
      y.exports = v();
    })(self, () => (
      /******/
      (() => {
        var w = {};
        w.d = (s, e) => {
          for (var r in e)
            w.o(e, r) && !w.o(s, r) && Object.defineProperty(s, r, { enumerable: !0, get: e[r] });
        }, w.o = (s, e) => Object.prototype.hasOwnProperty.call(s, e), w.r = (s) => {
          typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(s, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(s, "__esModule", { value: !0 });
        };
        var b = {};
        /*!**********************!*\
          !*** ./src/index.ts ***!
          \**********************/
        w.r(b), w.d(b, {
          /* harmony export */
          MvcValidationProviders: () => (
            /* binding */
            f
          ),
          /* harmony export */
          ValidationService: () => (
            /* binding */
            c
          ),
          /* harmony export */
          isValidatable: () => (
            /* binding */
            V
          )
          /* harmony export */
        });
        var v = function(s, e, r, t) {
          function n(i) {
            return i instanceof r ? i : new r(function(a) {
              a(i);
            });
          }
          return new (r || (r = Promise))(function(i, a) {
            function o(u) {
              try {
                l(t.next(u));
              } catch (h) {
                a(h);
              }
            }
            function d(u) {
              try {
                l(t.throw(u));
              } catch (h) {
                a(h);
              }
            }
            function l(u) {
              u.done ? i(u.value) : n(u.value).then(o, d);
            }
            l((t = t.apply(s, e || [])).next());
          });
        }, I = function(s, e) {
          var r = { label: 0, sent: function() {
            if (i[0] & 1) throw i[1];
            return i[1];
          }, trys: [], ops: [] }, t, n, i, a;
          return a = { next: o(0), throw: o(1), return: o(2) }, typeof Symbol == "function" && (a[Symbol.iterator] = function() {
            return this;
          }), a;
          function o(l) {
            return function(u) {
              return d([l, u]);
            };
          }
          function d(l) {
            if (t) throw new TypeError("Generator is already executing.");
            for (; a && (a = 0, l[0] && (r = 0)), r; ) try {
              if (t = 1, n && (i = l[0] & 2 ? n.return : l[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, l[1])).done) return i;
              switch (n = 0, i && (l = [l[0] & 2, i.value]), l[0]) {
                case 0:
                case 1:
                  i = l;
                  break;
                case 4:
                  return r.label++, { value: l[1], done: !1 };
                case 5:
                  r.label++, n = l[1], l = [0];
                  continue;
                case 7:
                  l = r.ops.pop(), r.trys.pop();
                  continue;
                default:
                  if (i = r.trys, !(i = i.length > 0 && i[i.length - 1]) && (l[0] === 6 || l[0] === 2)) {
                    r = 0;
                    continue;
                  }
                  if (l[0] === 3 && (!i || l[1] > i[0] && l[1] < i[3])) {
                    r.label = l[1];
                    break;
                  }
                  if (l[0] === 6 && r.label < i[1]) {
                    r.label = i[1], i = l;
                    break;
                  }
                  if (i && r.label < i[2]) {
                    r.label = i[2], r.ops.push(l);
                    break;
                  }
                  i[2] && r.ops.pop(), r.trys.pop();
                  continue;
              }
              l = e.call(s, r);
            } catch (u) {
              l = [6, u], n = 0;
            } finally {
              t = i = 0;
            }
            if (l[0] & 5) throw l[1];
            return { value: l[0] ? l[1] : void 0, done: !0 };
          }
        }, E = new /** @class */
        (function() {
          function s() {
            this.warn = globalThis.console.warn;
          }
          return s.prototype.log = function(e) {
          }, s;
        }())(), V = function(s) {
          return s instanceof HTMLInputElement || s instanceof HTMLSelectElement || s instanceof HTMLTextAreaElement;
        }, L = ["input", "select", "textarea"], M = function(s) {
          return L.map(function(e) {
            return "".concat(e).concat(s || "");
          }).join(",");
        };
        function T(s, e) {
          var r = s.name, t = e.substring(2), n = "", i = r.lastIndexOf(".");
          if (i > -1) {
            n = r.substring(0, i);
            var a = n + "." + t, o = document.getElementsByName(a)[0];
            if (V(o))
              return o;
          }
          return s.form.querySelector(M("[name=".concat(t, "]")));
        }
        var f = (
          /** @class */
          /* @__PURE__ */ function() {
            function s() {
              this.required = function(e, r, t) {
                var n = r.type.toLowerCase();
                if (n === "checkbox" || n === "radio") {
                  for (var i = Array.from(r.form.querySelectorAll(M("[name='".concat(r.name, "'][type='").concat(n, "']")))), a = 0, o = i; a < o.length; a++) {
                    var d = o[a];
                    if (d instanceof HTMLInputElement && d.checked === !0)
                      return !0;
                  }
                  if (n === "checkbox") {
                    var l = r.form.querySelector("input[name='".concat(r.name, "'][type='hidden']"));
                    if (l instanceof HTMLInputElement && l.value === "false")
                      return !0;
                  }
                  return !1;
                }
                return !!e?.trim();
              }, this.stringLength = function(e, r, t) {
                if (!e)
                  return !0;
                if (t.min) {
                  var n = parseInt(t.min);
                  if (e.length < n)
                    return !1;
                }
                if (t.max) {
                  var i = parseInt(t.max);
                  if (e.length > i)
                    return !1;
                }
                return !0;
              }, this.compare = function(e, r, t) {
                if (!t.other)
                  return !0;
                var n = T(r, t.other);
                return n ? n.value === e : !0;
              }, this.range = function(e, r, t) {
                if (!e)
                  return !0;
                var n = parseFloat(e);
                if (isNaN(n))
                  return !1;
                if (t.min) {
                  var i = parseFloat(t.min);
                  if (n < i)
                    return !1;
                }
                if (t.max) {
                  var a = parseFloat(t.max);
                  if (n > a)
                    return !1;
                }
                return !0;
              }, this.regex = function(e, r, t) {
                if (!e || !t.pattern)
                  return !0;
                var n = new RegExp(t.pattern);
                return n.test(e);
              }, this.email = function(e, r, t) {
                if (!e)
                  return !0;
                var n = /^([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22))*\x40([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d))*(\.\w{2,})+$/;
                return n.test(e);
              }, this.creditcard = function(e, r, t) {
                if (!e)
                  return !0;
                if (/[^0-9 \-]+/.test(e))
                  return !1;
                var n = 0, i = 0, a = !1, o, d;
                if (e = e.replace(/\D/g, ""), e.length < 13 || e.length > 19)
                  return !1;
                for (o = e.length - 1; o >= 0; o--)
                  d = e.charAt(o), i = parseInt(d, 10), a && (i *= 2) > 9 && (i -= 9), n += i, a = !a;
                return n % 10 === 0;
              }, this.url = function(e, r, t) {
                if (!e)
                  return !0;
                var n = e.toLowerCase();
                return n.indexOf("http://") > -1 || n.indexOf("https://") > -1 || n.indexOf("ftp://") > -1;
              }, this.phone = function(e, r, t) {
                if (!e)
                  return !0;
                var n = /[\+\-\s][\-\s]/g;
                if (n.test(e))
                  return !1;
                var i = /^\+?[0-9\-\s]+$/;
                return i.test(e);
              }, this.remote = function(e, r, t) {
                if (!e)
                  return !0;
                for (var n = t.additionalfields.split(","), i = {}, a = 0, o = n; a < o.length; a++) {
                  var d = o[a], l = d.substr(2), u = T(r, d), h = !!(u && u.value);
                  h && (u instanceof HTMLInputElement && (u.type === "checkbox" || u.type === "radio") ? i[l] = u.checked ? u.value : "" : i[l] = u.value);
                }
                var x = t.url, g = [];
                for (var l in i) {
                  var m = encodeURIComponent(l) + "=" + encodeURIComponent(i[l]);
                  g.push(m);
                }
                var C = g.join("&");
                return new Promise(function(N, D) {
                  var S = new XMLHttpRequest();
                  if (t.type && t.type.toLowerCase() === "post") {
                    var A = new FormData();
                    for (var U in i)
                      A.append(U, i[U]);
                    S.open("post", x), S.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), S.send(C);
                  } else
                    S.open("get", x + "?" + C), S.send();
                  S.onload = function(k) {
                    if (S.status >= 200 && S.status < 300) {
                      var R = JSON.parse(S.responseText);
                      N(R);
                    } else
                      D({
                        status: S.status,
                        statusText: S.statusText,
                        data: S.responseText
                      });
                  }, S.onerror = function(k) {
                    D({
                      status: S.status,
                      statusText: S.statusText,
                      data: S.responseText
                    });
                  };
                });
              };
            }
            return s;
          }()
        ), c = (
          /** @class */
          function() {
            function s(e) {
              var r = this;
              this.providers = {}, this.messageFor = {}, this.elementUIDs = [], this.elementByUID = {}, this.formInputs = {}, this.validators = {}, this.formEvents = {}, this.inputEvents = {}, this.summary = {}, this.debounce = 300, this.allowHiddenFields = !1, this.validateForm = function(t, n) {
                return v(r, void 0, void 0, function() {
                  var i, a, o;
                  return I(this, function(d) {
                    switch (d.label) {
                      case 0:
                        if (!(t instanceof HTMLFormElement))
                          throw new Error("validateForm() can only be called on <form> elements");
                        return i = this.getElementUID(t), a = this.formEvents[i], o = !a, o ? [3, 2] : [4, a(void 0, n)];
                      case 1:
                        o = d.sent(), d.label = 2;
                      case 2:
                        return [2, o];
                    }
                  });
                });
              }, this.validateField = function(t, n) {
                return v(r, void 0, void 0, function() {
                  var i, a, o;
                  return I(this, function(d) {
                    switch (d.label) {
                      case 0:
                        return i = this.getElementUID(t), a = this.inputEvents[i], o = !a, o ? [3, 2] : [4, a(void 0, n)];
                      case 1:
                        o = d.sent(), d.label = 2;
                      case 2:
                        return [2, o];
                    }
                  });
                });
              }, this.preValidate = function(t) {
                t.preventDefault(), t.stopImmediatePropagation();
              }, this.handleValidated = function(t, n, i) {
                if (!(t instanceof HTMLFormElement))
                  throw new Error("handleValidated() can only be called on <form> elements");
                n ? i && r.submitValidForm(t, i) : r.focusFirstInvalid(t);
              }, this.submitValidForm = function(t, n) {
                if (!(t instanceof HTMLFormElement))
                  throw new Error("submitValidForm() can only be called on <form> elements");
                var i = new SubmitEvent("submit", n);
                if (t.dispatchEvent(i)) {
                  var a = n.submitter, o = null, d = t.action;
                  if (a) {
                    var l = a.getAttribute("name");
                    l && (o = document.createElement("input"), o.type = "hidden", o.name = l, o.value = a.getAttribute("value"), t.appendChild(o));
                    var u = a.getAttribute("formaction");
                    u && (t.action = u);
                  }
                  try {
                    t.submit();
                  } finally {
                    o && t.removeChild(o), t.action = d;
                  }
                }
              }, this.focusFirstInvalid = function(t) {
                if (!(t instanceof HTMLFormElement))
                  throw new Error("focusFirstInvalid() can only be called on <form> elements");
                var n = r.getElementUID(t), i = r.formInputs[n], a = i?.find(function(d) {
                  return r.summary[d];
                });
                if (a) {
                  var o = r.elementByUID[a];
                  o instanceof HTMLElement && o.focus();
                }
              }, this.isValid = function(t, n, i) {
                if (n === void 0 && (n = !0), !(t instanceof HTMLFormElement))
                  throw new Error("isValid() can only be called on <form> elements");
                n && r.validateForm(t, i);
                var a = r.getElementUID(t), o = r.formInputs[a], d = o?.some(function(l) {
                  return r.summary[l];
                }) === !0;
                return !d;
              }, this.isFieldValid = function(t, n, i) {
                n === void 0 && (n = !0), n && r.validateField(t, i);
                var a = r.getElementUID(t);
                return r.summary[a] === void 0;
              }, this.options = {
                root: document.body,
                watch: !1,
                addNoValidate: !0
              }, this.ValidationInputCssClassName = "input-validation-error", this.ValidationInputValidCssClassName = "input-validation-valid", this.ValidationMessageCssClassName = "field-validation-error", this.ValidationMessageValidCssClassName = "field-validation-valid", this.ValidationSummaryCssClassName = "validation-summary-errors", this.ValidationSummaryValidCssClassName = "validation-summary-valid", this.logger = e || E;
            }
            return s.prototype.addProvider = function(e, r) {
              this.providers[e] || (this.logger.log("Registered provider: %s", e), this.providers[e] = r);
            }, s.prototype.addMvcProviders = function() {
              var e = new f();
              this.addProvider("required", e.required), this.addProvider("length", e.stringLength), this.addProvider("maxlength", e.stringLength), this.addProvider("minlength", e.stringLength), this.addProvider("equalto", e.compare), this.addProvider("range", e.range), this.addProvider("regex", e.regex), this.addProvider("creditcard", e.creditcard), this.addProvider("email", e.email), this.addProvider("url", e.url), this.addProvider("phone", e.phone), this.addProvider("remote", e.remote);
            }, s.prototype.scanMessages = function(e, r) {
              for (var t = Array.from(e.querySelectorAll("span[form]")), n = 0, i = t; n < i.length; n++) {
                var a = i[n], o = document.getElementById(a.getAttribute("form"));
                o instanceof HTMLFormElement && r.call(this, o, a);
              }
              var d = Array.from(e.querySelectorAll("form"));
              e instanceof HTMLFormElement && d.push(e);
              var l = e instanceof Element ? e.closest("form") : null;
              l && d.push(l);
              for (var u = 0, h = d; u < h.length; u++)
                for (var o = h[u], x = Array.from(o.querySelectorAll("[data-valmsg-for]")), g = 0, m = x; g < m.length; g++) {
                  var a = m[g];
                  r.call(this, o, a);
                }
            }, s.prototype.pushValidationMessageSpan = function(e, r) {
              var t, n, i, a = this.getElementUID(e), o = (t = (i = this.messageFor)[a]) !== null && t !== void 0 ? t : i[a] = {}, d = r.getAttribute("data-valmsg-for");
              if (d) {
                var l = (n = o[d]) !== null && n !== void 0 ? n : o[d] = [];
                l.indexOf(r) < 0 ? l.push(r) : this.logger.log("Validation element for '%s' is already tracked", name, r);
              }
            }, s.prototype.removeValidationMessageSpan = function(e, r) {
              var t = this.getElementUID(e), n = this.messageFor[t];
              if (n) {
                var i = r.getAttribute("data-valmsg-for");
                if (i) {
                  var a = n[i];
                  if (a) {
                    var o = a.indexOf(r);
                    o >= 0 ? a.splice(o, 1) : this.logger.log("Validation element for '%s' was already removed", name, r);
                  }
                }
              }
            }, s.prototype.parseDirectives = function(e) {
              for (var r = {}, t = {}, n = 9, i = 0; i < e.length; i++) {
                var a = e[i];
                if (a.name.indexOf("data-val-") === 0) {
                  var o = a.name.substr(n);
                  t[o] = a.value;
                }
              }
              var d = function(l) {
                if (l.indexOf("-") === -1) {
                  for (var u = Object.keys(t).filter(function(N) {
                    return N !== l && N.indexOf(l) === 0;
                  }), h = {
                    error: t[l],
                    params: {}
                  }, x = (l + "-").length, g = 0; g < u.length; g++) {
                    var m = t[u[g]], C = u[g].substr(x);
                    h.params[C] = m;
                  }
                  r[l] = h;
                }
              };
              for (var o in t)
                d(o);
              return r;
            }, s.prototype.guid4 = function() {
              return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(e) {
                var r = Math.random() * 16 | 0, t = e == "x" ? r : r & 3 | 8;
                return t.toString(16);
              });
            }, s.prototype.getElementUID = function(e) {
              var r = this.elementUIDs.filter(function(n) {
                return n.node === e;
              })[0];
              if (r)
                return r.uid;
              var t = this.guid4();
              return this.elementUIDs.push({
                node: e,
                uid: t
              }), this.elementByUID[t] = e, t;
            }, s.prototype.getFormValidationTask = function(e) {
              var r = this.formInputs[e];
              if (!r || r.length === 0)
                return Promise.resolve(!0);
              for (var t = [], n = 0, i = r; n < i.length; n++) {
                var a = i[n], o = this.validators[a];
                o && t.push(o);
              }
              var d = t.map(function(l) {
                return l();
              });
              return Promise.all(d).then(function(l) {
                return l.every(function(u) {
                  return u;
                });
              });
            }, s.prototype.getMessageFor = function(e) {
              var r;
              if (e.form) {
                var t = this.getElementUID(e.form);
                return (r = this.messageFor[t]) === null || r === void 0 ? void 0 : r[e.name];
              }
            }, s.prototype.shouldValidate = function(e) {
              return !(e && e.submitter && e.submitter.formNoValidate);
            }, s.prototype.trackFormInput = function(e, r) {
              var t = this, n, i, a = this.getElementUID(e), o = (n = (i = this.formInputs)[a]) !== null && n !== void 0 ? n : i[a] = [], d = o.indexOf(r) === -1;
              if (d ? (o.push(r), this.options.addNoValidate ? (this.logger.log("Setting novalidate on form", e), e.setAttribute("novalidate", "novalidate")) : this.logger.log("Not setting novalidate on form", e)) : this.logger.log("Form input for UID '%s' is already tracked", r), !this.formEvents[a]) {
                var l = null, u = function(x, g) {
                  return l || (t.shouldValidate(x) ? (l = t.getFormValidationTask(a), x && t.preValidate(x), t.logger.log("Validating", e), l.then(function(m) {
                    return v(t, void 0, void 0, function() {
                      var C;
                      return I(this, function(N) {
                        switch (N.label) {
                          case 0:
                            return this.logger.log("Validated (success = %s)", m, e), g ? (g(m), [2, m]) : (C = new CustomEvent("validation", {
                              detail: { valid: m }
                            }), e.dispatchEvent(C), [4, new Promise(function(D) {
                              return setTimeout(D, 0);
                            })]);
                          case 1:
                            return N.sent(), this.handleValidated(e, m, x), [2, m];
                        }
                      });
                    });
                  }).catch(function(m) {
                    return t.logger.log("Validation error", m), !1;
                  }).finally(function() {
                    l = null;
                  })) : Promise.resolve(!0));
                };
                e.addEventListener("submit", u);
                var h = function(x) {
                  for (var g = t.formInputs[a], m = 0, C = g; m < C.length; m++) {
                    var N = C[m];
                    t.resetField(N);
                  }
                  t.renderSummary();
                };
                e.addEventListener("reset", h), u.remove = function() {
                  e.removeEventListener("submit", u), e.removeEventListener("reset", h);
                }, this.formEvents[a] = u;
              }
            }, s.prototype.reset = function(e) {
              this.isDisabled(e) ? this.resetField(this.getElementUID(e)) : this.scan(e);
            }, s.prototype.resetField = function(e) {
              var r = this.elementByUID[e];
              this.swapClasses(r, "", this.ValidationInputCssClassName), this.swapClasses(r, "", this.ValidationInputValidCssClassName);
              var t = V(r) && this.getMessageFor(r);
              if (t)
                for (var n = 0; n < t.length; n++)
                  t[n].innerHTML = "", this.swapClasses(t[n], "", this.ValidationMessageCssClassName), this.swapClasses(t[n], "", this.ValidationMessageValidCssClassName);
              delete this.summary[e];
            }, s.prototype.untrackFormInput = function(e, r) {
              var t, n = this.getElementUID(e), i = this.formInputs[n];
              if (i) {
                var a = i.indexOf(r);
                a >= 0 ? (i.splice(a, 1), i.length || ((t = this.formEvents[n]) === null || t === void 0 || t.remove(), delete this.formEvents[n], delete this.formInputs[n], delete this.messageFor[n])) : this.logger.log("Form input for UID '%s' was already removed", r);
              }
            }, s.prototype.addInput = function(e) {
              var r = this, t, n = this.getElementUID(e), i = this.parseDirectives(e.attributes);
              if (this.validators[n] = this.createValidator(e, i), e.form && this.trackFormInput(e.form, n), !this.inputEvents[n]) {
                var a = function(h, x) {
                  return v(r, void 0, void 0, function() {
                    var g, m, C;
                    return I(this, function(N) {
                      switch (N.label) {
                        case 0:
                          if (g = this.validators[n], !g)
                            return [2, !0];
                          if (!e.dataset.valEvent && h && h.type === "input" && !e.classList.contains(this.ValidationInputCssClassName))
                            return [2, !0];
                          this.logger.log("Validating", { event: h }), N.label = 1;
                        case 1:
                          return N.trys.push([1, 3, , 4]), [4, g()];
                        case 2:
                          return m = N.sent(), x(m), [2, m];
                        case 3:
                          return C = N.sent(), this.logger.log("Validation error", C), [2, !1];
                        case 4:
                          return [
                            2
                            /*return*/
                          ];
                      }
                    });
                  });
                }, o = null;
                a.debounced = function(h, x) {
                  o !== null && clearTimeout(o), o = setTimeout(function() {
                    a(h, x);
                  }, r.debounce);
                };
                var d = e instanceof HTMLSelectElement ? "change" : "input change", l = (t = e.dataset.valEvent) !== null && t !== void 0 ? t : d, u = l.split(" ");
                u.forEach(function(h) {
                  e.addEventListener(h, a.debounced);
                }), a.remove = function() {
                  u.forEach(function(h) {
                    e.removeEventListener(h, a.debounced);
                  });
                }, this.inputEvents[n] = a;
              }
            }, s.prototype.removeInput = function(e) {
              var r = this.getElementUID(e), t = this.inputEvents[r];
              t?.remove && (t.remove(), delete t.remove), delete this.summary[r], delete this.inputEvents[r], delete this.validators[r], e.form && this.untrackFormInput(e.form, r);
            }, s.prototype.scanInputs = function(e, r) {
              var t = Array.from(e.querySelectorAll(M('[data-val="true"]')));
              V(e) && e.getAttribute("data-val") === "true" && t.push(e);
              for (var n = 0; n < t.length; n++) {
                var i = t[n];
                r.call(this, i);
              }
            }, s.prototype.createSummaryDOM = function() {
              if (!Object.keys(this.summary).length)
                return null;
              var e = [], r = document.createElement("ul");
              for (var t in this.summary) {
                var n = this.elementByUID[t];
                if (!(n instanceof HTMLInputElement && (n.type === "checkbox" || n.type === "radio") && n.className === this.ValidationInputValidCssClassName) && !(e.indexOf(this.summary[t]) > -1)) {
                  var i = document.createElement("li");
                  i.innerHTML = this.summary[t], r.appendChild(i), e.push(this.summary[t]);
                }
              }
              return r;
            }, s.prototype.renderSummary = function() {
              var e = document.querySelectorAll('[data-valmsg-summary="true"]');
              if (e.length) {
                var r = JSON.stringify(this.summary, Object.keys(this.summary).sort());
                if (r !== this.renderedSummaryJSON) {
                  this.renderedSummaryJSON = r;
                  for (var t = this.createSummaryDOM(), n = 0; n < e.length; n++) {
                    for (var i = e[n], a = i.querySelectorAll("ul"), o = 0; o < a.length; o++)
                      a[o].remove();
                    t && t.hasChildNodes() ? (this.swapClasses(i, this.ValidationSummaryCssClassName, this.ValidationSummaryValidCssClassName), i.appendChild(t.cloneNode(!0))) : this.swapClasses(i, this.ValidationSummaryValidCssClassName, this.ValidationSummaryCssClassName);
                  }
                }
              }
            }, s.prototype.addError = function(e, r) {
              var t = this.getMessageFor(e);
              if (t)
                for (var n = 0; n < t.length; n++)
                  t[n], t[n].innerHTML = r, this.swapClasses(t[n], this.ValidationMessageCssClassName, this.ValidationMessageValidCssClassName);
              if (this.highlight(e, this.ValidationInputCssClassName, this.ValidationInputValidCssClassName), e.form)
                for (var i = e.form.querySelectorAll(M('[name="'.concat(e.name, '"]'))), n = 0; n < i.length; n++) {
                  this.swapClasses(i[n], this.ValidationInputCssClassName, this.ValidationInputValidCssClassName);
                  var a = this.getElementUID(i[n]);
                  this.summary[a] = r;
                }
              this.renderSummary();
            }, s.prototype.removeError = function(e) {
              var r = this.getMessageFor(e);
              if (r)
                for (var t = 0; t < r.length; t++)
                  r[t].innerHTML = "", this.swapClasses(r[t], this.ValidationMessageValidCssClassName, this.ValidationMessageCssClassName);
              if (this.unhighlight(e, this.ValidationInputCssClassName, this.ValidationInputValidCssClassName), e.form)
                for (var n = e.form.querySelectorAll(M('[name="'.concat(e.name, '"]'))), t = 0; t < n.length; t++) {
                  this.swapClasses(n[t], this.ValidationInputValidCssClassName, this.ValidationInputCssClassName);
                  var i = this.getElementUID(n[t]);
                  delete this.summary[i];
                }
              this.renderSummary();
            }, s.prototype.createValidator = function(e, r) {
              var t = this;
              return function() {
                return v(t, void 0, void 0, function() {
                  var n, i, a, o, d, l, u, h, x, g, m;
                  return I(this, function(C) {
                    switch (C.label) {
                      case 0:
                        if (!(!this.isHidden(e) && !this.isDisabled(e))) return [3, 7];
                        n = r, i = [];
                        for (a in n)
                          i.push(a);
                        o = 0, C.label = 1;
                      case 1:
                        return o < i.length ? (a = i[o], a in n ? (d = a, l = r[d], u = this.providers[d], u ? (this.logger.log("Running %s validator on element", d, e), h = u(e.value, e, l.params), x = !1, g = l.error, typeof h != "boolean" ? [3, 2] : (x = h, [3, 5])) : (this.logger.log("aspnet-validation provider not implemented: %s", d), [3, 6])) : [3, 6]) : [3, 7];
                      case 2:
                        return typeof h != "string" ? [3, 3] : (x = !1, g = h, [3, 5]);
                      case 3:
                        return [4, h];
                      case 4:
                        m = C.sent(), typeof m == "boolean" ? x = m : (x = !1, g = m), C.label = 5;
                      case 5:
                        if (!x)
                          return this.addError(e, g), [2, !1];
                        C.label = 6;
                      case 6:
                        return o++, [3, 1];
                      case 7:
                        return this.removeError(e), [2, !0];
                    }
                  });
                });
              };
            }, s.prototype.isHidden = function(e) {
              return !(this.allowHiddenFields || e.offsetWidth || e.offsetHeight || e.getClientRects().length);
            }, s.prototype.isDisabled = function(e) {
              return e.disabled;
            }, s.prototype.swapClasses = function(e, r, t) {
              r && !this.isDisabled(e) && !e.classList.contains(r) && e.classList.add(r), e.classList.contains(t) && e.classList.remove(t);
            }, s.prototype.bootstrap = function(e) {
              var r = this;
              Object.assign(this.options, e), this.addMvcProviders();
              var t = window.document, n = this.options.root, i = function() {
                r.scan(n), r.options.watch && r.watch(n);
              };
              t.readyState === "complete" || t.readyState === "interactive" ? i() : t.addEventListener("DOMContentLoaded", i);
            }, s.prototype.scan = function(e) {
              e ?? (e = this.options.root), this.logger.log("Scanning", e), this.scanMessages(e, this.pushValidationMessageSpan), this.scanInputs(e, this.addInput);
            }, s.prototype.remove = function(e) {
              e ?? (e = this.options.root), this.logger.log("Removing", e), this.scanMessages(e, this.removeValidationMessageSpan), this.scanInputs(e, this.removeInput);
            }, s.prototype.watch = function(e) {
              var r = this;
              e ?? (e = this.options.root), this.observer = new MutationObserver(function(t) {
                t.forEach(function(n) {
                  r.observed(n);
                });
              }), this.observer.observe(e, {
                attributes: !0,
                childList: !0,
                subtree: !0
              }), this.logger.log("Watching for mutations");
            }, s.prototype.observed = function(e) {
              var r, t, n;
              if (e.type === "childList") {
                for (var i = 0; i < e.addedNodes.length; i++) {
                  var a = e.addedNodes[i];
                  this.logger.log("Added node", a), a instanceof HTMLElement && this.scan(a);
                }
                for (var i = 0; i < e.removedNodes.length; i++) {
                  var a = e.removedNodes[i];
                  this.logger.log("Removed node", a), a instanceof HTMLElement && this.remove(a);
                }
              } else if (e.type === "attributes" && e.target instanceof HTMLElement) {
                var o = e.attributeName;
                if (o === "disabled") {
                  var d = e.target;
                  this.reset(d);
                } else {
                  var l = (r = e.oldValue) !== null && r !== void 0 ? r : "", u = (n = (t = e.target.attributes[e.attributeName]) === null || t === void 0 ? void 0 : t.value) !== null && n !== void 0 ? n : "";
                  this.logger.log("Attribute '%s' changed from '%s' to '%s'", e.attributeName, l, u, e.target), l !== u && this.scan(e.target);
                }
              }
            }, s.prototype.highlight = function(e, r, t) {
              this.swapClasses(e, r, t);
            }, s.prototype.unhighlight = function(e, r, t) {
              this.swapClasses(e, t, r);
            }, s;
          }()
        );
        return b;
      })()
    ));
  }(F)), F.exports;
}
var P = q();
document.body.attributes.__htmx_antiforgery || (document.addEventListener("htmx:configRequest", (y) => {
  const { verb: p, parameters: w, headers: b } = y.detail;
  if (p?.toUpperCase() === "GET") return;
  const v = htmx.config?.antiforgery;
  if (!v) return;
  const { headerName: I, requestToken: E, formFieldName: V } = v;
  if (!I && !V) {
    console.warn("Antiforgery configuration is missing both headerName and formFieldName. Token not added.");
    return;
  }
  V && w[V] || (I ? b[I] = E : w[V] = E);
}), document.addEventListener("htmx:afterOnLoad", (y) => {
  if (y.detail.boosted) {
    const p = y.detail.xhr.responseText, w = "meta[name=htmx-config]", b = p.indexOf('<meta name="htmx-config"'), v = p.indexOf(">", b) + 1, I = p.indexOf("</meta>", v);
    if (b > -1) {
      let E = "";
      if (I > -1) {
        const M = p.indexOf("/", b);
        M > -1 && M < v ? E = p.substring(b, v) : E = p.substring(b, p.indexOf("</meta>") + 7);
      } else
        E = p.substring(b, v);
      const V = /content="([^"]*)"/, L = E.match(V);
      if (L && L[1]) {
        const M = L[1], T = document.querySelector(w), f = "antiforgery";
        try {
          htmx.config[f] = JSON.parse(M)[f];
        } catch (s) {
          console.error("Error parsing htmx-config JSON:", s);
          return;
        }
        const c = document.createElement("meta");
        c.setAttribute("name", "htmx-config"), c.setAttribute("content", M), T.replaceWith(c);
      }
    }
  }
}), document.body.attributes.__htmx_antiforgery = !0);
let O = new P.ValidationService();
O.bootstrap({ watch: !0 });
const z = {
  validation: O
};
window.Rizzy = { ...window.Rizzy || {}, ...z };
export {
  z as default
};
