@using Rizzy.Framework.Services
@using RizzyDemo.Controllers.Home.Models
@attribute [StreamRendering]

<RzPageTitle>Rizzy Demo Home</RzPageTitle>
<RzHeadContent>
    <meta name="description" content="This is a test description">
</RzHeadContent>

<div class="container py-4">
    <div class="row">
        <!-- Main feed -->
        <div class="col-md-8">
            <div class="mb-3">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="What's happening?">
                    <button class="btn btn-primary" type="button">Tweet</button>
                </div>
            </div>
            @if (Posts == null)
            {
	            for (int i = 0; i < 5; i++)
	            {
		            <div class="card mb-3">
			            <div class="card-body">
				            <!-- Skeleton for Author and Post Info -->
				            <div class="d-flex align-items-center mb-3">
					            <!-- Skeleton Avatar -->
					            <div class="rounded-circle bg-light" style="width: 50px; height: 50px;"></div>
					            <div class="ms-2">
						            <div class="bg-light rounded" style="width: 120px; height: 20px;"></div>
						            <div class="bg-light rounded mt-1" style="width: 80px; height: 15px;"></div>
					            </div>
				            </div>

				            <!-- Skeleton Media Image -->
				            <div class="bg-light rounded mb-2" style="width: 100%; height: 450px;"></div>

				            <!-- Skeleton Message -->
				            <div class="bg-light rounded" style="width: 100%; height: 20px;"></div>
			            </div>
		            </div>
	            }
            }
            else
            {
                foreach (var post in Posts)
                {
                    <div class="card mb-3">
                        <div class="card-body p-0">
                            <!-- Author and Post Info -->
                            <div class="d-flex align-items-center mb-2 p-2">
                                <!-- Author Circle Avatar -->
                                <img src="@post.ProfilePhotoUrl" class="rounded-circle me-2" style="width: 50px; height: 50px;" alt="Author avatar">
                                <div>
                                    <h5 class="card-title mb-1"><strong>@post.FullName</strong></h5>
                                    <h6 class="card-subtitle text-muted">@@@post.Username · @post.RelativeTimeOfPost</h6>
                                </div>
                            </div>

                            <!-- Media Image -->
                            @if (!string.IsNullOrEmpty(post.MediaPhotoUrl))
                            {
                                <img src="@post.MediaPhotoUrl" class="img-fluid mb-2" alt="Post media">
                            }

                            <!-- Post Message -->
                            <p class="card-text p-3 my-2">@post.Message.</p>
                        </div>
                    </div>

                }
            }
        </div>

        <!-- Sidebar for trending topics or navigation (optional) -->
        <div class="col-md-4">
            <h4>Trending Topics</h4>
            <ul class="list-group">
                <li class="list-group-item">Topic 1</li>
                <li class="list-group-item">Topic 2</li>
                <li class="list-group-item">Topic 3</li>
            </ul>
            
            <div class="mt-5">
                <p><small>The message below was loaded using Rizzy and Minimal APIs</small></p>
                <div hx-post="/love-htmx" hx-trigger="load once" />
            </div>
        </div>
    </div>
</div>


@{
	var guid = Guid.NewGuid().ToString();
}
Content Guid: @guid

@code {
    private List<Post>? Posts { get; set; } = null;

    [CascadingParameter] 
    public RzViewContext? ViewContext { get; set; }

    [Inject] public PostRepo Repo { get; set; } = default!;
    [Inject] public IHtmxSwapService HtmxSwapService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Posts = await Repo.GetPosts();
        HtmxSwapService.AddRawContent("<h1>Testing</h1>");
    }

    protected override void OnParametersSet()
    {
    }
}